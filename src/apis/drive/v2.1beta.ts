// Copyright 2020 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/class-name-casing */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-empty-interface */
/* eslint-disable @typescript-eslint/no-namespace */
/* eslint-disable no-irregular-whitespace */

import {
  OAuth2Client,
  JWT,
  Compute,
  UserRefreshClient,
  GaxiosPromise,
  GoogleConfigurable,
  createAPIRequest,
  MethodOptions,
  StreamMethodOptions,
  GlobalOptions,
  GoogleAuth,
  BodyResponseCallback,
  APIRequestContext,
} from 'googleapis-common';
import {Readable} from 'stream';

export namespace drive_v2_1beta {
  export interface Options extends GlobalOptions {
    version: 'v2.1beta';
  }

  interface StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?:
      | string
      | OAuth2Client
      | JWT
      | Compute
      | UserRefreshClient
      | GoogleAuth;

    /**
     * Data format for the response.
     */
    alt?: string;
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
  }

  /**
   * Drive API
   *
   * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
   *
   * @example
   * const {google} = require('googleapis');
   * const drive = google.drive('v2.1beta');
   *
   * @namespace drive
   * @type {Function}
   * @version v2.1beta
   * @variation v2.1beta
   * @param {object=} options Options for Drive
   */
  export class Drive {
    context: APIRequestContext;
    about: Resource$About;
    admin: Resource$Admin;
    approvalevents: Resource$Approvalevents;
    approvals: Resource$Approvals;
    apps: Resource$Apps;
    attachments: Resource$Attachments;
    backups: Resource$Backups;
    changes: Resource$Changes;
    channels: Resource$Channels;
    children: Resource$Children;
    comments: Resource$Comments;
    drives: Resource$Drives;
    files: Resource$Files;
    nextdocpredictions: Resource$Nextdocpredictions;
    notifications: Resource$Notifications;
    parents: Resource$Parents;
    permissions: Resource$Permissions;
    properties: Resource$Properties;
    replies: Resource$Replies;
    revisions: Resource$Revisions;
    settings: Resource$Settings;
    teamdrives: Resource$Teamdrives;
    workspaces: Resource$Workspaces;

    constructor(options: GlobalOptions, google?: GoogleConfigurable) {
      this.context = {
        _options: options || {},
        google,
      };

      this.about = new Resource$About(this.context);
      this.admin = new Resource$Admin(this.context);
      this.approvalevents = new Resource$Approvalevents(this.context);
      this.approvals = new Resource$Approvals(this.context);
      this.apps = new Resource$Apps(this.context);
      this.attachments = new Resource$Attachments(this.context);
      this.backups = new Resource$Backups(this.context);
      this.changes = new Resource$Changes(this.context);
      this.channels = new Resource$Channels(this.context);
      this.children = new Resource$Children(this.context);
      this.comments = new Resource$Comments(this.context);
      this.drives = new Resource$Drives(this.context);
      this.files = new Resource$Files(this.context);
      this.nextdocpredictions = new Resource$Nextdocpredictions(this.context);
      this.notifications = new Resource$Notifications(this.context);
      this.parents = new Resource$Parents(this.context);
      this.permissions = new Resource$Permissions(this.context);
      this.properties = new Resource$Properties(this.context);
      this.replies = new Resource$Replies(this.context);
      this.revisions = new Resource$Revisions(this.context);
      this.settings = new Resource$Settings(this.context);
      this.teamdrives = new Resource$Teamdrives(this.context);
      this.workspaces = new Resource$Workspaces(this.context);
    }
  }

  /**
   * An item with user information and settings.
   */
  export interface Schema$About {
    /**
     * Information about supported additional roles per file type. The most specific type takes precedence.
     */
    additionalRoleInfo?: Array<{
      roleSets?: Array<{additionalRoles?: string[]; primaryRole?: string}>;
      type?: string;
    }> | null;
    /**
     * The server&#39;s build label.
     */
    buildLabel?: string | null;
    /**
     * Whether the user can create shared drives.
     */
    canCreateDrives?: boolean | null;
    /**
     * Deprecated - use canCreateDrives instead.
     */
    canCreateTeamDrives?: boolean | null;
    /**
     * The user&#39;s Apps domain, if applicable
     */
    domain?: string | null;
    /**
     * The domain sharing policy for the current user. Possible values are:   - allowed  - allowedWithWarning  - incomingOnly  - disallowed
     */
    domainSharingPolicy?: string | null;
    /**
     * A list of themes that are supported for shared drives.
     */
    driveThemes?: Array<{
      backgroundImageLink?: string;
      colorRgb?: string;
      id?: string;
    }> | null;
    /**
     * The ETag of the item.
     */
    etag?: string | null;
    /**
     * The allowable export formats.
     */
    exportFormats?: Array<{source?: string; targets?: string[]}> | null;
    /**
     * List of additional features enabled on this account.
     */
    features?: Array<{featureName?: string; featureRate?: number}> | null;
    /**
     * The palette of allowable folder colors as RGB hex strings.
     */
    folderColorPalette?: string[] | null;
    /**
     * Information on the G Suite account&#39;s subscription status.
     */
    gsuiteSubscriptionInfo?: {
      status?: string;
      trialEndTime?: string;
      trialMillisRemaining?: string;
    } | null;
    /**
     * The allowable import formats.
     */
    importFormats?: Array<{source?: string; targets?: string[]}> | null;
    /**
     * A boolean indicating whether the authenticated app is installed by the authenticated user.
     */
    isCurrentAppInstalled?: boolean | null;
    /**
     * This is always drive#about.
     */
    kind?: string | null;
    /**
     * The user&#39;s language or locale code, as defined by BCP 47, with some extensions from Unicode&#39;s LDML format (http://www.unicode.org/reports/tr35/).
     */
    languageCode?: string | null;
    /**
     * The largest change id.
     */
    largestChangeId?: string | null;
    /**
     * List of max upload sizes for each file type. The most specific type takes precedence.
     */
    maxUploadSizes?: Array<{size?: string; type?: string}> | null;
    /**
     * The name of the current user.
     */
    name?: string | null;
    /**
     * The current user&#39;s ID as visible in the permissions collection.
     */
    permissionId?: string | null;
    /**
     * Whether the Google Photos service is enabled for this account.
     */
    photosServiceEnabled?: boolean | null;
    /**
     * The amount of storage quota used by different Google services.
     */
    quotaBytesByService?: Array<{
      bytesUsed?: string;
      serviceName?: string;
    }> | null;
    /**
     * The total number of quota bytes.
     */
    quotaBytesTotal?: string | null;
    /**
     * The number of quota bytes used by Google Drive.
     */
    quotaBytesUsed?: string | null;
    /**
     * The number of quota bytes used by all Google apps (Drive, Picasa, etc.).
     */
    quotaBytesUsedAggregate?: string | null;
    /**
     * The number of quota bytes used by trashed items.
     */
    quotaBytesUsedInTrash?: string | null;
    /**
     * The type of the user&#39;s storage quota. Possible values are:   - LIMITED  - UNLIMITED
     */
    quotaType?: string | null;
    /**
     * The number of remaining change ids, limited to no more than 2500.
     */
    remainingChangeIds?: string | null;
    /**
     * The id of the root folder.
     */
    rootFolderId?: string | null;
    /**
     * A link back to this item.
     */
    selfLink?: string | null;
    /**
     * Information on the account&#39;s team dashboard status.
     */
    teamDashboardCapabilities?: {
      canAdministerTeam?: boolean;
      canManageInvites?: boolean;
    } | null;
    /**
     * Deprecated - use driveThemes instead.
     */
    teamDriveThemes?: Array<{
      backgroundImageLink?: string;
      colorRgb?: string;
      id?: string;
    }> | null;
    /**
     * The authenticated user.
     */
    user?: Schema$User;
  }
  /**
   * An action item (TODO) on the file for user. Action item currently can be an unanswered mentions or an unresolved suggestions, but can be extended to other types like unseen edits, due tasks on files, etc. Any metadata associated with action item will also be included here. Details in http://go/docos-handling-priority-docs
   */
  export interface Schema$ActionItem {
    /**
     * The ID of action item. E.g. comment ID of an unanswered mention in Kix document.
     */
    id?: string | null;
    /**
     * The type of action item. Type can be MENTION and SUGGESTION.
     */
    type?: string | null;
  }
  /**
   * An admin&#39;s view of a file, used in admin requests.
   */
  export interface Schema$AdminFile {
    /**
     * ID of the shared drive the file resides in.
     */
    driveId?: string | null;
    /**
     * The ID of the file.
     */
    id?: string | null;
    /**
     * This is always drive#adminFile.
     */
    kind?: string | null;
    parentId?: string | null;
    /**
     * Deprecated use driveId instead.
     */
    teamDriveId?: string | null;
    /**
     * The title of this file.
     */
    title?: string | null;
  }
  /**
   * The apps resource provides a list of the apps that a user has installed, with information about each app&#39;s supported MIME types, file extensions, and other details.
   */
  export interface Schema$App {
    /**
     * The amount of Application Data quota used, in bytes. May be 0 while still having Application Data.
     */
    appDataQuotaBytesUsed?: string | null;
    /**
     * Whether the app is authorized to access data on the user&#39;s Drive.
     */
    authorized?: boolean | null;
    /**
     * The list of Chrome extension IDs associated with the app.
     */
    chromeExtensionIds?: string[] | null;
    /**
     * The template url to create a new file with this app in a given folder. The template will contain {folderId} to be replaced by the folder to create the new file in.
     */
    createInFolderTemplate?: string | null;
    /**
     * The url to create a new file with this app.
     */
    createUrl?: string | null;
    /**
     * Whether the app is an official Google Drive branded app.
     */
    driveBranded?: boolean | null;
    /**
     * Deprecated (b/19710844)
     */
    driveBrandedApp?: boolean | null;
    /**
     * Whether the app has created items in the user&#39;s Drive.
     */
    driveSource?: boolean | null;
    /**
     * Whether the app has Application Data.
     */
    hasAppData?: boolean | null;
    /**
     * Whether the app has drive-wide scope. An app with drive-wide scope can access all files in the user&#39;s drive.
     */
    hasDriveWideScope?: boolean | null;
    /**
     * Whether the app has a G-Suite Marketplace (GSM) listing.
     */
    hasGsmListing?: boolean | null;
    /**
     * Whether the app is normally suppressed from the list of apps.
     */
    hidden?: boolean | null;
    /**
     * The various icons for the app.
     */
    icons?: Array<{category?: string; iconUrl?: string; size?: number}> | null;
    /**
     * The ID of the app.
     */
    id?: string | null;
    /**
     * Whether the app is installed.
     */
    installed?: boolean | null;
    /**
     * This is always drive#app.
     */
    kind?: string | null;
    /**
     * A long description of the app.
     */
    longDescription?: string | null;
    /**
     * The name of the app.
     */
    name?: string | null;
    /**
     * The type of object this app creates (e.g. Chart). If empty, the app name should be used instead.
     */
    objectType?: string | null;
    /**
     * The template url for opening files with this app. The template will contain {ids} and/or {exportIds} to be replaced by the actual file ids.
     */
    openUrlTemplate?: string | null;
    /**
     * The list of origins from which this app can be served.
     */
    origins?: string[] | null;
    /**
     * The list of primary file extensions.
     */
    primaryFileExtensions?: string[] | null;
    /**
     * The list of primary mime types.
     */
    primaryMimeTypes?: string[] | null;
    /**
     * The ID of the product listing for this app.
     */
    productId?: string | null;
    /**
     * A link to the product listing for this app.
     */
    productUrl?: string | null;
    /**
     * Information used to rank this app&#39;s quality versus other apps.
     */
    rankingInfo?: {
      absoluteScore?: number;
      fileExtensionScores?: Array<{score?: number; type?: string}>;
      mimeTypeScores?: Array<{score?: number; type?: string}>;
    } | null;
    /**
     * Whether the app is removable (also known as uninstallable or deletable). Domain-installed apps and some first-party apps are &quot;force installed&quot; and therefore cannot be uninstalled by clients.
     */
    removable?: boolean | null;
    /**
     * Whether the app must be authorized before an &quot;Open with&quot; operation can be performed.
     */
    requiresAuthorizationBeforeOpenWith?: boolean | null;
    /**
     * The list of secondary file extensions.
     */
    secondaryFileExtensions?: string[] | null;
    /**
     * The list of secondary mime types.
     */
    secondaryMimeTypes?: string[] | null;
    /**
     * A short description of the app.
     */
    shortDescription?: string | null;
    /**
     * Deprecated (b/19710844)
     */
    source?: boolean | null;
    /**
     * Whether the app supports both My Drives and shared drives.
     */
    supportsAllDrives?: boolean | null;
    /**
     * Whether this app supports creating new objects.
     */
    supportsCreate?: boolean | null;
    /**
     * Whether this app supports importing Google Docs.
     */
    supportsImport?: boolean | null;
    /**
     * Whether this app has indicated it works in mobile browsers.
     */
    supportsMobileBrowser?: boolean | null;
    /**
     * Whether this app supports opening more than one file.
     */
    supportsMultiOpen?: boolean | null;
    /**
     * Whether this app supports creating new files when offline.
     */
    supportsOfflineCreate?: boolean | null;
    /**
     * Deprecated use supportsAllDrives instead.
     */
    supportsTeamDrives?: boolean | null;
    /**
     * The type of the app.
     */
    type?: string | null;
    /**
     * Whether the app is selected as the default handler for the types it supports.
     */
    useByDefault?: boolean | null;
  }
  /**
   * A list of third-party applications which the user has installed or given access to Google Drive.
   */
  export interface Schema$AppList {
    /**
     * List of app IDs that the user has specified to use by default. The list is in reverse-priority order (lowest to highest).
     */
    defaultAppIds?: string[] | null;
    /**
     * The ETag of the list.
     */
    etag?: string | null;
    /**
     * The list of apps.
     */
    items?: Schema$App[];
    /**
     * This is always drive#appList.
     */
    kind?: string | null;
    /**
     * A link back to this list.
     */
    selfLink?: string | null;
  }
  export interface Schema$Approval {
    /**
     * The Approval ID.
     */
    approvalId?: string | null;
    /**
     * Set of actions that the user may take on the Approval.
     */
    capabilities?: {
      canAddReviewers?: boolean;
      canCancel?: boolean;
      canComment?: boolean;
      canModifyDueDate?: boolean;
      canReview?: boolean;
    } | null;
    /**
     * The initial comment for the Approval. This is a write-only field; it can only be set when inserting an Approval.
     */
    commentText?: string | null;
    /**
     * The time at which this Approval was completed (formatted RFC 3339 timestamp).
     */
    completedDate?: string | null;
    /**
     * The time at which this Approval was created (formatted RFC 3339 timestamp).
     */
    createdDate?: string | null;
    /**
     * The due date for this Approval (formatted RFC 3339 timestamp). This field can be set when inserting an Approval. Due date of an existing approval can be modified with a drive.approvals.setDueDate request.
     */
    dueDate?: string | null;
    /**
     * The user that requested the Approval.
     */
    initiator?: Schema$User;
    /**
     * This is always drive#approval.
     */
    kind?: string | null;
    /**
     * Whether revisionId is the Drive item&#39;s most current revision.
     */
    latest?: boolean | null;
    /**
     * The time at which this Approval was modified (formatted RFC 3339 timestamp).
     */
    modifiedDate?: string | null;
    /**
     * The decisions that are part of the Approval.
     */
    reviewerDecisions?: Schema$ReviewerDecision[];
    /**
     * Specify the reviewers for the Approval. This is a write-only field; it can only be set when inserting an Approval.
     */
    reviewerEmailAddresses?: string[] | null;
    /**
     * Deprecated - use reviewerEmailAddresses instead.
     */
    reviewerPersonNames?: string[] | null;
    /**
     * Revision of the Drive item at which the Approval was initiated.
     */
    revisionId?: string | null;
    /**
     * The status of the Approval.
     */
    status?: string | null;
  }
  export interface Schema$ApprovalChangeReviewers {
    /**
     * The text of a comment to add to the Approval, if desired.
     */
    commentText?: string | null;
    /**
     * This is always drive#approvalChangeReviewers.
     */
    kind?: string | null;
    reviewerEmailAddressesToAdd?: string[] | null;
    reviewerReassignments?: Schema$ReviewerReassignmentTemplate[];
  }
  /**
   * A request to make a decision on an Approval.
   */
  export interface Schema$ApprovalDecisionRequest {
    /**
     * The text of a comment to add to the Approval, if desired.
     */
    commentText?: string | null;
    /**
     * The decision being made by the requester. Supported values include:   - approved  - declined
     */
    decision?: string | null;
    /**
     * This is always drive#approvalDecisionRequest.
     */
    kind?: string | null;
  }
  export interface Schema$ApprovalDueDate {
    /**
     * The due date (formatted RFC 3339 timestamp).
     */
    dueDate?: string | null;
    /**
     * This is always drive#approvalDueDate.
     */
    kind?: string | null;
  }
  export interface Schema$ApprovalEvent {
    /**
     * The Approval is complete. This can occur when all reviewers have approved the Approval, any one reviewer has declined the Approval, or when an editor performs a drive.approvals.cancel action.
     */
    approvalCompleteEvent?: {commentText?: string; status?: string} | null;
    approvalCreateEvent?: {
      commentText?: string;
      dueDate?: string;
      reviewers?: Schema$User[];
    } | null;
    /**
     * Someone has commented on the Approval. This event is created when someone performs a drive.approvals.comment action.
     */
    commentEvent?: {commentText?: string} | null;
    /**
     * The time at which this ApprovalEvent was created (formatted RFC 3339 timestamp).
     */
    createdDate?: string | null;
    creator?: Schema$User;
    /**
     * A reviewer has made a decision on the Approval. This event is created when a reviewer performs a drive.approvals.approve action.
     */
    decisionEvent?: {
      commentText?: string;
      reviewerDecision?: Schema$ReviewerDecision;
    } | null;
    dueDateChangeEvent?: {dueDate?: string; priorDueDate?: string} | null;
    /**
     * The ApprovalEvent ID.
     */
    eventId?: string | null;
    /**
     * This is always drive#approvalEvent.
     */
    kind?: string | null;
    /**
     * Someone has changed the reviewers on the Approval. This event is created when someone performs a drive.approvals.changeReviewers action.
     */
    reviewerChangeEvent?: {
      addedReviewers?: Schema$User[];
      commentText?: string;
      reassignedReviewers?: Schema$ReassignedReviewersTemplate[];
    } | null;
  }
  /**
   * A list of ApprovalEvents.
   */
  export interface Schema$ApprovalEventList {
    /**
     * The list of ApprovalEvents. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
     */
    items?: Schema$ApprovalEvent[];
    /**
     * This is always drive#approvalEventList
     */
    kind?: string | null;
    /**
     * The page token for the next page of ApprovalEvents. This will be absent if the end of the ApprovalEvents list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
     */
    nextPageToken?: string | null;
  }
  /**
   * A request to cancel or comment on an Approval.
   */
  export interface Schema$ApprovalEventRequest {
    /**
     * The text of a comment to add to the Approval, if desired.
     */
    commentText?: string | null;
    /**
     * This is always drive#approvalEventRequest.
     */
    kind?: string | null;
  }
  /**
   * A list of Approvals.
   */
  export interface Schema$ApprovalList {
    /**
     * The list of Approvals. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
     */
    items?: Schema$Approval[];
    /**
     * This is always drive#approvalList
     */
    kind?: string | null;
    /**
     * The page token for the next page of Approvals. This will be absent if the end of the Approvals list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
     */
    nextPageToken?: string | null;
  }
  /**
   * A summary of a single approval associated with an item.
   */
  export interface Schema$ApprovalSummary {
    /**
     * The ID of the approval referenced by this summary.
     */
    approvalId?: string | null;
    /**
     * This is always drive#approvalSummary.
     */
    kind?: string | null;
    /**
     * The status of the approval. Possible status values are: IN_PROGRESS, COMPLETED, and CANCELLED.
     */
    status?: string | null;
  }
  /**
   * Represents metadata and status of an archive file extraction job.
   */
  export interface Schema$ArchiveExtractionJob {
    /**
     * The ID of the folder to extract the contents of the archive into.
     */
    destinationLocationId?: string | null;
    /**
     * The ETag of the file preview.
     */
    etag?: string | null;
    /**
     * The ID for this archive file extraction job.
     */
    id?: string | null;
    /**
     * This is always drive#archiveExtractionJob.
     */
    kind?: string | null;
    /**
     * The ID for the archive file that is extracted.
     */
    sourceFileId?: string | null;
    /**
     * The current status of this file extraction job. Values are one of:   - INITIATED  - PREPARED  - SUCCEEDED  - PENDING_ROLLBACK  - FAILED
     */
    status?: string | null;
  }
  /**
   * A preview for a file resource within an archive.
   */
  export interface Schema$ArchiveResourcePreview {
    /**
     * The list of child resource previews of this preview.
     */
    children?: Schema$ArchiveResourcePreview[];
    /**
     * The type of error associated with this resource. Allowed values are:   - NONE  - RESOURCE_UNREADABLE  - RESOURCE_TOO_LARGE  - USER_LACKS_QUOTA
     */
    errorType?: string | null;
    /**
     * This is always drive#archiveResourcePreview.
     */
    kind?: string | null;
    /**
     * The mime type of the resource within the archive file.
     */
    mimeType?: string | null;
    /**
     * The path of the resource within the archive file.
     */
    path?: string | null;
  }
  /**
   * Representation of a gmail attachment metadata.
   */
  export interface Schema$Attachment {
    /**
     * The ID of the file created in Drive.
     */
    fileId?: string | null;
    /**
     * This is always drive#attachment.
     */
    kind?: string | null;
    /**
     * The message ID of the attachment. This is expected to be a hex string.
     */
    messageId?: string | null;
    /**
     * The part ID of the attachment.
     */
    partId?: string | null;
  }
  /**
   * The metadata for a backup.
   */
  export interface Schema$Backup {
    /**
     * The source of the backup. Possible values are: whatsapp and carbon.
     */
    backupSource?: string | null;
    /**
     * A summary of the contents of this backup. A map of types to the number and total size of the files of that type.
     */
    backupSummary?: {
      [key: string]: {count?: number; totalSize?: string};
    } | null;
    /**
     * The user-facing identifier for this backup. For WhatsApp backups, this is the phone number of the WhatsApp account.
     */
    externalId?: string | null;
    /**
     * The current state of extraction for this backup. Extraction state can only be modified by calling startExtraction and stopExtraction. Transitions to ongoing and failed states are triggered by the completion or failure of processing in the backend. Possible values are:   - notStarted the user hasn&#39;t started extraction  - started the user started extraction, but the initial extraction isn&#39;t complete  - ongoing the initial extraction has completed and ongoing extraction is enabled  - stopped the user paused the extraction from either the started or ongoing state  - failed there was a persistent failure in either the initial or ongoing extraction
     */
    extractionState?: string | null;
    /**
     * The ID of the backup.
     */
    id?: string | null;
    /**
     * This is always drive#backup.
     */
    kind?: string | null;
    /**
     * The time of this modification.
     */
    lastBackupDate?: string | null;
    /**
     * The ID of the target folder for the extraction of this backup.
     */
    targetFolderId?: string | null;
  }
  /**
   * A list of backups for a user.
   */
  export interface Schema$BackupList {
    /**
     * The list of backups.
     */
    items?: Schema$Backup[];
    /**
     * This is always drive#backupList.
     */
    kind?: string | null;
  }
  /**
   * Representation of a Category Attribute Value.
   */
  export interface Schema$CategoryAttributeValue {
    /**
     * Only present if valueType is boolean.
     */
    boolean?: boolean | null;
    /**
     * DEPRECATED: Use dateString.
     */
    date?: Schema$Date;
    /**
     * DEPRECATED: Not implemented.
     */
    dateList?: Schema$Date[];
    /**
     * Only present if valueType is dateString. RFC 3339 formatted date: YYYY-MM-DD.
     */
    dateString?: string | null;
    /**
     * DEPRECATED: Not implemented.
     */
    dateTime?: string | null;
    /**
     * DEPRECATED: Not implemented.
     */
    dateTimeList?: string[] | null;
    /**
     * Only present if valueType is driveFile.
     */
    driveFile?: string | null;
    /**
     * Only present if valueType is driveFileList.
     */
    driveFileList?: string[] | null;
    /**
     * The identifier of this Category Attribute Value.
     */
    id?: string | null;
    /**
     * Only present if valueType is integer.
     */
    integer?: string | null;
    /**
     * Only present if valueType is integerList.
     */
    integerList?: string[] | null;
    /**
     * This is always drive#categoryAttributeValue.
     */
    kind?: string | null;
    /**
     * Only present if valueType is longText.
     */
    longText?: string | null;
    /**
     * Only present if valueType is money.
     */
    money?: Schema$Money;
    /**
     * Only present if valueType is moneyList.
     */
    moneyList?: Schema$Money[];
    /**
     * Only present if valueType is selection.
     */
    selection?: string | null;
    /**
     * Only present if valueType is selectionList
     */
    selectionList?: string[] | null;
    /**
     * Only present if valueType is text.
     */
    text?: string | null;
    /**
     * Only present if valueType is textList.
     */
    textList?: string[] | null;
    /**
     * Only present if valueType is user.
     */
    user?: Schema$User;
    /**
     * Only present if valueType is userList.
     */
    userList?: Schema$User[];
    /**
     * Only present if valueType is userScoped.
     */
    userScoped?: {[key: string]: Schema$UserScopedAttributeValue} | null;
    /**
     * The attribute type. While new values may be supported in the future, the following are currently allowed:   - boolean  - dateString  - driveFile  - driveFileList  - integer  - integerList  - longText  - money  - moneyList  - selection  - selectionList  - text  - textList  - user  - userList  - userScoped
     */
    valueType?: string | null;
  }
  /**
   * Representation of a Category Attribute Value being modified.
   */
  export interface Schema$CategoryAttributeValueDelta {
    /**
     * A new value to add to a list of integer values if the attribute is an integer list attribute.
     */
    addIntegerValues?: string[] | null;
    /**
     * A new value to add to a list of selection values if the attribute is a selection multi select attribute.
     */
    addSelectionValues?: string[] | null;
    /**
     * A new value to add to a list of text values if the attribute is a text list attribute.
     */
    addTextValues?: string[] | null;
    /**
     * Add new values to a list of users if the attribute is a user list attribute. The values must be valid email addresses.
     */
    addUserValues?: string[] | null;
    /**
     * The identifier of the Attribute Value to be modified.
     */
    id?: string | null;
    /**
     * This is always drive#categoryAttributeValueDelta
     */
    kind?: string | null;
    /**
     * The new value if the attribute is a boolean attribute.
     */
    setBooleanValue?: boolean | null;
    /**
     * The new value if the attribute is a dateString attribute. The string must be in the RFC 3339 full-date format: YYYY-MM-DD.
     */
    setDateStringValue?: string | null;
    /**
     * The new value if the attribute is an integer attribute.
     */
    setIntegerValue?: string | null;
    /**
     * Replaces the list of integer values with these new values if the attribute is an integer list attribute.
     */
    setIntegerValues?: string[] | null;
    /**
     * The new value if the attribute is a long text attribute.
     */
    setLongTextValue?: string | null;
    /**
     * The new value if the attribute is a selection single select attribute.
     */
    setSelectionValue?: string | null;
    /**
     * Replaces the list of selection values with these new values if the attribute is a selection multi select attribute.
     */
    setSelectionValues?: string[] | null;
    /**
     * The new value if the attribute is a text attribute.
     */
    setTextValue?: string | null;
    /**
     * Replaces the list of text values with these new values if the attribute is a text list attribute.
     */
    setTextValues?: string[] | null;
    /**
     * The new value if the attribute is a user attribute. The value must be a valid email address.
     */
    setUserValue?: string | null;
    /**
     * Replaces the list of users if the attribute is a user list attribute. The values must be valid email addresses.
     */
    setUserValues?: string[] | null;
  }
  /**
   * Representation of Category and Attribute Metadata.
   */
  export interface Schema$CategoryMetadata {
    /**
     * The values of the Category Metadata Attributes for the file. This is a map of Attribute metadata keyed by the Attribute id.
     */
    attributeValues?: {[key: string]: Schema$CategoryAttributeValue} | null;
    /**
     * The name of the Category.
     */
    categoryName?: string | null;
    /**
     * This is always drive#categoryMetadata
     */
    kind?: string | null;
  }
  /**
   * Representation of an update to Category Metadata.
   */
  export interface Schema$CategoryMetadataDelta {
    /**
     * The category metadata attributes to update.
     */
    categoryAttributeValueDeltas?: Schema$CategoryAttributeValueDelta[];
    /**
     * The name of the Category to which the update applies.
     */
    categoryName?: string | null;
    /**
     * This is always drive#categoryMetadataDelta
     */
    kind?: string | null;
    removeCategory?: boolean | null;
    /**
     * The category metadata attributes to revert to their default value.
     */
    revertAttributeIds?: string[] | null;
  }
  /**
   * A map of Category names to Category Metadata.
   */
  export interface Schema$CategoryMetadataList {
    /**
     * A map of the name of the Category to the Category Metadata applied to this item. DEPRECATED - use &#39;items&#39; instead. This field will be deleted and will not be copied into v2 or v3. TODO(b/117280829) - remove this field once it is not used by internal clients.
     */
    categoryMetadata?: {[key: string]: Schema$CategoryMetadata} | null;
    /**
     * The list of Category Metadata.
     */
    items?: Schema$CategoryMetadata[];
    /**
     * This is always drive#categoryMetadataList
     */
    kind?: string | null;
    /**
     * The page token for the next page of Category Metadata. This field will be absent if the end of the list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
     */
    nextPageToken?: string | null;
  }
  /**
   * Representation of a change to a file or shared drive.
   */
  export interface Schema$Change {
    /**
     * The type of the change. Possible values are file and drive.
     */
    changeType?: string | null;
    /**
     * Whether the file or shared drive has been removed from this list of changes, for example by deletion or loss of access.
     */
    deleted?: boolean | null;
    /**
     * The updated state of the shared drive. Present if the changeType is drive, the user is still a member of the shared drive, and the shared drive has not been deleted.
     */
    drive?: Schema$Drive;
    /**
     * The ID of the shared drive associated with this change.
     */
    driveId?: string | null;
    /**
     * The updated state of the file. Present if the type is file and the file has not been removed from this list of changes.
     */
    file?: Schema$File;
    /**
     * The ID of the file associated with this change.
     */
    fileId?: string | null;
    /**
     * The version of the file associated with this change. See file.version.
     */
    fileVersion?: string | null;
    /**
     * The ID of the change.
     */
    id?: string | null;
    /**
     * This is always drive#change.
     */
    kind?: string | null;
    /**
     * The time of this modification.
     */
    modificationDate?: string | null;
    /**
     * A link back to this change.
     */
    selfLink?: string | null;
    /**
     * Deprecated - use drive instead.
     */
    teamDrive?: Schema$TeamDrive;
    /**
     * Deprecated - use driveId instead.
     */
    teamDriveId?: string | null;
    /**
     * Deprecated use changeType instead.
     */
    type?: string | null;
  }
  /**
   * A list of changes for a user.
   */
  export interface Schema$ChangeList {
    /**
     * Internal field efficiency info.
     */
    efficiencyInfo?: Schema$Efficiency;
    /**
     * The ETag of the list.
     */
    etag?: string | null;
    /**
     * The list of changes. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
     */
    items?: Schema$Change[];
    /**
     * This is always drive#changeList.
     */
    kind?: string | null;
    /**
     * Deprecated - use changes.getStartPageToken or newStartPageToken instead.
     */
    largestChangeId?: string | null;
    /**
     * The starting page token for future changes. This will be present only if the end of the current changes list has been reached.
     */
    newStartPageToken?: string | null;
    /**
     * A link to the next page of changes.
     */
    nextLink?: string | null;
    /**
     * The page token for the next page of changes. This will be absent if the end of the changes list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
     */
    nextPageToken?: string | null;
    /**
     * Deprecated - use changes.getRemainingCount instead.
     */
    remainingChanges?: string | null;
    /**
     * A link back to this list.
     */
    selfLink?: string | null;
  }
  /**
   * An notification channel used to watch for resource changes.
   */
  export interface Schema$Channel {
    /**
     * The address where notifications are delivered for this channel.
     */
    address?: string | null;
    /**
     * Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.
     */
    expiration?: string | null;
    /**
     * A UUID or similar unique string that identifies this channel.
     */
    id?: string | null;
    /**
     * Identifies this as a notification channel used to watch for changes to a resource, which is &quot;api#channel&quot;.
     */
    kind?: string | null;
    /**
     * Additional parameters controlling delivery channel behavior. Optional.
     */
    params?: {[key: string]: string} | null;
    /**
     * A Boolean value to indicate whether payload is wanted. Optional.
     */
    payload?: boolean | null;
    /**
     * An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.
     */
    resourceId?: string | null;
    /**
     * A version-specific identifier for the watched resource.
     */
    resourceUri?: string | null;
    /**
     * An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.
     */
    token?: string | null;
    /**
     * The type of delivery mechanism used for this channel.
     */
    type?: string | null;
  }
  export interface Schema$CheckPermissionsRequest {
    /**
     * List of files by ID to check access to for the specified email addresses and role.
     */
    fileIds?: string[] | null;
    /**
     * This is always drive#checkPermissionsRequest.
     */
    kind?: string | null;
    /**
     * Locale in which to localize messages.
     */
    locale?: string | null;
    /**
     * List of email addresses to ensure access for the specified items and role.
     */
    recipientEmailAddresses?: string[] | null;
    /**
     * Minimum role level to ensure the recipients have for the specified items.
     */
    role?: string | null;
  }
  export interface Schema$CheckPermissionsResponse {
    /**
     * A summary of the overall fixability of the proposed recipients and files.
     */
    fixabilitySummaryState?: string | null;
    /**
     * A list of proposed permission fixes for the specified recipients and files.
     */
    fixOptions?: Array<{
      addCollaboratorsInfo?: {outOfDomainWarningEmailAddresses?: string[]};
      allowedRoles?: string[];
      fixableFileIds?: string[];
      fixableRecipientEmailAddresses?: string[];
      fixesEverything?: boolean;
      increaseDomainVisibilityInfo?: {
        domainDisplayName?: string;
        domainName?: string;
      };
      optionType?: string;
      warningInfo?: {
        warningMessageBody?: string;
        warningMessageHeader?: string;
      };
    }> | null;
    /**
     * This is always drive#checkPermissionsResponse.
     */
    kind?: string | null;
  }
  /**
   * A list of children of a file.
   */
  export interface Schema$ChildList {
    /**
     * The ETag of the list.
     */
    etag?: string | null;
    /**
     * The list of children. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
     */
    items?: Schema$ChildReference[];
    /**
     * This is always drive#childList.
     */
    kind?: string | null;
    /**
     * A link to the next page of children.
     */
    nextLink?: string | null;
    /**
     * The page token for the next page of children. This will be absent if the end of the children list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
     */
    nextPageToken?: string | null;
    /**
     * A link back to this list.
     */
    selfLink?: string | null;
  }
  /**
   * A reference to a folder&#39;s child.
   */
  export interface Schema$ChildReference {
    /**
     * A link to the child.
     */
    childLink?: string | null;
    /**
     * The ID of the child.
     */
    id?: string | null;
    /**
     * This is always drive#childReference.
     */
    kind?: string | null;
    /**
     * A link back to this reference.
     */
    selfLink?: string | null;
  }
  /**
   * A comment on a file in Google Drive.
   */
  export interface Schema$Comment {
    /**
     * A region of the document represented as a JSON string. See anchor documentation for details on how to define and interpret anchor properties.
     */
    anchor?: string | null;
    /**
     * The user who wrote this comment.
     */
    author?: Schema$User;
    /**
     * The ID of the comment.
     */
    commentId?: string | null;
    /**
     * The plain text content used to create this comment. This is not HTML safe and should only be used as a starting point to make edits to a comment&#39;s content.
     */
    content?: string | null;
    /**
     * The context of the file which is being commented on.
     */
    context?: {type?: string; value?: string} | null;
    /**
     * The date when this comment was first created.
     */
    createdDate?: string | null;
    /**
     * Whether this comment has been deleted. If a comment has been deleted the content will be cleared and this will only represent a comment that once existed.
     */
    deleted?: boolean | null;
    /**
     * The file which this comment is addressing.
     */
    fileId?: string | null;
    /**
     * The title of the file which this comment is addressing.
     */
    fileTitle?: string | null;
    /**
     * HTML formatted content for this comment.
     */
    htmlContent?: string | null;
    /**
     * This is always drive#comment.
     */
    kind?: string | null;
    /**
     * The date when this comment or any of its replies were last modified.
     */
    modifiedDate?: string | null;
    /**
     * Replies to this post.
     */
    replies?: Schema$CommentReply[];
    /**
     * A link back to this comment.
     */
    selfLink?: string | null;
    /**
     * The status of this comment. Status can be changed by posting a reply to a comment with the desired status.   - &quot;open&quot; - The comment is still open.  - &quot;resolved&quot; - The comment has been resolved by one of its replies.
     */
    status?: string | null;
    /**
     * Suggestion ID if the post is a suggestion, empty otherwise.
     */
    suggestionId?: string | null;
  }
  /**
   * A list of comments on a file in Google Drive.
   */
  export interface Schema$CommentList {
    /**
     * The list of comments. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
     */
    items?: Schema$Comment[];
    /**
     * This is always drive#commentList.
     */
    kind?: string | null;
    /**
     * A link to the next page of comments.
     */
    nextLink?: string | null;
    /**
     * The page token for the next page of comments. This will be absent if the end of the comments list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
     */
    nextPageToken?: string | null;
    /**
     * A link back to this list.
     */
    selfLink?: string | null;
  }
  /**
   * A reply to a comment on a file in Google Drive.
   */
  export interface Schema$CommentReply {
    /**
     * The user who wrote this reply.
     */
    author?: Schema$User;
    /**
     * The plain text content used to create this reply. This is not HTML safe and should only be used as a starting point to make edits to a reply&#39;s content. This field is required on inserts if no verb is specified (resolve/reopen).
     */
    content?: string | null;
    /**
     * The date when this reply was first created.
     */
    createdDate?: string | null;
    /**
     * Whether this reply has been deleted. If a reply has been deleted the content will be cleared and this will only represent a reply that once existed.
     */
    deleted?: boolean | null;
    /**
     * HTML formatted content for this reply.
     */
    htmlContent?: string | null;
    /**
     * This is always drive#commentReply.
     */
    kind?: string | null;
    /**
     * The date when this reply was last modified.
     */
    modifiedDate?: string | null;
    /**
     * The ID of the reply.
     */
    replyId?: string | null;
    /**
     * The action this reply performed to the parent comment. When creating a new reply this is the action to be perform to the parent comment. Possible values are:   - &quot;resolve&quot; - To resolve a comment.  - &quot;reopen&quot; - To reopen (un-resolve) a comment.
     */
    verb?: string | null;
  }
  /**
   * A list of replies to a comment on a file in Google Drive.
   */
  export interface Schema$CommentReplyList {
    /**
     * The list of replies. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
     */
    items?: Schema$CommentReply[];
    /**
     * This is always drive#commentReplyList.
     */
    kind?: string | null;
    /**
     * A link to the next page of replies.
     */
    nextLink?: string | null;
    /**
     * The page token for the next page of replies. This will be absent if the end of the replies list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
     */
    nextPageToken?: string | null;
    /**
     * A link back to this list.
     */
    selfLink?: string | null;
  }
  /**
   * A restriction for accessing the content of the file.
   */
  export interface Schema$ContentRestriction {
    /**
     * Whether the content of the file is read-only. If a file is read-only, a new revision of the file may not be added, comments may not be added or modified, and the title of the file may not be modified.
     */
    readOnly?: boolean | null;
    /**
     * Reason for why the content of the file is restricted. This is only mutable on requests that also set readOnly=true.
     */
    reason?: string | null;
    /**
     * The user who set the content restriction. Only populated if readOnly is true.
     */
    restrictingUser?: Schema$User;
    /**
     * The time at which the content restriction was set (formatted RFC 3339 timestamp). Only populated if readOnly is true.
     */
    restrictionDate?: string | null;
    /**
     * The type of the content restriction. Currently the only possible value is globalContentRestriction.
     */
    type?: string | null;
  }
  /**
   * Representation of a Date containing a year, month, and day.
   */
  export interface Schema$Date {
    /**
     * The date&#39;s day. Valid values are 1 - 31, depending on the month.
     */
    day?: number | null;
    /**
     * This is always drive#date
     */
    kind?: string | null;
    /**
     * The date&#39;s month. Valid values are 1 - 12.
     */
    month?: number | null;
    /**
     * The date&#39;s year.
     */
    year?: number | null;
  }
  /**
   * Representation of the CSE DecryptionMetadata.
   */
  export interface Schema$DecryptionMetadata {
    /**
     * Chunk size used if content was encrypted with the AES 256 GCM Cipher. Possible values are:   - default&lt;/code  - small
     */
    aes256GcmChunkSize?: string | null;
    /**
     * The signed JSON Web Token (JWT) which can be used to authorize the requesting user with the Key ACL Service (KACLS). The JWT asserts that the requesting user has at least read permissions on the file.
     */
    jwt?: string | null;
    /**
     * The ID of the KACLS (Key ACL Service) used to encrypt a blob revision.
     */
    kaclsId?: string | null;
    /**
     * This is always drive#decryptionMetadata
     */
    kind?: string | null;
    /**
     * The URL-safe Base64 encoded wrapped key used to encrypt the contents of the blob.
     */
    wrappedKey?: string | null;
  }
  /**
   * Representation of a shared drive.
   */
  export interface Schema$Drive {
    /**
     * An image file and cropping parameters from which a background image for this shared drive is set. This is a write only field; it can only be set on drive.drives.update requests that don&#39;t set themeId. When specified, all fields of the backgroundImageFile must be set.
     */
    backgroundImageFile?: {
      id?: string;
      width?: number;
      xCoordinate?: number;
      yCoordinate?: number;
    } | null;
    /**
     * A link to this shared drive&#39;s background image for use in Tesla&#39;s grid view.
     */
    backgroundImageGridViewLink?: string | null;
    /**
     * A short-lived link to this shared drive&#39;s background image.
     */
    backgroundImageLink?: string | null;
    /**
     * A link to this shared drive&#39;s background image for use in Tesla&#39;s list view.
     */
    backgroundImageListViewLink?: string | null;
    /**
     * Capabilities the current user has on this shared drive.
     */
    capabilities?: {
      canAddChildren?: boolean;
      canAddFolderFromAnotherDrive?: boolean;
      canChangeCategoryReferences?: boolean;
      canChangeCopyRequiresWriterPermissionRestriction?: boolean;
      canChangeDisallowDriveFileStreamRestriction?: boolean;
      canChangeDomainUsersOnlyRestriction?: boolean;
      canChangeDriveBackground?: boolean;
      canChangeDriveMembersOnlyRestriction?: boolean;
      canComment?: boolean;
      canCopy?: boolean;
      canDeleteChildren?: boolean;
      canDeleteDrive?: boolean;
      canDownload?: boolean;
      canEdit?: boolean;
      canListChildren?: boolean;
      canManageMembers?: boolean;
      canMoveChildrenOutOfDrive?: boolean;
      canMoveChildrenWithinDrive?: boolean;
      canOptOutOfSecureLinkUpdateForAllFiles?: boolean;
      canPrint?: boolean;
      canReadRevisions?: boolean;
      canRename?: boolean;
      canRenameDrive?: boolean;
      canShare?: boolean;
      canShareFiles?: boolean;
      canShareFolders?: boolean;
      canShareToAllUsers?: boolean;
      canTrashChildren?: boolean;
    } | null;
    categoryReferences?: Schema$DriveCategoryReference[];
    /**
     * The color of this shared drive as an RGB hex string. It can only be set on a drive.drives.update request that does not set themeId.
     */
    colorRgb?: string | null;
    /**
     * The time at which the shared drive was created (RFC 3339 date-time).
     */
    createdDate?: string | null;
    /**
     * User that created the shared drive, if available. Only returned when useDomainAdminAccess=true.
     */
    creator?: Schema$User;
    /**
     * The obfuscated customer ID of the customer that owns this shared drive.
     */
    customerId?: string | null;
    /**
     * Whether the shared drive is hidden from default view.
     */
    hidden?: boolean | null;
    /**
     * The ID of this shared drive which is also the ID of the top level folder of this shared drive.
     */
    id?: string | null;
    /**
     * This is always drive#drive
     */
    kind?: string | null;
    /**
     * The name of this shared drive.
     */
    name?: string | null;
    /**
     * Whether the current Shared Drive has opted out of the secure link update.
     */
    optOutOfSecureLinkUpdateForAllFilesEnabled?: boolean | null;
    /**
     * The display name of the organization to which this shared drive belongs.
     */
    organizationDisplayName?: string | null;
    /**
     * A summary of the permissions of this shared drive as an output-only field.
     */
    permissionsSummary?: {
      entryCount?: number;
      groupEntryCount?: number;
      memberCount?: number;
      selectPermissions?: Schema$Permission[];
      userEntryCount?: number;
    } | null;
    /**
     * The DNS domain name of the primary domain of the organization to which this shared drive belongs.
     */
    primaryDomainName?: string | null;
    /**
     * The details about this shared drive&#39;s storage quota.
     */
    quotaInfo?: {
      graceQuotaInfo?: {additionalQuotaBytes?: string; endDate?: string};
      quotaBytesTotal?: string;
      quotaBytesUsed?: string;
      quotaType?: string;
    } | null;
    /**
     * The number of files contained within this shared drive, excluding the shared drive&#39;s top level folder. NOTE: this value is stale, and is only intended to be used by Cello for backfilling purposes. Do not add to public API versions. More info: go/team-drive-stats-api
     */
    recursiveFileCount?: string | null;
    /**
     * The number of folders contained within this shared drive, excluding the shared drive&#39;s top level folder. NOTE: this value is stale, and is only intended to be used by Cello for backfilling purposes. Do not add to public API versions. More info: go/team-drive-stats-api
     */
    recursiveFolderCount?: string | null;
    /**
     * A set of restrictions that apply to this shared drive or items inside this shared drive.
     */
    restrictions?: {
      adminManagedRestrictions?: boolean;
      copyRequiresWriterPermission?: boolean;
      disallowDriveFileStream?: boolean;
      domainUsersOnly?: boolean;
      driveMembersOnly?: boolean;
    } | null;
    /**
     * A set of overrides for any restriction that can be overridden outside of the shared drive&#39;s restriction settings. The name of the override is identical to the name of the restriction which can be overridden.
     */
    restrictionsOverride?: {domainUsersOnly?: string} | null;
    /**
     * The ID of the theme from which the background image and color will be set. The set of possible driveThemes can be retrieved from a drive.about.get response. When not specified on a drive.drives.insert request, a random theme is chosen from which the background image and color are set. This is a write-only field; it can only be set on requests that don&#39;t set colorRgb or backgroundImageFile.
     */
    themeId?: string | null;
    /**
     * Whether this shared drive belongs to a domain that is trusted by the requesting user&#39;s domain.
     */
    trusted?: boolean | null;
  }
  /**
   * A request to add/remove references to categories on a shared drive.
   */
  export interface Schema$DriveCategoryChangeRequest {
    /**
     * The references to categories to add or update on the shared drive.
     */
    addCategoryReferences?: Schema$DriveCategoryReference[];
    /**
     * This is always drive#driveCategoryChangeRequest.
     */
    kind?: string | null;
    /**
     * The category resource names to remove from the shared drive.
     */
    removeCategoryReferences?: string[] | null;
  }
  export interface Schema$DriveCategoryReference {
    /**
     * The category resource name.
     */
    category?: string | null;
    /**
     * This is always drive#driveCategoryReference.
     */
    kind?: string | null;
  }
  /**
   * A list of shared drives.
   */
  export interface Schema$DriveList {
    /**
     * The list of shared drives. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
     */
    items?: Schema$Drive[];
    /**
     * This is always drive#driveList
     */
    kind?: string | null;
    /**
     * The page token for the next page of shared drives. This will be absent if the end of the list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
     */
    nextPageToken?: string | null;
  }
  /**
   * Information regarding what aspects of a request impacted efficiency.
   */
  export interface Schema$Efficiency {
    /**
     * The inefficient Drive Service fields requested.
     */
    inefficientDriveServiceFields?: string[] | null;
    /**
     * This is always drive#efficiency.
     */
    kind?: string | null;
    /**
     * The Drive Service query strategies used to answer the request.
     */
    queryStrategies?: string[] | null;
    requestWasInefficient?: boolean | null;
  }
  /**
   * The metadata for a file.
   */
  export interface Schema$File {
    /**
     * Action items for the current user on this file.
     */
    actionItems?: Schema$ActionItem[];
    /**
     * A link for opening the file in a relevant Google editor or viewer.
     */
    alternateLink?: string | null;
    /**
     * If set, this item will be sync&#39;d to Photos with a flag indicating it should always be shown even if Google Drive objects are filtered out. This is intended for use only by the Google Drive/Photos unified uploader, and will be enforced by a whitelist.
     */
    alwaysShowInPhotos?: boolean | null;
    /**
     * Whether any ancestor has permissions directly on it. This field is only populated for shared drive files.
     */
    ancestorHasAugmentedPermissions?: boolean | null;
    /**
     * Whether this file is in the appdata folder.
     */
    appDataContents?: boolean | null;
    /**
     * Names of categories that have been applied to the file.
     */
    appliedCategories?: string[] | null;
    /**
     * Metadata regarding Approvals associated with this file.
     */
    approvalMetadata?: {
      approvalSummaries?: Schema$ApprovalSummary[];
      approvalVersion?: string;
    } | null;
    /**
     * The apps that are authorized to this file. This is only populated when the drive.apps scope is used.
     */
    authorizedAppIds?: string[] | null;
    /**
     * A list of DLP detector names for the file with blocking consequences.
     */
    blockingDetectors?: string[] | null;
    /**
     * Deprecated: use capabilities/canComment.
     */
    canComment?: boolean | null;
    /**
     * Capabilities the current user has on this file. Each capability corresponds to a fine-grained action that a user may take.
     */
    capabilities?: {
      canAddChildren?: boolean;
      canAddFolderFromAnotherDrive?: boolean;
      canAddMyDriveParent?: boolean;
      canChangeCopyRequiresWriterPermission?: boolean;
      canChangePermissionExpiration?: boolean;
      canChangeRestrictedDownload?: boolean;
      canChangeSecurityUpdateEnabled?: boolean;
      canChangeWritersCanShare?: boolean;
      canComment?: boolean;
      canCopy?: boolean;
      canDelete?: boolean;
      canDeleteChildren?: boolean;
      canDownload?: boolean;
      canEdit?: boolean;
      canEditCategoryMetadata?: boolean;
      canListChildren?: boolean;
      canManageMembers?: boolean;
      canManageVisitors?: boolean;
      canModifyContent?: boolean;
      canModifyContentRestriction?: boolean;
      canModifyLabels?: boolean;
      canMoveChildrenOutOfDrive?: boolean;
      canMoveChildrenOutOfTeamDrive?: boolean;
      canMoveChildrenWithinDrive?: boolean;
      canMoveChildrenWithinTeamDrive?: boolean;
      canMoveItemIntoTeamDrive?: boolean;
      canMoveItemOutOfDrive?: boolean;
      canMoveItemOutOfTeamDrive?: boolean;
      canMoveItemWithinDrive?: boolean;
      canMoveItemWithinTeamDrive?: boolean;
      canMoveTeamDriveItem?: boolean;
      canPrint?: boolean;
      canRead?: boolean;
      canReadAllPermissions?: boolean;
      canReadCategoryMetadata?: boolean;
      canReadDrive?: boolean;
      canReadLabels?: boolean;
      canReadRevisions?: boolean;
      canReadTeamDrive?: boolean;
      canRemoveChildren?: boolean;
      canRemoveMyDriveParent?: boolean;
      canRename?: boolean;
      canRequestApproval?: boolean;
      canSetMissingRequiredFields?: boolean;
      canShare?: boolean;
      canShareAsCommenter?: boolean;
      canShareAsFileOrganizer?: boolean;
      canShareAsOrganizer?: boolean;
      canShareAsOwner?: boolean;
      canShareAsReader?: boolean;
      canShareAsWriter?: boolean;
      canShareChildFiles?: boolean;
      canShareChildFolders?: boolean;
      canSharePublishedViewAsReader?: boolean;
      canShareToAllUsers?: boolean;
      canTrash?: boolean;
      canTrashChildren?: boolean;
      canUntrash?: boolean;
    } | null;
    /**
     * Category Metadata that have been applied to the file, keyed by the category name. To include Category Metadata on a file, both this field must be requested, and the categoryMetadataNames query param must be populated with the desired Category Metadata to include. For example: categoryMetadataNames=&#39;category_1,category_5&#39;, fields=&#39;categoryMetadata&#39;
     */
    categoryMetadata?: {[key: string]: Schema$CategoryMetadata} | null;
    /**
     * Deprecated: value is no longer being written on updates and cannot be trusted. This used to return whether this file has been changed since this user last viewed it.
     */
    changed?: boolean | null;
    /**
     * Client Side Encryption related details. Contains details about the encryption state of the file and details regarding the encryption mechanism that clients need to use when decrypting the contents of this item. This will only be present on files and not on folders or shortcuts.
     */
    clientEncryptionDetails?: {
      decryptionMetadata?: Schema$DecryptionMetadata;
      encryptionState?: string;
    } | null;
    /**
     * Whether the comments import has finished for the head revision.
     */
    commentsImported?: boolean | null;
    /**
     * Whether this folder contains children that are unsubscribed.
     */
    containsUnsubscribedChildren?: boolean | null;
    /**
     * Deprecated: Use contentRestrictions.
     */
    contentRestriction?: {readOnly?: boolean; reason?: string} | null;
    /**
     * Restrictions for accessing the content of the file. Only populated if such a restriction exists.
     */
    contentRestrictions?: Schema$ContentRestriction[];
    /**
     * Deprecated: use capabilities/canCopy.
     */
    copyable?: boolean | null;
    /**
     * Whether the options to copy, print, or download this file, should be disabled for readers and commenters.
     */
    copyRequiresWriterPermission?: boolean | null;
    /**
     * The time at which this file was created, possibly as specified by the uploading client (formatted RFC 3339 timestamp).
     */
    createdDate?: string | null;
    /**
     * User that created the item, if available.
     */
    creator?: Schema$User;
    /**
     * The ID of the application that was used to create this file.
     */
    creatorAppId?: string | null;
    /**
     * The obfuscated customer ID of the organization or customer to which this file belongs.
     */
    customerId?: string | null;
    /**
     * A link to open this file with the user&#39;s default app for this file. Only populated when the drive.apps[.readonly] scope is used.
     */
    defaultOpenWithLink?: string | null;
    /**
     * Whether the file is parented under root or any of its subfolders. Note that this field is not completely reliable as there can be propagation delays. Not populated for shared drive files.
     */
    descendantOfRoot?: boolean | null;
    /**
     * A short description of the file.
     */
    description?: string | null;
    /**
     * A list of DLP detector names for the file. These detectors have consequence, for example blocking sharing. DLP detectors without consequences will not appear in this list. Consider using blockingDetectors and warningDetectors instead if the type of consequence is important.
     */
    detectors?: string[] | null;
    downloadUrl?: string | null;
    /**
     * ID of the shared drive the file resides in. Only populated for items in shared drives.
     */
    driveId?: string | null;
    /**
     * The client that created an item.
     */
    driveSource?: {clientServiceId?: string; value?: string} | null;
    /**
     * Deprecated: use capabilities/canEdit.
     */
    editable?: boolean | null;
    /**
     * Internal field efficiency info.
     */
    efficiencyInfo?: Schema$Efficiency;
    /**
     * Whether this file is embedded within a package. Applications must be whitelisted to read this field.
     */
    embedded?: boolean | null;
    /**
     * On write, the ID of the embedding parent file in which to embed this file. If the parent file belongs to a package the file is added to the same package, otherwise a new package is created with the ID of the parent file. On Read, the file ID of the embedding parent of this file within a package. Only present if the file is embedded in a package. Applications must be whitelisted to write or read this field.
     */
    embeddingParent?: string | null;
    /**
     * A link for embedding the file.
     */
    embedLink?: string | null;
    /**
     * ETag of the file.
     */
    etag?: string | null;
    /**
     * Whether this file has been explicitly trashed, as opposed to recursively trashed.
     */
    explicitlyTrashed?: boolean | null;
    /**
     * Links for exporting Google Docs to specific formats.
     */
    exportLinks?: {[key: string]: string} | null;
    /**
     * The final component of fullFileExtension with trailing text that does not appear to be part of the extension removed. This field is only populated for files with content stored in Google Drive; it is not populated for Google Docs or shortcut files.
     */
    fileExtension?: string | null;
    /**
     * The size of the file in bytes. This field is only populated for files with content stored in Google Drive; it is not populated for Google Docs or shortcut files.
     */
    fileSize?: string | null;
    /**
     * Whether the file is flagged for abuse.
     */
    flaggedForAbuse?: boolean | null;
    /**
     * Folder color (palette index) if the file is a folder. Not populated for shared drive files.
     */
    folderColor?: string | null;
    /**
     * Folder color as an RGB hex string if the file is a folder. The list of supported colors is available in the folderColorPalette field of the About resource. If an unsupported color is specified, it will be changed to the closest color in the palette. Not populated for shared drive files.
     */
    folderColorRgb?: string | null;
    /**
     * Additional attributes for a folder. DEPRECATED: use folderProperties instead
     */
    folderFeatures?: string[] | null;
    folderProperties?: {
      arbitrarySyncFolder?: boolean;
      externalMedia?: boolean;
      machineRoot?: boolean;
      photosAndVideosOnly?: boolean;
      psynchoFolder?: boolean;
      psynchoRoot?: boolean;
    } | null;
    /**
     * The full file extension; extracted from the title. May contain multiple concatenated extensions, such as &quot;tar.gz&quot;. Removing an extension from the title does not clear this field; however, changing the extension on the title does update this field. This field is only populated for files with content stored in Google Drive; it is not populated for Google Docs or shortcut files.
     */
    fullFileExtension?: string | null;
    /**
     * Whether this file is a Google+ photo or video. Deleting such a file also deletes it from Google+.
     */
    gplusMedia?: boolean | null;
    /**
     * Whether the file has an Apps Script add-on attached.
     */
    hasAppsScriptAddOn?: boolean | null;
    /**
     * Whether there are permissions directly on this file. This field is only populated for shared drive files.
     */
    hasAugmentedPermissions?: boolean | null;
    /**
     * Whether the folder has one or more child folders.
     */
    hasChildFolders?: boolean | null;
    /**
     * Whether the file has a comment.
     */
    hasComment?: boolean | null;
    /**
     * Whether the file has legacy blob comments.
     */
    hasLegacyBlobComments?: boolean | null;
    /**
     * Whether the file has permissions for a view.
     */
    hasPermissionsForViews?: boolean | null;
    /**
     * Whether a DLP detector exists with a restrict download consequence.
     */
    hasPreventDownloadConsequence?: boolean | null;
    /**
     * Whether this file has a thumbnail. This does not indicate whether the requesting app has access to the thumbnail. To check access, look for the presence of the thumbnailLink field.
     */
    hasThumbnail?: boolean | null;
    /**
     * Whether there is a visitor entry on this file for any user. This field is only populated for shared drive files.
     */
    hasVisitorPermissions?: boolean | null;
    /**
     * The creation date of the file&#39;s head revision (formatted RFC 3339 timestamp). This will only be populated for files with content stored in Google Drive; it is not populated for Google Docs or shortcut files.
     */
    headRevisionCreationDate?: string | null;
    /**
     * The ID of the file&#39;s head revision. This field is only populated for files with content stored in Google Drive; it is not populated for Google Docs or shortcut files.
     */
    headRevisionId?: string | null;
    /**
     * A link to the file&#39;s icon.
     */
    iconLink?: string | null;
    /**
     * The ID of the file.
     */
    id?: string | null;
    /**
     * Metadata about image media. This will only be present for image types, and its contents will depend on what can be parsed from the image content.
     */
    imageMediaMetadata?: {
      aperture?: number;
      cameraMake?: string;
      cameraModel?: string;
      colorSpace?: string;
      date?: string;
      exposureBias?: number;
      exposureMode?: string;
      exposureTime?: number;
      flashUsed?: boolean;
      focalLength?: number;
      height?: number;
      isoSpeed?: number;
      lens?: string;
      location?: {altitude?: number; latitude?: number; longitude?: number};
      maxApertureValue?: number;
      meteringMode?: string;
      rotation?: number;
      sensor?: string;
      subjectDistance?: number;
      whiteBalance?: string;
      width?: number;
    } | null;
    /**
     * Indexable text attributes for the file (can only be written)
     */
    indexableText?: {text?: string} | null;
    /**
     * Whether the file was created or opened by the requesting app.
     */
    isAppAuthorized?: boolean | null;
    /**
     * Whether lossy compression has been applied to the original file contents.
     */
    isCompressed?: boolean | null;
    /**
     * The type of file. This is always drive#file.
     */
    kind?: string | null;
    /**
     * An overview of the Labels on the file.
     */
    labelInfo?: {labelCount?: number; labels?: Schema$Label[]} | null;
    /**
     * A group of labels for the file.
     */
    labels?: {
      hidden?: boolean;
      modified?: boolean;
      restricted?: boolean;
      starred?: boolean;
      trashed?: boolean;
      viewed?: boolean;
    } | null;
    /**
     * The last user to modify this file.
     */
    lastModifyingUser?: Schema$User;
    /**
     * Name of the last user to modify this file.
     */
    lastModifyingUserName?: string | null;
    /**
     * Last time this file was viewed by the user (formatted RFC 3339 timestamp).
     */
    lastViewedByMeDate?: string | null;
    /**
     * Contains details about the link URLs that clients are using to refer to this item.
     */
    linkShareMetadata?: {
      securityUpdateEligible?: boolean;
      securityUpdateEnabled?: boolean;
    } | null;
    /**
     * The local ID used when creating this file.
     */
    localId?: Schema$FileLocalId;
    /**
     * Deprecated.
     */
    markedViewedByMeDate?: string | null;
    /**
     * An MD5 checksum for the content of this file. This field is only populated for files with content stored in Google Drive; it is not populated for Google Docs or shortcut files.
     */
    md5Checksum?: string | null;
    /**
     * The MIME type of the file. This is only mutable on update when uploading new content. This field can be left blank, and the mimetype will be determined from the uploaded content&#39;s MIME type.
     */
    mimeType?: string | null;
    /**
     * Last time this file was modified by the user (formatted RFC 3339 timestamp). Note that setting modifiedDate will also update the modifiedByMe date for the user which set the date.
     */
    modifiedByMeDate?: string | null;
    /**
     * Last time this file was modified by anyone (formatted RFC 3339 timestamp). This is only mutable on update when the setModifiedDate parameter is set.
     */
    modifiedDate?: string | null;
    /**
     * A map of the id of each of the user&#39;s apps to a link to open this file with that app. Only populated when the drive.apps[.readonly] scope is used.
     */
    openWithLinks?: {[key: string]: string} | null;
    /**
     * The displayable name of the organization to which this file belongs.
     */
    organizationDisplayName?: string | null;
    /**
     * The original filename of the uploaded content if available, or else the original value of the title field. This is only available for files with binary content in Google Drive.
     */
    originalFilename?: string | null;
    /**
     * The size in bytes of the original file contents before lossy compression was applied. Only populated if the file contents are not identical to the original file contents.
     */
    originalFileSize?: string | null;
    /**
     * The MD5 checksum (as a hex-encoded string) of the original file contents before lossy compression was applied. Only populated if the file contents are not identical to the original file contents.
     */
    originalMd5Checksum?: string | null;
    /**
     * Whether the file is owned by the current user. Not populated for shared drive files.
     */
    ownedByMe?: boolean | null;
    /**
     * Name(s) of the owner(s) of this file. Not populated for shared drive files.
     */
    ownerNames?: string[] | null;
    /**
     * The owner(s) of this file. Not populated for shared drive files.
     */
    owners?: Schema$User[];
    /**
     * The total size of the package in which this file is embedded. Only present when the file is embedded within a package. Applications must be whitelisted to read this field.
     */
    packageFileSize?: string | null;
    /**
     * The package ID of the file, which is the same as the ID of the root file of this package. Only present if the file is embedded in a package. Applications must be whitelisted to read this field.
     */
    packageId?: string | null;
    /**
     * The type of the ShadowDoc (go/shadowdocsdd) associated with the file. Possible values are:   - docs  - sheets  - slides
     */
    pairedDocType?: string | null;
    /**
     * The parent folder which contains this file. This is only populated when the item has a single parent folder and the user can access that folder.
     */
    parent?: Schema$ParentReference;
    /**
     * Collection of parent folders which contain this file. If not specified as part of an insert request, the file will be placed directly in the user&#39;s My Drive folder. If not specified as part of a copy request, the file will inherit any discoverable parents of the source file. Update requests can also use the addParents and removeParents parameters to modify the parents list.
     */
    parents?: Schema$ParentReference[];
    /**
     * Whether the current user is passively subscribed to this item.
     */
    passivelySubscribed?: boolean | null;
    /**
     * List of permission IDs for users with access to this file.
     */
    permissionIds?: string[] | null;
    /**
     * The list of permissions for users with access to this file. Not populated for shared drive files.
     */
    permissions?: Schema$Permission[];
    /**
     * A summary of the permissions on this file. This is an output-only field.
     */
    permissionsSummary?: {
      entryCount?: number;
      selectPermissions?: Schema$Permission[];
      visibility?: Array<{
        additionalRoles?: string[];
        domain?: string;
        domainDisplayName?: string;
        permissionId?: string;
        role?: string;
        type?: string;
        withLink?: boolean;
      }>;
    } | null;
    /**
     * For image and video files, the status of the lossy compression.
     */
    photosCompressionStatus?: string | null;
    /**
     * For image and video files, the storage policy for the file.
     */
    photosStoragePolicy?: string | null;
    /**
     * Resource to use for go/senna previews.
     */
    preview?: {expiryDate?: string; link?: string} | null;
    /**
     * The DNS domain name of the primary domain of the organization to which this file belongs.
     */
    primaryDomainName?: string | null;
    /**
     * The parent folder of the document that is also root or a descendant of root. Note that this field is not completely reliable as there can be propagation delays. Not populated for shared drive files.
     */
    primarySyncParentId?: string | null;
    /**
     * The list of properties.
     */
    properties?: Schema$Property[];
    /**
     * Publish information related to a view.
     */
    publishingInfo?: {published?: boolean; publishedUrl?: string} | null;
    /**
     * The number of quota bytes used by this file.
     */
    quotaBytesUsed?: string | null;
    /**
     * Deprecated: use capabilities/canRead.
     */
    readable?: boolean | null;
    /**
     * Whether a reader can see comments on the file.
     */
    readersCanSeeComments?: boolean | null;
    /**
     * An RFC 3339 timestamp which is used as the sorting field for the sort order of the same name.
     */
    recency?: string | null;
    /**
     * The reason for the current recency. Possible values are:   - createdByMe  - modifiedByMe  - modified  - viewedByMe
     */
    recencyReason?: string | null;
    /**
     * Recursive number of sub-items for this folder. Zero for non-folders and empty folders.
     */
    recursiveFileCount?: string | null;
    /**
     * File size in bytes for this file and all sub-items.
     */
    recursiveFileSize?: string | null;
    /**
     * The number of bytes charged to the requesting user&#39;s quota for this file and all sub-items.
     */
    recursiveQuotaBytesUsed?: string | null;
    /**
     * Former parent folders that were turned into shortcuts to eliminate multi-parenting. The field is filtered to only contain the parents that are discoverable by the requester.
     */
    removedParents?: Schema$ParentReference[];
    /**
     * A key needed to access the item via a shared link.
     */
    resourceKey?: string | null;
    /**
     * Indicates what index the full text search result came from.
     */
    searchResultSource?: string | null;
    /**
     * A link back to this file.
     */
    selfLink?: string | null;
    /**
     * The time at which this file was created from the perspective of the server (formatted RFC 3339 timestamp).
     */
    serverCreatedDate?: string | null;
    /**
     * The SHA1 checksums associated with this file. Cosmo doesn&#39;t store SHA1 for files, so this is only populated for files returned from a query using the sha1 query term. Photos and videos that are compressed will have both an original and a high quality checksum. Original quality photos and videos will only have one checksum.
     */
    sha1Checksums?: string[] | null;
    /**
     * Deprecated: use capabilities/canShare.
     */
    shareable?: boolean | null;
    /**
     * Whether the file has been shared. Not populated for shared drive files.
     */
    shared?: boolean | null;
    /**
     * Time at which this file was shared with the user (formatted RFC 3339 timestamp).
     */
    sharedWithMeDate?: string | null;
    /**
     * A link to the sharing UI for this file.
     */
    shareLink?: string | null;
    /**
     * User that shared the item with the current user, if available.
     */
    sharingUser?: Schema$User;
    /**
     * Shortcut file details. Only populated for shortcut files, which have the mimeType field set to application/vnd.google-apps.shortcut.
     */
    shortcutDetails?: {
      canRequestAccessToTarget?: boolean;
      targetFile?: Schema$File;
      targetId?: string;
      targetLookupStatus?: string;
      targetMimeType?: string;
      targetResourceKey?: string;
    } | null;
    /**
     * Deprecated: This field is being moved into shortcutDetails, however it&#39;s still read during creation.
     */
    shortcutTargetId?: string | null;
    /**
     * Deprecated: This field is being moved into shortcutDetails.
     */
    shortcutTargetMimeType?: string | null;
    /**
     * The client that created an item. Deprecated: use driveSource
     */
    source?: {client_service_id?: string; value?: string} | null;
    /**
     * The ID of the application that was used to create this file. This may be a superset of creatorAppId, but for the Drive Sources work, we weren&#39;t interested in merging the two fields.
     */
    sourceAppId?: string | null;
    /**
     * Field not implemented, subject to change.
     */
    sources?: any | null;
    /**
     * The list of spaces which contain the file. Supported values are &#39;drive&#39;, &#39;appDataFolder&#39;, &#39;photos&#39; and &#39;androidBackup&#39;.
     */
    spaces?: string[] | null;
    /**
     * Compression is underway or being attempted and the final &quot;isCompressed&quot; state is TBD.
     */
    storagePolicyPending?: boolean | null;
    /**
     * Whether the current user is subscribed to this item.
     */
    subscribed?: boolean | null;
    /**
     * A list of roles supported by this file type. Possible values are:   - owner  - organizer  - fileOrganizer  - writer  - commenter  - reader  - published_reader
     */
    supportedRoles?: string[] | null;
    /**
     * Deprecated - use driveId instead.
     */
    teamDriveId?: string | null;
    /**
     * Template Data attached to a Google document. This data is present if document is a template.
     */
    templateData?: {
      category?: string[];
      description?: string;
      galleryState?: string;
    } | null;
    /**
     * A thumbnail for the file. This will only be used if a standard thumbnail cannot be generated.
     */
    thumbnail?: {image?: string; mimeType?: string} | null;
    /**
     * A short-lived link to the file&#39;s thumbnail. Typically lasts on the order of hours. Only populated when the requesting app can access the file&#39;s content.
     */
    thumbnailLink?: string | null;
    /**
     * The thumbnail version for use in thumbnail cache invalidation.
     */
    thumbnailVersion?: string | null;
    /**
     * The title of this file. Note that for immutable items such as the top level folders of shared drives, My Drive root folder, and Application Data folder the title is constant.
     */
    title?: string | null;
    /**
     * The time that the item was trashed (formatted RFC 3339 timestamp). Only populated for shared drive files.
     */
    trashedDate?: string | null;
    /**
     * If the file has been explicitly trashed, the user who trashed it. Only populated for shared drive files.
     */
    trashingUser?: Schema$User;
    /**
     * The permissions for the authenticated user on this file. Includes a subset of the associated permissions resource. The &quot;role&quot; field is always populated. The partial resource uses an ID of &quot;me&quot; that differs from the full resource.
     */
    userPermission?: Schema$Permission;
    /**
     * A monotonically increasing version number for the file. This reflects every change made to the file on the server, even those not visible to the requesting user.
     */
    version?: string | null;
    /**
     * Metadata about video media. This will only be present for video types.
     */
    videoMediaMetadata?: {
      durationMillis?: string;
      height?: number;
      width?: number;
    } | null;
    /**
     * A list of DLP detector names for the file with warning consequences.
     */
    warningDetectors?: string[] | null;
    /**
     * A link for downloading the content of the file in a browser using cookie based authentication. In cases where the content is shared publicly, the content can be downloaded without any credentials.
     */
    webContentLink?: string | null;
    /**
     * A link only available on public folders for viewing their static web assets (HTML, CSS, JS, etc) via Google Drive&#39;s Website Hosting.
     */
    webViewLink?: string | null;
    /**
     * IDs of Workspaces to which the file belongs.
     */
    workspaceIds?: string[] | null;
    /**
     * Whether writers can share the document with other users. Not populated for shared drive files.
     */
    writersCanShare?: boolean | null;
  }
  /**
   * A list of files.
   */
  export interface Schema$FileList {
    /**
     * Internal field efficiency info.
     */
    efficiencyInfo?: Schema$Efficiency;
    /**
     * The ETag of the list.
     */
    etag?: string | null;
    /**
     * Whether the search process was incomplete. If true, then some search results may be missing, since all documents were not searched. This may occur when searching multiple drives with the &quot;allDrives&quot; corpora, but all corpora could not be searched. When this happens, it is suggested that clients narrow their query by choosing a different corpus such as &quot;default&quot; or &quot;drive&quot;.
     */
    incompleteSearch?: boolean | null;
    /**
     * The list of files. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
     */
    items?: Schema$File[];
    /**
     * This is always drive#fileList.
     */
    kind?: string | null;
    /**
     * A link to the next page of files.
     */
    nextLink?: string | null;
    /**
     * The page token for the next page of files. This will be absent if the end of the files list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
     */
    nextPageToken?: string | null;
    /**
     * A link back to this list.
     */
    selfLink?: string | null;
    /**
     * Spell response data. An example of this would be a correction in the spelling of a query that will likely return more results.
     */
    spellResponse?: Schema$SpellResponseTemplate;
    /**
     * List of suggested alternate &quot;q&quot; parameter values to use. These alternates are determined by applying natural language processing to the user&#39;s input to turn an unstructured query into a structured query.
     */
    suggestedNlpQueries?: string[] | null;
  }
  /**
   * A file&#39;s local ID.
   */
  export interface Schema$FileLocalId {
    /**
     * This is always drive#fileLocalId
     */
    kind?: string | null;
    /**
     * The type of the file this local ID represents.
     */
    space?: string | null;
    /**
     * A per-app-user identifier when combined with space and version.
     */
    value?: string | null;
    /**
     * The version of the conversion protocol used to generate the ID from the file ID.
     */
    version?: string | null;
  }
  /**
   * A preview of the contents of a file.
   */
  export interface Schema$FilePreview {
    /**
     * The list of contents of an archive file.
     */
    archivePreview?: Schema$ArchiveResourcePreview[];
    /**
     * The ETag of the file preview.
     */
    etag?: string | null;
    /**
     * This is always drive#filePreview.
     */
    kind?: string | null;
    /**
     * A link back to this file preview.
     */
    selfLink?: string | null;
  }
  export interface Schema$FixPermissionsRequest {
    /**
     * List of IDs of files whose permissions should be fixed with the specified fix option type.
     */
    fileIds?: string[] | null;
    /**
     * The type of fix to execute for the specified files.
     */
    fixOptionType?: string | null;
    /**
     * This is always drive#fixPermissionsRequest.
     */
    kind?: string | null;
    /**
     * List of email address to add to the permissions of the specified files if the &#39;ADD_COLLABORATORS&#39; fix option type is specified.
     */
    recipientEmailAddresses?: string[] | null;
    /**
     * Role that should be applied to the files&#39; collaborators (if &#39;ADD_COLLABORATORS&#39; fix option type is specified) or to users accessing the files via a visible file link (for visibility-related fix option types).
     */
    role?: string | null;
  }
  /**
   * JWT and associated metadata used to generate CSE files.
   */
  export interface Schema$GenerateCseTokenResponse {
    /**
     * The current Key ACL Service (KACLS) ID associated with the JWT.
     */
    currentKaclsId?: string | null;
    /**
     * The fileId for which the JWT was generated.
     */
    fileId?: string | null;
    /**
     * The signed JSON Web Token (JWT) for the file.
     */
    jwt?: string | null;
    /**
     * This is always drive#generateCseTokenResponse
     */
    kind?: string | null;
  }
  /**
   * A list of generated IDs which can be provided in insert requests
   */
  export interface Schema$GeneratedIds {
    /**
     * The IDs generated for the requesting user in the specified space.
     */
    ids?: string[] | null;
    /**
     * This is always drive#generatedIds
     */
    kind?: string | null;
    /**
     * The space in which items can be created with these IDs.
     */
    space?: string | null;
    /**
     * The type of items which can be created with these IDs.
     */
    type?: string | null;
  }
  /**
   * Representation of a Label and its Fields.
   */
  export interface Schema$Label {
    /**
     * A map of the Label&#39;s fields keyed by the field ID.
     */
    fields?: {[key: string]: Schema$LabelField} | null;
    /**
     * The ID of the label.
     */
    id?: string | null;
    /**
     * This is always drive#label
     */
    kind?: string | null;
    /**
     * The revision ID of the label.
     */
    revisionId?: string | null;
  }
  /**
   * Representation of a Label Field.
   */
  export interface Schema$LabelField {
    /**
     * Only present if valueType is dateString. RFC 3339 formatted date: YYYY-MM-DD.
     */
    dateString?: string | null;
    /**
     * The identifier of this Field.
     */
    id?: string | null;
    /**
     * Only present if valueType is integer.
     */
    integer?: string | null;
    /**
     * This is always drive#labelField.
     */
    kind?: string | null;
    /**
     * Only present if valueType is selection.
     */
    selection?: string | null;
    /**
     * Only present if valueType is selectionList
     */
    selectionList?: string[] | null;
    /**
     * Only present if valueType is text.
     */
    text?: string | null;
    /**
     * Only present if valueType is user.
     */
    user?: Schema$User;
    /**
     * Only present if valueType is userList.
     */
    userList?: Schema$User[];
    /**
     * The field type. While new values may be supported in the future, the following are currently allowed:   - dateString  - integer  - selection  - selectionList  - text  - user  - userList
     */
    valueType?: string | null;
  }
  /**
   * A modification to a Label&#39;s Field.
   */
  export interface Schema$LabelFieldModification {
    /**
     * Adds values to a selectionList Field.
     */
    addSelectionValues?: string[] | null;
    /**
     * Adds email address values to a userList Field. Duplicates are allowed.
     */
    addUserValues?: string[] | null;
    /**
     * The ID of the Field to be modified.
     */
    fieldId?: string | null;
    /**
     * This is always drive#labelFieldModification.
     */
    kind?: string | null;
    /**
     * Sets the value of a dateString Field. The string must be in the RFC 3339 full-date format: YYYY-MM-DD.
     */
    setDateStringValue?: string | null;
    /**
     * Sets the value of an integer Field.
     */
    setIntegerValue?: string | null;
    /**
     * Sets the value of a selection Field.
     */
    setSelectionValue?: string | null;
    /**
     * Replaces a selectionList Field with these new values.
     */
    setSelectionValues?: string[] | null;
    /**
     * Sets the value of a text Field.
     */
    setTextValue?: string | null;
    /**
     * Sets the email address value of a user Field.
     */
    setUserValue?: string | null;
    /**
     * Replaces a userList Field with these new values. The values must be valid email addresses.
     */
    setUserValues?: string[] | null;
  }
  /**
   * A list of Labels.
   */
  export interface Schema$LabelList {
    /**
     * The list of Labels.
     */
    items?: Schema$Label[];
    /**
     * This is always drive#labelList
     */
    kind?: string | null;
    /**
     * The page token for the next page of Labels. This field will be absent if the end of the list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
     */
    nextPageToken?: string | null;
  }
  /**
   * A modification to a Label on a file. A LabelModification can be used to apply a Label to a file, update an existing Label on a file, or remove a Label from a file.
   */
  export interface Schema$LabelModification {
    /**
     * The list of modifications to this Label&#39;s Fields.
     */
    fieldModifications?: Schema$LabelFieldModification[];
    /**
     * This is always drive#labelModification.
     */
    kind?: string | null;
    /**
     * The ID of the Label to modify.
     */
    labelId?: string | null;
    /**
     * If true, the Label will be removed from the file.
     */
    removeLabel?: boolean | null;
    /**
     * The IDs of the Fields that should be reset to their default values.
     */
    resetFieldIds?: string[] | null;
  }
  /**
   * Verifies if migrating a set of files &amp; folders into a shared drive can succeed without errors. The result is a best effort check on a potential migration.
   */
  export interface Schema$MigrateToDrivePreFlightRequest {
    /**
     * A token to continue processing a pre-flight request. If the token is rejected for any reason, it should be discarded, and the pre-flight request should be restarted without providing a token.
     */
    continuationToken?: string | null;
    /**
     * ID of the destination folder. Must be in a shared drive.
     */
    destinationFolderId?: string | null;
    /**
     * This is always drive#migrateToDrivePreFlightRequest.
     */
    kind?: string | null;
    /**
     * A set of IDs of files or folders to obtain pre-flight information for.
     */
    sourceIds?: string[] | null;
  }
  /**
   * Verifies if migrating a set of files &amp; folders into a shared drive can succeed without errors. The result is a best effort check on a potential migration.
   */
  export interface Schema$MigrateToDrivePreFlightResponse {
    /**
     * A continuation token present when additional results are available.
     */
    continuationToken?: string | null;
    /**
     * This is always drive#migrateToDrivePreFlightResponse.
     */
    kind?: string | null;
    /**
     * The count of files processed so far in the pre-flight.
     */
    processedFileCount?: number | null;
    /**
     * Results of the pre-flight. Only present once it is complete (i.e. there is no continuation token).
     */
    result?: {
      sourceResults?: Array<{
        fileCount?: number;
        fileWarnings?: Array<{count?: number; warningReason?: string}>;
        sourceId?: string;
        unmovableFileReasons?: Array<{
          count?: number;
          unmovableReason?: string;
        }>;
        userWarnings?: Array<{
          affectedUser?: Schema$User;
          warningReason?: string;
        }>;
      }>;
      status?: string;
      validationToken?: string;
      warnings?: string[];
    } | null;
  }
  /**
   * Verifies if migrating a set of files &amp; folders into a Team Drive can succeed without errors. The result is a best effort check on a potential migration.
   */
  export interface Schema$MigrateToTeamDrivePreFlightRequest {
    /**
     * A token to continue processing a pre-flight request. If the token is rejected for any reason, it should be discarded, and the pre-flight request should be restarted without providing a token.
     */
    continuationToken?: string | null;
    /**
     * ID of the destination folder. Must be in a Team Drive.
     */
    destinationFolderId?: string | null;
    /**
     * This is always drive#migrateToTeamDrivePreFlightRequest.
     */
    kind?: string | null;
    /**
     * A set of IDs of files or folders to obtain pre-flight information for.
     */
    sourceIds?: string[] | null;
  }
  /**
   * Verifies if migrating a set of files &amp; folders into a Team Drive can succeed without errors. The result is a best effort check on a potential migration.
   */
  export interface Schema$MigrateToTeamDrivePreFlightResponse {
    /**
     * A continuation token present when additional results can be processed.
     */
    continuationToken?: string | null;
    /**
     * This is always drive#migrateToTeamDrivePreFlightResponse.
     */
    kind?: string | null;
    /**
     * The count of files processed so far in the pre-flight.
     */
    processedFileCount?: number | null;
    /**
     * The result of the pre-flight after it is completed.
     */
    result?: {
      sourceResults?: Array<{
        fileCount?: number;
        fileWarnings?: Array<{count?: number; warningReason?: string}>;
        sourceId?: string;
        unmovableFileReasons?: Array<{
          count?: number;
          unmovableReason?: string;
        }>;
        userWarnings?: Array<{
          affectedUser?: Schema$User;
          warningReason?: string;
        }>;
      }>;
      status?: string;
      validationToken?: string;
      warnings?: string[];
    } | null;
  }
  /**
   * A request to modify the set of Labels on a file. This request may contain many modifications that will either all succeed or all fail transactionally.
   */
  export interface Schema$ModifyLabelsRequest {
    /**
     * This is always drive#modifyLabelsRequest
     */
    kind?: string | null;
    /**
     * The list of modifications to apply to the Labels on the file.
     */
    labelModifications?: Schema$LabelModification[];
  }
  /**
   * Response to a ModifyLabels request. This contains only those Labels which were added or updated by the request.
   */
  export interface Schema$ModifyLabelsResponse {
    /**
     * This is always drive#modifyLabelsResponse
     */
    kind?: string | null;
    /**
     * The list of Labels which were added or updated by the request.
     */
    modifiedLabels?: Schema$Label[];
  }
  /**
   * Representation of money.
   */
  export interface Schema$Money {
    /**
     * The amount of money.
     */
    amount?: string | null;
    /**
     * The 3-letter currency code defined in ISO 4217.
     */
    currencyCode?: string | null;
    /**
     * This is always drive#money
     */
    kind?: string | null;
  }
  /**
   * A single prediction.
   */
  export interface Schema$NextDocPrediction {
    /**
     * Deprecated: Clients should not depend on this field being present. The explanation code of why this document was predicted. This field is more intended for logging and analysis, rather than for direct display to the user.
     */
    explanationCode?: number | null;
    /**
     * The localized (using the provided locale) explanation message for why this document was predicted. The intention is that this message may be shown to the user.
     */
    explanationMessage?: string | null;
    /**
     * The file resource for the document that was predicted.
     */
    file?: Schema$File;
    /**
     * This is always drive#nextDocPrediction.
     */
    kind?: string | null;
    /**
     * Deprecated: Clients should not depend on this field being present. The sources of the prediction.
     */
    predictionSources?: any[] | null;
    /**
     * Deprecated: Clients should not depend on this field being present. The score of this prediction for the target.
     */
    score?: number | null;
  }
  /**
   * A list of predictions for a user
   */
  export interface Schema$NextDocPredictionList {
    /**
     * Deprecated: Clients should not depend on this field being present. The experiment IDs associated with the prediction.
     */
    experimentIds?: any[] | null;
    /**
     * The list of predicted items.
     */
    items?: Schema$NextDocPrediction[];
    /**
     * This is always drive#nextDocPredictionList.
     */
    kind?: string | null;
    /**
     * A link back to this list.
     */
    selfLink?: string | null;
    /**
     * A tag for the purpose of logging and analysis.
     */
    tag?: string | null;
  }
  /**
   * The metadata for a notification.
   */
  export interface Schema$Notification {
    /**
     * Additional content for Access Request notifications.
     */
    accessRequestData?: {
      fileId?: string;
      granteeUser?: Schema$User2;
      message?: string;
      requestedRole?: string;
      requesterUser?: Schema$User2;
      shareUrl?: string;
    } | null;
    commentData?: {
      commentCount?: string;
      commentDetails?: Array<{
        assigneeUser?: Schema$User2;
        authorUser?: Schema$User2;
        commentQuote?: string;
        commentText?: string;
        commentType?: string;
        isRecipientAssigenee?: boolean;
        isRecipientAssignee?: boolean;
        isRecipientMentioned?: boolean;
      }>;
      commentUrl?: string;
      commenters?: Schema$User2[];
      fileId?: string;
      threadUpdate?: string;
    } | null;
    /**
     * Create time for this notification (formatted RFC 3339 timestamp).
     */
    createdDate?: string | null;
    /**
     * A localized notification description.
     */
    description?: string | null;
    /**
     * The ID of the notification.
     */
    id?: string | null;
    /**
     * This is always drive#notification.
     */
    kind?: string | null;
    /**
     * The type of this notification. Possible values are:   - share  - accessRequest  - storageAlert  - comment
     */
    notificationType?: string | null;
    /**
     * Additional content for Share notifications.
     */
    shareData?: {
      alternate_link?: string;
      driveItems?: Array<{alternateLink?: string; fileId?: string}>;
      fileId?: string;
      message?: string;
      senderUser?: Schema$User2;
    } | null;
    storageData?: {
      expirationDate?: string;
      expiringQuotaBytes?: string;
      quotaBytesTotal?: string;
      quotaBytesUsed?: string;
      storageAlertType?: string;
      totalQuotaBytesAfterExpiration?: string;
    } | null;
    /**
     * A localized notification title.
     */
    title?: string | null;
  }
  /**
   * A list of a file&#39;s parents.
   */
  export interface Schema$ParentList {
    /**
     * The ETag of the list.
     */
    etag?: string | null;
    /**
     * The list of parents.
     */
    items?: Schema$ParentReference[];
    /**
     * This is always drive#parentList.
     */
    kind?: string | null;
    /**
     * A link back to this list.
     */
    selfLink?: string | null;
  }
  /**
   * A reference to a file&#39;s parent.
   */
  export interface Schema$ParentReference {
    /**
     * The ID of the parent.
     */
    id?: string | null;
    /**
     * Whether or not the parent is the root folder.
     */
    isRoot?: boolean | null;
    /**
     * This is always drive#parentReference.
     */
    kind?: string | null;
    /**
     * A link to the parent.
     */
    parentLink?: string | null;
    /**
     * A link back to this reference.
     */
    selfLink?: string | null;
  }
  /**
   * A permission for a file.
   */
  export interface Schema$Permission {
    /**
     * Additional roles for this user. Only commenter is currently allowed, though more may be supported in the future.
     */
    additionalRoles?: string[] | null;
    /**
     * The admin-provided description for the audience. Only populated for audience type permissions.
     */
    audienceDescription?: string | null;
    /**
     * The unique identifier for the audience. Only populated for audience type permissions.
     */
    audienceId?: string | null;
    /**
     * Deprecated.
     */
    authKey?: string | null;
    /**
     * Capabilities the current user has for this permission. Must be explicitly requested.
     */
    capabilities?: {
      canAddAsCommenter?: boolean;
      canAddAsFileOrganizer?: boolean;
      canAddAsOrganizer?: boolean;
      canAddAsOwner?: boolean;
      canAddAsReader?: boolean;
      canAddAsWriter?: boolean;
      canChangeToCommenter?: boolean;
      canChangeToFileOrganizer?: boolean;
      canChangeToOrganizer?: boolean;
      canChangeToOwner?: boolean;
      canChangeToReader?: boolean;
      canChangeToReaderOnPublishedView?: boolean;
      canChangeToWriter?: boolean;
      canRemove?: boolean;
    } | null;
    /**
     * The obfuscated customer ID for the customer with which this permission is associated. Only populated for audience type permissions.
     */
    customerId?: string | null;
    /**
     * Whether the account associated with this permission has been deleted. This field only pertains to user and group permissions.
     */
    deleted?: boolean | null;
    /**
     * The domain name of the entity this permission refers to. This is an output-only field which is present when the permission type is user, group or domain.
     */
    domain?: string | null;
    /**
     * The email address of the user or group this permission refers to. This is an output-only field which is present when the permission type is user or group.
     */
    emailAddress?: string | null;
    /**
     * The ETag of the permission.
     */
    etag?: string | null;
    /**
     * The time at which this permission will expire (RFC 3339 date-time). Expiration dates have the following restrictions:   - They can only be set on user and group permissions  - The date must be in the future  - The date cannot be more than a year in the future
     */
    expirationDate?: string | null;
    /**
     * The ID of the user this permission refers to, and identical to the permissionId in the About and Files resources. When making a drive.permissions.insert request, exactly one of the id or value fields must be specified unless the permission type is anyone, in which case both id and value are ignored.
     */
    id?: string | null;
    /**
     * A localized message explaining why this permission is not applicable.
     */
    inapplicableLocalizedMessage?: string | null;
    /**
     * A reason indicating why this permission is not applicable.
     */
    inapplicableReason?: string | null;
    /**
     * Whether the permission has been temporarily made stale by an inheritance change.
     */
    isStale?: boolean | null;
    /**
     * This is always drive#permission.
     */
    kind?: string | null;
    /**
     * The name for this permission.
     */
    name?: string | null;
    /**
     * The name corresponding to the type when this permission is for type != user. Empty if type == user
     */
    nameIfNotUser?: string | null;
    /**
     * Details of whether the permissions on this shared drive item are inherited or directly on this item. This is an output-only field which is present only for shared drive items.
     */
    permissionDetails?: Array<{
      additionalRoles?: string[];
      inherited?: boolean;
      inheritedFrom?: string;
      originTitle?: string;
      permissionType?: string;
      role?: string;
      withLink?: boolean;
    }> | null;
    /**
     * A link to the profile photo, if available.
     */
    photoLink?: string | null;
    /**
     * The primary role for this user. While new values may be supported in the future, the following are currently allowed:   - owner  - organizer  - fileOrganizer  - writer  - reader
     */
    role?: string | null;
    /**
     * A list of roles that can be set as the effective role for this permission. Possible values are:   - owner  - organizer  - fileOrganizer  - writer  - commenter  - reader  - published_reader  - none
     */
    selectableRoles?: string[] | null;
    /**
     * A link back to this permission.
     */
    selfLink?: string | null;
    /**
     * The reason the permission is stale. Only populated when isStale is true.
     */
    staleReason?: string | null;
    /**
     * Deprecated - use permissionDetails instead.
     */
    teamDrivePermissionDetails?: Array<{
      additionalRoles?: string[];
      inherited?: boolean;
      inheritedFrom?: string;
      originTitle?: string;
      role?: string;
      teamDrivePermissionType?: string;
      withLink?: boolean;
    }> | null;
    /**
     * The account type. Allowed values are:   - user  - group  - domain  - audience  - anyone
     */
    type?: string | null;
    /**
     * The user&#39;s ID. This is an output-only field which is present when the permission type is user.
     */
    userId?: string | null;
    /**
     * The email address or domain name for the entity. This is used during inserts and is not populated in responses. When making a drive.permissions.insert request, exactly one of the id or value fields must be specified unless the permission type is anyone, in which case both id and value are ignored.
     */
    value?: string | null;
    /**
     * Indicates the view for this permission. Only populated for permissions that belong to a view. published is the only supported value.
     */
    view?: string | null;
    /**
     * Whether the link is required for this permission.
     */
    withLink?: boolean | null;
  }
  /**
   * An ID for a user or group as seen in Permission items.
   */
  export interface Schema$PermissionId {
    /**
     * The permission ID.
     */
    id?: string | null;
    /**
     * This is always drive#permissionId.
     */
    kind?: string | null;
  }
  /**
   * A list of permissions associated with a file.
   */
  export interface Schema$PermissionList {
    /**
     * An encoded string which contains information about inherited permissions. This token is not intended to be readable by the caller, but may be passed back to the server on a permission update request in order to receive additional consistency checks. Only populated for items in shared drives.
     */
    ancestorPermissionToken?: string | null;
    /**
     * The ETag of the list.
     */
    etag?: string | null;
    /**
     * The list of permissions. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
     */
    items?: Schema$Permission[];
    /**
     * This is always drive#permissionList.
     */
    kind?: string | null;
    /**
     * The page token for the next page of permissions. This field will be absent if the end of the permissions list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
     */
    nextPageToken?: string | null;
    /**
     * A link back to this list.
     */
    selfLink?: string | null;
  }
  /**
   * A key-value pair attached to a file that is either public or private to an application. The following limits apply to file properties:   - Maximum of 100 properties total per file - Maximum of 30 private properties per app - Maximum of 30 public properties - Maximum of 124 bytes size limit on (key + value) string in UTF-8 encoding for a single property.
   */
  export interface Schema$Property {
    /**
     * The app that owns the property.
     */
    appId?: string | null;
    /**
     * ETag of the property.
     */
    etag?: string | null;
    /**
     * The key of this property.
     */
    key?: string | null;
    /**
     * This is always drive#property.
     */
    kind?: string | null;
    /**
     * The link back to this property.
     */
    selfLink?: string | null;
    /**
     * The value of this property.
     */
    value?: string | null;
    /**
     * The visibility of this property.
     */
    visibility?: string | null;
  }
  /**
   * A collection of properties, key-value pairs that are either public or private to an application.
   */
  export interface Schema$PropertyList {
    /**
     * The ETag of the list.
     */
    etag?: string | null;
    /**
     * The list of properties.
     */
    items?: Schema$Property[];
    /**
     * This is always drive#propertyList.
     */
    kind?: string | null;
    /**
     * The link back to this list.
     */
    selfLink?: string | null;
  }
  export interface Schema$ReassignedReviewersTemplate {
    /**
     * The reviewer added to the approval.
     */
    addedReviewer?: Schema$User;
    /**
     * The reviewer removed from the Approval.
     */
    removedReviewer?: Schema$User;
  }
  /**
   * The number of remaining changes for a user or shared drive.
   */
  export interface Schema$RemainingCount {
    /**
     * This is always drive#remainingCount.
     */
    kind?: string | null;
    /**
     * The page token for the next page of results. This will be absent if all changes have been counted. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
     */
    nextPageToken?: string | null;
    /**
     * The estimated number of remaining changes for the user or shared drive. Limited to no more than the maxResults value defined in the request. If further changes remain, a nextPageToken will be available and the sum of the remainingCount values from all pages will reflect the total number of estimated changes available.
     */
    remainingCount?: string | null;
  }
  export interface Schema$ReviewerDecision {
    /**
     * Set of actions that the user may take on the ReviewerDecision.
     */
    capabilities?: {canReassign?: boolean} | null;
    /**
     * A reviewer&#39;s decision for the Approval.
     */
    decision?: string | null;
    /**
     * This is always drive#reviewerDecision.
     */
    kind?: string | null;
    /**
     * The user responsible for this decision.
     */
    reviewer?: Schema$User;
  }
  export interface Schema$ReviewerReassignmentTemplate {
    /**
     * The email address of the reviewer to whom the Approval is being reassigned.
     */
    reviewerEmailAddressToAdd?: string | null;
    /**
     * The email address of the reviewer to remove from the Approval.
     */
    reviewerEmailAddressToRemove?: string | null;
  }
  /**
   * A revision of a file.
   */
  export interface Schema$Revision {
    /**
     * The CSE related decryption metadata present on this revision.
     */
    decryptionMetadata?: Schema$DecryptionMetadata;
    downloadUrl?: string | null;
    /**
     * The ETag of the revision.
     */
    etag?: string | null;
    /**
     * Links for exporting Google Docs to specific formats.
     */
    exportLinks?: {[key: string]: string} | null;
    /**
     * The size of the revision in bytes. This will only be populated on files with content stored in Drive.
     */
    fileSize?: string | null;
    /**
     * The ID of the revision.
     */
    id?: string | null;
    /**
     * This is always drive#revision.
     */
    kind?: string | null;
    /**
     * The last user to modify this revision.
     */
    lastModifyingUser?: Schema$User;
    /**
     * Name of the last user to modify this revision.
     */
    lastModifyingUserName?: string | null;
    /**
     * An MD5 checksum for the content of this revision. This will only be populated on files with content stored in Drive.
     */
    md5Checksum?: string | null;
    /**
     * The MIME type of the revision.
     */
    mimeType?: string | null;
    /**
     * Last time this revision was modified (client-settable, formatted RFC 3339 timestamp).
     */
    modifiedDate?: string | null;
    /**
     * The original filename when this revision was created. This will only be populated on files with content stored in Drive.
     */
    originalFilename?: string | null;
    /**
     * Whether this revision is pinned to prevent automatic purging. This will only be populated and can only be modified on files with content stored in Drive which are not Google Docs. Revisions can also be pinned when they are created through the drive.files.insert/update/copy by using the pinned query parameter. Pinned revisions are stored indefinitely using additional storage quota, up to a maximum of 200 revisions.
     */
    pinned?: boolean | null;
    /**
     * Resource to use for go/senna previews.
     */
    preview?: {expiryDate?: string; link?: string} | null;
    /**
     * Whether subsequent revisions will be automatically republished. This is only populated and can only be modified for Google Docs.
     */
    publishAuto?: boolean | null;
    /**
     * Whether this revision is published. This is only populated and can only be modified for Google Docs.
     */
    published?: boolean | null;
    /**
     * A link to the published revision.
     */
    publishedLink?: string | null;
    /**
     * Whether this revision is published outside the domain. This is only populated and can only be modified for Google Docs.
     */
    publishedOutsideDomain?: boolean | null;
    /**
     * A link back to this revision.
     */
    selfLink?: string | null;
    /**
     * Last time this revision was modified (server-maintained, formatted RFC 3339 timestamp).
     */
    serverModifiedDate?: string | null;
  }
  /**
   * A list of revisions of a file.
   */
  export interface Schema$RevisionList {
    /**
     * The ETag of the list.
     */
    etag?: string | null;
    /**
     * The list of revisions. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
     */
    items?: Schema$Revision[];
    /**
     * This is always drive#revisionList.
     */
    kind?: string | null;
    /**
     * The page token for the next page of revisions. This field will be absent if the end of the revisions list has been reached. If the token is rejected for any reason, it should be discarded and pagination should be restarted from the first page of results.
     */
    nextPageToken?: string | null;
    /**
     * A link back to this list.
     */
    selfLink?: string | null;
  }
  /**
   * A request to send an access request for a file.
   */
  export interface Schema$SendAccessRequest {
    /**
     * List of email addresses for whom access to the file is requested. If unspecified, access is requested for the current user.
     */
    emailAddresses?: string[] | null;
    /**
     * This is always drive#requestAccessRequest.
     */
    kind?: string | null;
    /**
     * An optional message to be included in the request.
     */
    message?: string | null;
  }
  /**
   * User setting, a key-value tuple.
   */
  export interface Schema$Setting {
    /**
     * ETag of the setting.
     */
    etag?: string | null;
    /**
     * The key of this setting.
     */
    key?: string | null;
    /**
     * This is always drive#setting.
     */
    kind?: string | null;
    /**
     * The namespace of this setting.
     */
    namespace?: string | null;
    /**
     * The link back to this setting.
     */
    selfLink?: string | null;
    /**
     * The value of this setting.
     */
    value?: string | null;
  }
  /**
   * A list of user settings.
   */
  export interface Schema$SettingList {
    /**
     * The ETag of the list.
     */
    etag?: string | null;
    /**
     * The list of settings.
     */
    items?: Schema$Setting[];
    /**
     * This is always drive#settingList.
     */
    kind?: string | null;
    /**
     * The link back to this list.
     */
    selfLink?: string | null;
  }
  /**
   * A request to send a sharing notification.
   */
  export interface Schema$ShareNotificationRequest {
    /**
     * List of email addresses to which notifications should be sent.
     */
    emailAddresses?: string[] | null;
    /**
     * When set, attaches the content to the notification with the specified mime type.
     */
    includeContentAsAttachmentMimeType?: string | null;
    /**
     * Whether the content of the file should be inlined in the notification.
     */
    includeContentInline?: boolean | null;
    /**
     * This is always drive#shareNotificationRequest.
     */
    kind?: string | null;
    /**
     * An optional message to be included in the notification.
     */
    message?: string | null;
    /**
     * The message template to use when sending a notification. Supported templates include:   - invite  - collaborators  - activityNudge  - publish
     */
    messageTemplate?: string | null;
    /**
     * Whether to also send the notification to the requester.
     */
    notifyRequester?: boolean | null;
    /**
     * An optional subject.
     */
    subject?: string | null;
  }
  /**
   * Spell response information.
   */
  export interface Schema$SpellResponseTemplate {
    /**
     * A list of suggested corrections. It may be possible for the original to match the correction in which case the status of all fragments will be set to CORRECT.
     */
    spellCorrections?: Array<{
      spellFragments?: Array<{
        correction?: string;
        original?: string;
        status?: string;
      }>;
    }> | null;
  }
  export interface Schema$StartPageToken {
    /**
     * Identifies what kind of resource this is. Value: the fixed string &quot;drive#startPageToken&quot;.
     */
    kind?: string | null;
    /**
     * The starting page token for listing changes.
     */
    startPageToken?: string | null;
  }
  /**
   * Sync information for syncing a Photo from Google Photos.
   */
  export interface Schema$SyncPhotoWithSha1Request {
    /**
     * This is always drive#syncPhotoWithSha1Request.
     */
    kind?: string | null;
    /**
     * Sha1 checksum of the Photo to sync.
     */
    sha1Checksum?: string | null;
  }
  /**
   * Deprecated: use the drive collection instead.
   */
  export interface Schema$TeamDrive {
    /**
     * An image file and cropping parameters from which a background image for this Team Drive is set. This is a write only field; it can only be set on drive.teamdrives.update requests that don&#39;t set themeId. When specified, all fields of the backgroundImageFile must be set.
     */
    backgroundImageFile?: {
      id?: string;
      width?: number;
      xCoordinate?: number;
      yCoordinate?: number;
    } | null;
    /**
     * A link to this Team Drive&#39;s background image for use in Tesla&#39;s grid view.
     */
    backgroundImageGridViewLink?: string | null;
    /**
     * Deprecated
     */
    backgroundImageId?: string | null;
    /**
     * A short-lived link to this Team Drive&#39;s background image.
     */
    backgroundImageLink?: string | null;
    /**
     * A link to this Team Drive&#39;s background image for use in Tesla&#39;s list view.
     */
    backgroundImageListViewLink?: string | null;
    /**
     * Capabilities the current user has on this Team Drive.
     */
    capabilities?: {
      canAddChildren?: boolean;
      canAddFolderFromAnotherDrive?: boolean;
      canChangeCategoryReferences?: boolean;
      canChangeCopyRequiresWriterPermissionRestriction?: boolean;
      canChangeDisallowDriveFileStreamRestriction?: boolean;
      canChangeDomainUsersOnlyRestriction?: boolean;
      canChangeTeamDriveBackground?: boolean;
      canChangeTeamMembersOnlyRestriction?: boolean;
      canComment?: boolean;
      canCopy?: boolean;
      canDeleteChildren?: boolean;
      canDeleteTeamDrive?: boolean;
      canDownload?: boolean;
      canEdit?: boolean;
      canListChildren?: boolean;
      canManageMemberUpgrades?: boolean;
      canManageMembers?: boolean;
      canManageVisitors?: boolean;
      canMoveChildrenOutOfDrive?: boolean;
      canMoveChildrenWithinDrive?: boolean;
      canPrint?: boolean;
      canReadRevisions?: boolean;
      canRemoveChildren?: boolean;
      canRename?: boolean;
      canRenameTeamDrive?: boolean;
      canShare?: boolean;
      canShareFiles?: boolean;
      canShareFolders?: boolean;
      canShareOutsideDomain?: boolean;
      canShareToAllUsers?: boolean;
      canTrashChildren?: boolean;
    } | null;
    categoryReferences?: Schema$TeamDriveCategoryReference[];
    /**
     * The color of this Team Drive as an RGB hex string. It can only be set on a drive.teamdrives.update request that does not set themeId.
     */
    colorRgb?: string | null;
    /**
     * The time at which the Team Drive was created (RFC 3339 date-time).
     */
    createdDate?: string | null;
    /**
     * User that created the Team Drive, if available. Only returned when useDomainAdminAccess=true.
     */
    creator?: Schema$User;
    /**
     * The obfuscated customer ID of the customer that owns this Team Drive.
     */
    customerId?: string | null;
    /**
     * Deprecated - use restrictionsOverride.domainUsersOnly instead.
     */
    domainAllowsSharingOutside?: boolean | null;
    /**
     * Whether the Team Drive is hidden from default view.
     */
    hidden?: boolean | null;
    /**
     * The ID of this Team Drive which is also the ID of the top level folder of this Team Drive.
     */
    id?: string | null;
    /**
     * This is always drive#teamDrive
     */
    kind?: string | null;
    /**
     * The name of this Team Drive.
     */
    name?: string | null;
    /**
     * The display name of the organization to which this Team Drive belongs.
     */
    organizationDisplayName?: string | null;
    /**
     * A summary of the permissions of this Team Drive as an output-only field.
     */
    permissionsSummary?: {
      entryCount?: number;
      groupEntryCount?: number;
      memberCount?: number;
      selectPermissions?: Schema$Permission[];
      userEntryCount?: number;
    } | null;
    /**
     * The DNS domain name of the primary domain of the organization to which this Team Drive belongs.
     */
    primaryDomainName?: string | null;
    /**
     * The details about this shared drive&#39;s storage quota.
     */
    quotaInfo?: {
      graceQuotaInfo?: {additionalQuotaBytes?: string; endDate?: string};
      quotaBytesTotal?: string;
      quotaBytesUsed?: string;
      quotaType?: string;
    } | null;
    /**
     * The number of files contained within this Team Drive, excluding the Team Drive&#39;s top level folder. NOTE: this value is stale, and is only intended to be used by Cello for backfilling purposes. Do not add to public API versions. More info: go/team-drive-stats-api
     */
    recursiveFileCount?: string | null;
    /**
     * The number of folders contained within this Team Drive, excluding the Team Drive&#39;s top level folder. NOTE: this value is stale, and is only intended to be used by Cello for backfilling purposes. Do not add to public API versions. More info: go/team-drive-stats-api
     */
    recursiveFolderCount?: string | null;
    /**
     * A set of restrictions that apply to this Team Drive or items inside this Team Drive.
     */
    restrictions?: {
      adminManagedRestrictions?: boolean;
      copyRequiresWriterPermission?: boolean;
      disallowDriveFileStream?: boolean;
      domainUsersOnly?: boolean;
      teamMembersOnly?: boolean;
    } | null;
    /**
     * A set of overrides for any restriction that can be overridden outside of the Team Drive&#39;s restriction settings. The name of the override is identical to the name of the restriction which can be overridden.
     */
    restrictionsOverride?: {domainUsersOnly?: string} | null;
    /**
     * The ID of the theme from which the background image and color will be set. The set of possible teamDriveThemes can be retrieved from a drive.about.get response. When not specified on a drive.teamdrives.insert request, a random theme is chosen from which the background image and color are set. This is a write-only field; it can only be set on requests that don&#39;t set colorRgb or backgroundImageFile.
     */
    themeId?: string | null;
    /**
     * Whether this Team Drive belongs to a domain that is trusted by the requesting user&#39;s domain.
     */
    trusted?: boolean | null;
  }
  /**
   * A request to add/remove references to Categories on a Team Drive.
   */
  export interface Schema$TeamDriveCategoryChangeRequest {
    /**
     * The references to categories to add or update on the Team Drive.
     */
    addCategoryReferences?: Schema$TeamDriveCategoryReference[];
    /**
     * This is always drive#teamDriveCategoryChangeRequest.
     */
    kind?: string | null;
    /**
     * The category resource names to remove from the Team Drive.
     */
    removeCategoryReferences?: string[] | null;
  }
  export interface Schema$TeamDriveCategoryReference {
    /**
     * The Category resource name.
     */
    category?: string | null;
    /**
     * This is always drive#teamDriveCategoryReference.
     */
    kind?: string | null;
  }
  /**
   * A list of Team Drives.
   */
  export interface Schema$TeamDriveList {
    /**
     * The list of Team Drives. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
     */
    items?: Schema$TeamDrive[];
    /**
     * This is always drive#teamDriveList
     */
    kind?: string | null;
    /**
     * The page token for the next page of Team Drives. This will be absent if the end of the Team Drives list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
     */
    nextPageToken?: string | null;
  }
  /**
   * Category Metadata deltas to update.
   */
  export interface Schema$UpdateCategoryMetadata {
    categoryMetadata?: Schema$CategoryMetadataDelta[];
    /**
     * This is always drive#updateCategoryMetadata
     */
    kind?: string | null;
  }
  /**
   * Information about a Drive user.
   */
  export interface Schema$User {
    /**
     * The obfuscated customer ID to which the user belongs.
     */
    customerId?: string | null;
    /**
     * A plain text displayable name for this user.
     */
    displayName?: string | null;
    /**
     * Deprecated - use &quot;customerId&quot; or &quot;organizationDisplayName&quot; instead. The domain name of this user or group. As per FlexOrgs M2 compliance, usage of domain is not allowed. This field will continue to exist/be populated with the organization&#39;s display name (which is not necessarily the domain) to support mobile clients that use this field for display purposes. For more information please see: b/133505341
     */
    domain?: string | null;
    /**
     * The sharing settings for the domain of this user or group
     */
    domainSharingSettings?: {
      maxAllUsersRole?: string;
      maxDomainRole?: string;
      shareInPolicy?: string;
      shareOutPolicy?: string;
    } | null;
    /**
     * The email address of the user.
     */
    emailAddress?: string | null;
    /**
     * The email address of the user if available from the ACL. This field does not incur a Focus/PeopleAPI lookup.
     */
    emailAddressFromAccount?: string | null;
    /**
     * The user&#39;s ID.
     */
    id?: string | null;
    /**
     * Whether this user is the same as the authenticated user for whom the request was made.
     */
    isAuthenticatedUser?: boolean | null;
    /**
     * This is always drive#user.
     */
    kind?: string | null;
    /**
     * The organization display name to which the user belongs. This is configured by the dasher customer and has no uniqueness guarantees.
     */
    organizationDisplayName?: string | null;
    /**
     * The ID of the user&#39;s permission resources the permissions collection.
     */
    permissionId?: string | null;
    /**
     * The user&#39;s profile picture.
     */
    picture?: {url?: string} | null;
  }
  /**
   * Information about a Drive notification user.
   */
  export interface Schema$User2 {
    /**
     * A plain text displayable name for this user.
     */
    displayName?: string | null;
    /**
     * The email address of the user.
     */
    emailAddress?: string | null;
    /**
     * The user&#39;s ID
     */
    id?: string | null;
    /**
     * This is always driveNotification#user.
     */
    kind?: string | null;
  }
  /**
   * Representation of a User Scoped Attribute Value.
   */
  export interface Schema$UserScopedAttributeValue {
    /**
     * Only present if valueType is boolean.
     */
    boolean?: boolean | null;
    /**
     * DEPRECATED: Use dateString.
     */
    date?: Schema$Date;
    /**
     * DEPRECATED: Not implemented.
     */
    dateList?: Schema$Date[];
    /**
     * Only present if valueType is date. RFC 3339 formatted date: YYYY-MM-DD.
     */
    dateString?: string | null;
    /**
     * DEPRECATED: Not implemented.
     */
    dateTime?: string | null;
    /**
     * DEPRECATED: Not implemented.
     */
    dateTimeList?: string[] | null;
    /**
     * Only present if valueType is driveFile.
     */
    driveFile?: string | null;
    /**
     * Only present if valueType is driveFileList.
     */
    driveFileList?: string[] | null;
    /**
     * Only present if valueType is integer.
     */
    integer?: string | null;
    /**
     * Only present if valueType is integerList.
     */
    integerList?: string[] | null;
    /**
     * This is always drive#userScopedAttributeValue
     */
    kind?: string | null;
    /**
     * Only present if valueType is money.
     */
    money?: Schema$Money;
    /**
     * Only present if valueType is moneyList.
     */
    moneyList?: Schema$Money[];
    /**
     * The user to whom this value applies.
     */
    scopedUser?: Schema$User;
    /**
     * Only present if valueType is selection.
     */
    selection?: string | null;
    /**
     * Only present if valueType is selectionList.
     */
    selectionList?: string[] | null;
    /**
     * Only present if valueType is text.
     */
    text?: string | null;
    /**
     * Only present if valueType is textList.
     */
    textList?: string[] | null;
    /**
     * Only present if valueType is user.
     */
    user?: Schema$User;
    /**
     * Only present if valueType is userList.
     */
    userList?: Schema$User[];
    /**
     * The attribute type. While new values may be supported in the future, the following are currently allowed:   - boolean  - dateString  - driveFile  - driveFileList  - integer  - integerList  - money  - moneyList  - selection  - selectionList  - text  - textList  - user  - userList
     */
    valueType?: string | null;
  }
  export interface Schema$Workspace {
    /**
     * The time at which this Workspace was created (formatted RFC 3339 timestamp).
     */
    createdDate?: string | null;
    /**
     * The ID of a Workspace.
     */
    id?: string | null;
    /**
     * This is always drive#workspace.
     */
    kind?: string | null;
    /**
     * The time at which this Workspace was modifed (formatted RFC 3339 timestamp).
     */
    modifiedDate?: string | null;
    /**
     * The state of the Workspace.
     */
    state?: string | null;
    /**
     * The Workspace title.
     */
    title?: string | null;
    /**
     * Token provided by a suggested workspace. Must be set when accepting the suggestion.
     */
    workspaceToken?: string | null;
  }
  /**
   * A list of Workspaces.
   */
  export interface Schema$WorkspaceList {
    /**
     * The list of Workspaces. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
     */
    items?: Schema$Workspace[];
    /**
     * This is always drive#workspaceList
     */
    kind?: string | null;
    /**
     * The page token for the next page of Workspaces. This will be absent if the end of the Workspaces list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
     */
    nextPageToken?: string | null;
  }

  export class Resource$About {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * drive.about.get
     * @desc Gets the information about the current user along with Drive API settings
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.photos.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.about.get({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // Deprecated - use changes.getRemainingCount instead.
     *     includeSubscribed: 'placeholder-value',
     *     // Deprecated - use changes.getRemainingCount instead.
     *     maxChangeIdCount: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Deprecated - use changes.getRemainingCount instead.
     *     startChangeId: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // The ID of the requesting user. The request will fail if an ID is specified but differs from the user implied by the authorization.
     *     userId: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "additionalRoleInfo": [],
     *   //   "buildLabel": "my_buildLabel",
     *   //   "canCreateDrives": false,
     *   //   "canCreateTeamDrives": false,
     *   //   "domain": "my_domain",
     *   //   "domainSharingPolicy": "my_domainSharingPolicy",
     *   //   "driveThemes": [],
     *   //   "etag": "my_etag",
     *   //   "exportFormats": [],
     *   //   "features": [],
     *   //   "folderColorPalette": [],
     *   //   "gsuiteSubscriptionInfo": {},
     *   //   "importFormats": [],
     *   //   "isCurrentAppInstalled": false,
     *   //   "kind": "my_kind",
     *   //   "languageCode": "my_languageCode",
     *   //   "largestChangeId": "my_largestChangeId",
     *   //   "maxUploadSizes": [],
     *   //   "name": "my_name",
     *   //   "permissionId": "my_permissionId",
     *   //   "photosServiceEnabled": false,
     *   //   "quotaBytesByService": [],
     *   //   "quotaBytesTotal": "my_quotaBytesTotal",
     *   //   "quotaBytesUsed": "my_quotaBytesUsed",
     *   //   "quotaBytesUsedAggregate": "my_quotaBytesUsedAggregate",
     *   //   "quotaBytesUsedInTrash": "my_quotaBytesUsedInTrash",
     *   //   "quotaType": "my_quotaType",
     *   //   "remainingChangeIds": "my_remainingChangeIds",
     *   //   "rootFolderId": "my_rootFolderId",
     *   //   "selfLink": "my_selfLink",
     *   //   "teamDashboardCapabilities": {},
     *   //   "teamDriveThemes": [],
     *   //   "user": {}
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.about.get
     * @memberOf! ()
     *
     * @param {object=} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {boolean=} params.includeSubscribed Deprecated - use changes.getRemainingCount instead.
     * @param {string=} params.maxChangeIdCount Deprecated - use changes.getRemainingCount instead.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {string=} params.startChangeId Deprecated - use changes.getRemainingCount instead.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {string=} params.userId The ID of the requesting user. The request will fail if an ID is specified but differs from the user implied by the authorization.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params: Params$Resource$About$Get,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    get(
      params?: Params$Resource$About$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$About>;
    get(
      params: Params$Resource$About$Get,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    get(
      params: Params$Resource$About$Get,
      options: MethodOptions | BodyResponseCallback<Schema$About>,
      callback: BodyResponseCallback<Schema$About>
    ): void;
    get(
      params: Params$Resource$About$Get,
      callback: BodyResponseCallback<Schema$About>
    ): void;
    get(callback: BodyResponseCallback<Schema$About>): void;
    get(
      paramsOrCallback?:
        | Params$Resource$About$Get
        | BodyResponseCallback<Schema$About>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$About>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$About>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$About> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$About$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$About$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/about').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: [],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$About>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$About>(parameters);
      }
    }
  }

  export interface Params$Resource$About$Get extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * Deprecated - use changes.getRemainingCount instead.
     */
    includeSubscribed?: boolean;
    /**
     * Deprecated - use changes.getRemainingCount instead.
     */
    maxChangeIdCount?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Deprecated - use changes.getRemainingCount instead.
     */
    startChangeId?: string;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * The ID of the requesting user. The request will fail if an ID is specified but differs from the user implied by the authorization.
     */
    userId?: string;
  }

  export class Resource$Admin {
    context: APIRequestContext;
    files: Resource$Admin$Files;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.files = new Resource$Admin$Files(this.context);
    }
  }

  export class Resource$Admin$Files {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * drive.admin.files.migrateToTeamDrive
     * @desc Migrates a file into a Team Drive. The file and Team Drive must belong to the same Domain, and the requester must be a migration administrator for that domain. The response contains the ID of the migrated file within the Team Drive. If the file is a folder, this ID will be different than the originating ID.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.admin.files.migrateToTeamDrive({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file or folder being migrated.
     *     fileId: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The validation token from the pre-flight used to authorize this move, if a folder is being moved. It must refer to a pre-flight that was performed on this folder ID and that returned a moveable result.
     *     preFlightValidationToken: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "driveId": "my_driveId",
     *       //   "id": "my_id",
     *       //   "kind": "my_kind",
     *       //   "parentId": "my_parentId",
     *       //   "teamDriveId": "my_teamDriveId",
     *       //   "title": "my_title"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "driveId": "my_driveId",
     *   //   "id": "my_id",
     *   //   "kind": "my_kind",
     *   //   "parentId": "my_parentId",
     *   //   "teamDriveId": "my_teamDriveId",
     *   //   "title": "my_title"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.admin.files.migrateToTeamDrive
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file or folder being migrated.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.preFlightValidationToken The validation token from the pre-flight used to authorize this move, if a folder is being moved. It must refer to a pre-flight that was performed on this folder ID and that returned a moveable result.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {().AdminFile} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    migrateToTeamDrive(
      params: Params$Resource$Admin$Files$Migratetoteamdrive,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    migrateToTeamDrive(
      params?: Params$Resource$Admin$Files$Migratetoteamdrive,
      options?: MethodOptions
    ): GaxiosPromise<Schema$AdminFile>;
    migrateToTeamDrive(
      params: Params$Resource$Admin$Files$Migratetoteamdrive,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    migrateToTeamDrive(
      params: Params$Resource$Admin$Files$Migratetoteamdrive,
      options: MethodOptions | BodyResponseCallback<Schema$AdminFile>,
      callback: BodyResponseCallback<Schema$AdminFile>
    ): void;
    migrateToTeamDrive(
      params: Params$Resource$Admin$Files$Migratetoteamdrive,
      callback: BodyResponseCallback<Schema$AdminFile>
    ): void;
    migrateToTeamDrive(callback: BodyResponseCallback<Schema$AdminFile>): void;
    migrateToTeamDrive(
      paramsOrCallback?:
        | Params$Resource$Admin$Files$Migratetoteamdrive
        | BodyResponseCallback<Schema$AdminFile>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$AdminFile>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$AdminFile>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$AdminFile> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Admin$Files$Migratetoteamdrive;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Admin$Files$Migratetoteamdrive;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl +
              '/drive/v2.1beta/admin/files/{fileId}/migrateToTeamDrive'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$AdminFile>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$AdminFile>(parameters);
      }
    }
  }

  export interface Params$Resource$Admin$Files$Migratetoteamdrive
    extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file or folder being migrated.
     */
    fileId?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The validation token from the pre-flight used to authorize this move, if a folder is being moved. It must refer to a pre-flight that was performed on this folder ID and that returned a moveable result.
     */
    preFlightValidationToken?: string;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;

    /**
     * Request body metadata
     */
    requestBody?: Schema$AdminFile;
  }

  export class Resource$Approvalevents {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * drive.approvalevents.get
     * @desc Gets an ApprovalEvent by ID.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.approvalevents.get({
     *     // The ID of the Approval.
     *     approvalId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The ID of the ApprovalEvent.
     *     eventId: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file the Approval is on.
     *     fileId: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "approvalCompleteEvent": {},
     *   //   "approvalCreateEvent": {},
     *   //   "commentEvent": {},
     *   //   "createdDate": "my_createdDate",
     *   //   "creator": {},
     *   //   "decisionEvent": {},
     *   //   "dueDateChangeEvent": {},
     *   //   "eventId": "my_eventId",
     *   //   "kind": "my_kind",
     *   //   "reviewerChangeEvent": {}
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.approvalevents.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.approvalId The ID of the Approval.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string} params.eventId The ID of the ApprovalEvent.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file the Approval is on.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params: Params$Resource$Approvalevents$Get,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    get(
      params?: Params$Resource$Approvalevents$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$ApprovalEvent>;
    get(
      params: Params$Resource$Approvalevents$Get,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    get(
      params: Params$Resource$Approvalevents$Get,
      options: MethodOptions | BodyResponseCallback<Schema$ApprovalEvent>,
      callback: BodyResponseCallback<Schema$ApprovalEvent>
    ): void;
    get(
      params: Params$Resource$Approvalevents$Get,
      callback: BodyResponseCallback<Schema$ApprovalEvent>
    ): void;
    get(callback: BodyResponseCallback<Schema$ApprovalEvent>): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Approvalevents$Get
        | BodyResponseCallback<Schema$ApprovalEvent>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$ApprovalEvent>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$ApprovalEvent>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$ApprovalEvent> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Approvalevents$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Approvalevents$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl +
              '/drive/v2.1beta/files/{fileId}/approvals/{approvalId}/events/{eventId}'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'approvalId', 'eventId'],
        pathParams: ['approvalId', 'eventId', 'fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$ApprovalEvent>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$ApprovalEvent>(parameters);
      }
    }

    /**
     * drive.approvalevents.list
     * @desc Lists all ApprovalEvents on an Approval.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.approvalevents.list({
     *     // The ID of the Approval.
     *     approvalId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file the Approval is on.
     *     fileId: 'placeholder-value',
     *     // The maximum number of ApprovalEvents to return per page.
     *     maxResults: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The page token for the ApprovalEvents list.
     *     pageToken: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "items": [],
     *   //   "kind": "my_kind",
     *   //   "nextPageToken": "my_nextPageToken"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.approvalevents.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.approvalId The ID of the Approval.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file the Approval is on.
     * @param {integer=} params.maxResults The maximum number of ApprovalEvents to return per page.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.pageToken The page token for the ApprovalEvents list.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params: Params$Resource$Approvalevents$List,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    list(
      params?: Params$Resource$Approvalevents$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$ApprovalEventList>;
    list(
      params: Params$Resource$Approvalevents$List,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    list(
      params: Params$Resource$Approvalevents$List,
      options: MethodOptions | BodyResponseCallback<Schema$ApprovalEventList>,
      callback: BodyResponseCallback<Schema$ApprovalEventList>
    ): void;
    list(
      params: Params$Resource$Approvalevents$List,
      callback: BodyResponseCallback<Schema$ApprovalEventList>
    ): void;
    list(callback: BodyResponseCallback<Schema$ApprovalEventList>): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Approvalevents$List
        | BodyResponseCallback<Schema$ApprovalEventList>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$ApprovalEventList>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$ApprovalEventList>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$ApprovalEventList>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Approvalevents$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Approvalevents$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl +
              '/drive/v2.1beta/files/{fileId}/approvals/{approvalId}/events'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'approvalId'],
        pathParams: ['approvalId', 'fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$ApprovalEventList>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$ApprovalEventList>(parameters);
      }
    }
  }

  export interface Params$Resource$Approvalevents$Get
    extends StandardParameters {
    /**
     * The ID of the Approval.
     */
    approvalId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The ID of the ApprovalEvent.
     */
    eventId?: string;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file the Approval is on.
     */
    fileId?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }
  export interface Params$Resource$Approvalevents$List
    extends StandardParameters {
    /**
     * The ID of the Approval.
     */
    approvalId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file the Approval is on.
     */
    fileId?: string;
    /**
     * The maximum number of ApprovalEvents to return per page.
     */
    maxResults?: number;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The page token for the ApprovalEvents list.
     */
    pageToken?: string;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }

  export class Resource$Approvals {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * drive.approvals.approve
     * @desc DEPRECATED; use drive.approvals.recordDecision instead.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.approvals.approve({
     *     // The ID of the Approval.
     *     approvalId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file the Approval is on.
     *     fileId: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "commentText": "my_commentText",
     *       //   "kind": "my_kind"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "approvalId": "my_approvalId",
     *   //   "capabilities": {},
     *   //   "commentText": "my_commentText",
     *   //   "completedDate": "my_completedDate",
     *   //   "createdDate": "my_createdDate",
     *   //   "dueDate": "my_dueDate",
     *   //   "initiator": {},
     *   //   "kind": "my_kind",
     *   //   "latest": false,
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "reviewerDecisions": [],
     *   //   "reviewerEmailAddresses": [],
     *   //   "reviewerPersonNames": [],
     *   //   "revisionId": "my_revisionId",
     *   //   "status": "my_status"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.approvals.approve
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.approvalId The ID of the Approval.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file the Approval is on.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {().ApprovalEventRequest} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    approve(
      params: Params$Resource$Approvals$Approve,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    approve(
      params?: Params$Resource$Approvals$Approve,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Approval>;
    approve(
      params: Params$Resource$Approvals$Approve,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    approve(
      params: Params$Resource$Approvals$Approve,
      options: MethodOptions | BodyResponseCallback<Schema$Approval>,
      callback: BodyResponseCallback<Schema$Approval>
    ): void;
    approve(
      params: Params$Resource$Approvals$Approve,
      callback: BodyResponseCallback<Schema$Approval>
    ): void;
    approve(callback: BodyResponseCallback<Schema$Approval>): void;
    approve(
      paramsOrCallback?:
        | Params$Resource$Approvals$Approve
        | BodyResponseCallback<Schema$Approval>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Approval>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Approval>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Approval> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Approvals$Approve;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Approvals$Approve;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl +
              '/drive/v2.1beta/files/{fileId}/approvals/{approvalId}/approve'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'approvalId'],
        pathParams: ['approvalId', 'fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Approval>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Approval>(parameters);
      }
    }

    /**
     * drive.approvals.cancel
     * @desc Cancel an Approval.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.approvals.cancel({
     *     // The ID of the Approval.
     *     approvalId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file the Approval is on.
     *     fileId: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "commentText": "my_commentText",
     *       //   "kind": "my_kind"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "approvalId": "my_approvalId",
     *   //   "capabilities": {},
     *   //   "commentText": "my_commentText",
     *   //   "completedDate": "my_completedDate",
     *   //   "createdDate": "my_createdDate",
     *   //   "dueDate": "my_dueDate",
     *   //   "initiator": {},
     *   //   "kind": "my_kind",
     *   //   "latest": false,
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "reviewerDecisions": [],
     *   //   "reviewerEmailAddresses": [],
     *   //   "reviewerPersonNames": [],
     *   //   "revisionId": "my_revisionId",
     *   //   "status": "my_status"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.approvals.cancel
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.approvalId The ID of the Approval.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file the Approval is on.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {().ApprovalEventRequest} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    cancel(
      params: Params$Resource$Approvals$Cancel,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    cancel(
      params?: Params$Resource$Approvals$Cancel,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Approval>;
    cancel(
      params: Params$Resource$Approvals$Cancel,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    cancel(
      params: Params$Resource$Approvals$Cancel,
      options: MethodOptions | BodyResponseCallback<Schema$Approval>,
      callback: BodyResponseCallback<Schema$Approval>
    ): void;
    cancel(
      params: Params$Resource$Approvals$Cancel,
      callback: BodyResponseCallback<Schema$Approval>
    ): void;
    cancel(callback: BodyResponseCallback<Schema$Approval>): void;
    cancel(
      paramsOrCallback?:
        | Params$Resource$Approvals$Cancel
        | BodyResponseCallback<Schema$Approval>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Approval>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Approval>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Approval> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Approvals$Cancel;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Approvals$Cancel;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl +
              '/drive/v2.1beta/files/{fileId}/approvals/{approvalId}/cancel'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'approvalId'],
        pathParams: ['approvalId', 'fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Approval>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Approval>(parameters);
      }
    }

    /**
     * drive.approvals.changeReviewers
     * @desc Change the reviewers on the Approval.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.approvals.changeReviewers({
     *     // The ID of the Approval.
     *     approvalId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file the Approval is on.
     *     fileId: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "commentText": "my_commentText",
     *       //   "kind": "my_kind",
     *       //   "reviewerEmailAddressesToAdd": [],
     *       //   "reviewerReassignments": []
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "approvalId": "my_approvalId",
     *   //   "capabilities": {},
     *   //   "commentText": "my_commentText",
     *   //   "completedDate": "my_completedDate",
     *   //   "createdDate": "my_createdDate",
     *   //   "dueDate": "my_dueDate",
     *   //   "initiator": {},
     *   //   "kind": "my_kind",
     *   //   "latest": false,
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "reviewerDecisions": [],
     *   //   "reviewerEmailAddresses": [],
     *   //   "reviewerPersonNames": [],
     *   //   "revisionId": "my_revisionId",
     *   //   "status": "my_status"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.approvals.changeReviewers
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.approvalId The ID of the Approval.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file the Approval is on.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {().ApprovalChangeReviewers} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    changeReviewers(
      params: Params$Resource$Approvals$Changereviewers,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    changeReviewers(
      params?: Params$Resource$Approvals$Changereviewers,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Approval>;
    changeReviewers(
      params: Params$Resource$Approvals$Changereviewers,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    changeReviewers(
      params: Params$Resource$Approvals$Changereviewers,
      options: MethodOptions | BodyResponseCallback<Schema$Approval>,
      callback: BodyResponseCallback<Schema$Approval>
    ): void;
    changeReviewers(
      params: Params$Resource$Approvals$Changereviewers,
      callback: BodyResponseCallback<Schema$Approval>
    ): void;
    changeReviewers(callback: BodyResponseCallback<Schema$Approval>): void;
    changeReviewers(
      paramsOrCallback?:
        | Params$Resource$Approvals$Changereviewers
        | BodyResponseCallback<Schema$Approval>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Approval>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Approval>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Approval> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Approvals$Changereviewers;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Approvals$Changereviewers;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl +
              '/drive/v2.1beta/files/{fileId}/approvals/{approvalId}/changeReviewers'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'approvalId'],
        pathParams: ['approvalId', 'fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Approval>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Approval>(parameters);
      }
    }

    /**
     * drive.approvals.comment
     * @desc Comment on an Approval.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.approvals.comment({
     *     // The ID of the Approval.
     *     approvalId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file the Approval is on.
     *     fileId: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "commentText": "my_commentText",
     *       //   "kind": "my_kind"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "approvalId": "my_approvalId",
     *   //   "capabilities": {},
     *   //   "commentText": "my_commentText",
     *   //   "completedDate": "my_completedDate",
     *   //   "createdDate": "my_createdDate",
     *   //   "dueDate": "my_dueDate",
     *   //   "initiator": {},
     *   //   "kind": "my_kind",
     *   //   "latest": false,
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "reviewerDecisions": [],
     *   //   "reviewerEmailAddresses": [],
     *   //   "reviewerPersonNames": [],
     *   //   "revisionId": "my_revisionId",
     *   //   "status": "my_status"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.approvals.comment
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.approvalId The ID of the Approval.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file the Approval is on.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {().ApprovalEventRequest} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    comment(
      params: Params$Resource$Approvals$Comment,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    comment(
      params?: Params$Resource$Approvals$Comment,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Approval>;
    comment(
      params: Params$Resource$Approvals$Comment,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    comment(
      params: Params$Resource$Approvals$Comment,
      options: MethodOptions | BodyResponseCallback<Schema$Approval>,
      callback: BodyResponseCallback<Schema$Approval>
    ): void;
    comment(
      params: Params$Resource$Approvals$Comment,
      callback: BodyResponseCallback<Schema$Approval>
    ): void;
    comment(callback: BodyResponseCallback<Schema$Approval>): void;
    comment(
      paramsOrCallback?:
        | Params$Resource$Approvals$Comment
        | BodyResponseCallback<Schema$Approval>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Approval>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Approval>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Approval> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Approvals$Comment;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Approvals$Comment;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl +
              '/drive/v2.1beta/files/{fileId}/approvals/{approvalId}/comment'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'approvalId'],
        pathParams: ['approvalId', 'fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Approval>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Approval>(parameters);
      }
    }

    /**
     * drive.approvals.decline
     * @desc DEPRECATED; use drive.approvals.recordDecision instead.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.approvals.decline({
     *     // The ID of the Approval.
     *     approvalId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file the Approval is on.
     *     fileId: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "commentText": "my_commentText",
     *       //   "kind": "my_kind"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "approvalId": "my_approvalId",
     *   //   "capabilities": {},
     *   //   "commentText": "my_commentText",
     *   //   "completedDate": "my_completedDate",
     *   //   "createdDate": "my_createdDate",
     *   //   "dueDate": "my_dueDate",
     *   //   "initiator": {},
     *   //   "kind": "my_kind",
     *   //   "latest": false,
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "reviewerDecisions": [],
     *   //   "reviewerEmailAddresses": [],
     *   //   "reviewerPersonNames": [],
     *   //   "revisionId": "my_revisionId",
     *   //   "status": "my_status"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.approvals.decline
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.approvalId The ID of the Approval.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file the Approval is on.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {().ApprovalEventRequest} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    decline(
      params: Params$Resource$Approvals$Decline,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    decline(
      params?: Params$Resource$Approvals$Decline,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Approval>;
    decline(
      params: Params$Resource$Approvals$Decline,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    decline(
      params: Params$Resource$Approvals$Decline,
      options: MethodOptions | BodyResponseCallback<Schema$Approval>,
      callback: BodyResponseCallback<Schema$Approval>
    ): void;
    decline(
      params: Params$Resource$Approvals$Decline,
      callback: BodyResponseCallback<Schema$Approval>
    ): void;
    decline(callback: BodyResponseCallback<Schema$Approval>): void;
    decline(
      paramsOrCallback?:
        | Params$Resource$Approvals$Decline
        | BodyResponseCallback<Schema$Approval>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Approval>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Approval>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Approval> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Approvals$Decline;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Approvals$Decline;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl +
              '/drive/v2.1beta/files/{fileId}/approvals/{approvalId}/decline'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'approvalId'],
        pathParams: ['approvalId', 'fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Approval>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Approval>(parameters);
      }
    }

    /**
     * drive.approvals.get
     * @desc Gets an Approval by ID.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.approvals.get({
     *     // The ID of the Approval.
     *     approvalId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file the Approval is on.
     *     fileId: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "approvalId": "my_approvalId",
     *   //   "capabilities": {},
     *   //   "commentText": "my_commentText",
     *   //   "completedDate": "my_completedDate",
     *   //   "createdDate": "my_createdDate",
     *   //   "dueDate": "my_dueDate",
     *   //   "initiator": {},
     *   //   "kind": "my_kind",
     *   //   "latest": false,
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "reviewerDecisions": [],
     *   //   "reviewerEmailAddresses": [],
     *   //   "reviewerPersonNames": [],
     *   //   "revisionId": "my_revisionId",
     *   //   "status": "my_status"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.approvals.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.approvalId The ID of the Approval.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file the Approval is on.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params: Params$Resource$Approvals$Get,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    get(
      params?: Params$Resource$Approvals$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Approval>;
    get(
      params: Params$Resource$Approvals$Get,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    get(
      params: Params$Resource$Approvals$Get,
      options: MethodOptions | BodyResponseCallback<Schema$Approval>,
      callback: BodyResponseCallback<Schema$Approval>
    ): void;
    get(
      params: Params$Resource$Approvals$Get,
      callback: BodyResponseCallback<Schema$Approval>
    ): void;
    get(callback: BodyResponseCallback<Schema$Approval>): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Approvals$Get
        | BodyResponseCallback<Schema$Approval>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Approval>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Approval>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Approval> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Approvals$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Approvals$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/files/{fileId}/approvals/{approvalId}'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'approvalId'],
        pathParams: ['approvalId', 'fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Approval>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Approval>(parameters);
      }
    }

    /**
     * drive.approvals.insert
     * @desc Inserts a new Approval.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.approvals.insert({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the DriveItem associated with the new Approval.
     *     fileId: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "approvalId": "my_approvalId",
     *       //   "capabilities": {},
     *       //   "commentText": "my_commentText",
     *       //   "completedDate": "my_completedDate",
     *       //   "createdDate": "my_createdDate",
     *       //   "dueDate": "my_dueDate",
     *       //   "initiator": {},
     *       //   "kind": "my_kind",
     *       //   "latest": false,
     *       //   "modifiedDate": "my_modifiedDate",
     *       //   "reviewerDecisions": [],
     *       //   "reviewerEmailAddresses": [],
     *       //   "reviewerPersonNames": [],
     *       //   "revisionId": "my_revisionId",
     *       //   "status": "my_status"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "approvalId": "my_approvalId",
     *   //   "capabilities": {},
     *   //   "commentText": "my_commentText",
     *   //   "completedDate": "my_completedDate",
     *   //   "createdDate": "my_createdDate",
     *   //   "dueDate": "my_dueDate",
     *   //   "initiator": {},
     *   //   "kind": "my_kind",
     *   //   "latest": false,
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "reviewerDecisions": [],
     *   //   "reviewerEmailAddresses": [],
     *   //   "reviewerPersonNames": [],
     *   //   "revisionId": "my_revisionId",
     *   //   "status": "my_status"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.approvals.insert
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the DriveItem associated with the new Approval.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {().Approval} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    insert(
      params: Params$Resource$Approvals$Insert,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    insert(
      params?: Params$Resource$Approvals$Insert,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Approval>;
    insert(
      params: Params$Resource$Approvals$Insert,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    insert(
      params: Params$Resource$Approvals$Insert,
      options: MethodOptions | BodyResponseCallback<Schema$Approval>,
      callback: BodyResponseCallback<Schema$Approval>
    ): void;
    insert(
      params: Params$Resource$Approvals$Insert,
      callback: BodyResponseCallback<Schema$Approval>
    ): void;
    insert(callback: BodyResponseCallback<Schema$Approval>): void;
    insert(
      paramsOrCallback?:
        | Params$Resource$Approvals$Insert
        | BodyResponseCallback<Schema$Approval>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Approval>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Approval>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Approval> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Approvals$Insert;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Approvals$Insert;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files/{fileId}/approvals').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Approval>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Approval>(parameters);
      }
    }

    /**
     * drive.approvals.list
     * @desc Lists all approvals on a Drive item.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.approvals.list({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file to list Approvals on.
     *     fileId: 'placeholder-value',
     *     // The maximum number of Approvals to return per page. Partial or empty result pages are possible even before the end of the files list has been reached.
     *     maxResults: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The page token for the Approvals list.
     *     pageToken: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "items": [],
     *   //   "kind": "my_kind",
     *   //   "nextPageToken": "my_nextPageToken"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.approvals.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file to list Approvals on.
     * @param {integer=} params.maxResults The maximum number of Approvals to return per page. Partial or empty result pages are possible even before the end of the files list has been reached.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.pageToken The page token for the Approvals list.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params: Params$Resource$Approvals$List,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    list(
      params?: Params$Resource$Approvals$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$ApprovalList>;
    list(
      params: Params$Resource$Approvals$List,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    list(
      params: Params$Resource$Approvals$List,
      options: MethodOptions | BodyResponseCallback<Schema$ApprovalList>,
      callback: BodyResponseCallback<Schema$ApprovalList>
    ): void;
    list(
      params: Params$Resource$Approvals$List,
      callback: BodyResponseCallback<Schema$ApprovalList>
    ): void;
    list(callback: BodyResponseCallback<Schema$ApprovalList>): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Approvals$List
        | BodyResponseCallback<Schema$ApprovalList>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$ApprovalList>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$ApprovalList>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$ApprovalList> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Approvals$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Approvals$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files/{fileId}/approvals').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$ApprovalList>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$ApprovalList>(parameters);
      }
    }

    /**
     * drive.approvals.recordDecision
     * @desc Record a decision on an Approval. Only reviewers can make a decision.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.approvals.recordDecision({
     *     // The ID of the Approval.
     *     approvalId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file the Approval is on.
     *     fileId: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "commentText": "my_commentText",
     *       //   "decision": "my_decision",
     *       //   "kind": "my_kind"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "approvalId": "my_approvalId",
     *   //   "capabilities": {},
     *   //   "commentText": "my_commentText",
     *   //   "completedDate": "my_completedDate",
     *   //   "createdDate": "my_createdDate",
     *   //   "dueDate": "my_dueDate",
     *   //   "initiator": {},
     *   //   "kind": "my_kind",
     *   //   "latest": false,
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "reviewerDecisions": [],
     *   //   "reviewerEmailAddresses": [],
     *   //   "reviewerPersonNames": [],
     *   //   "revisionId": "my_revisionId",
     *   //   "status": "my_status"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.approvals.recordDecision
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.approvalId The ID of the Approval.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file the Approval is on.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {().ApprovalDecisionRequest} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    recordDecision(
      params: Params$Resource$Approvals$Recorddecision,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    recordDecision(
      params?: Params$Resource$Approvals$Recorddecision,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Approval>;
    recordDecision(
      params: Params$Resource$Approvals$Recorddecision,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    recordDecision(
      params: Params$Resource$Approvals$Recorddecision,
      options: MethodOptions | BodyResponseCallback<Schema$Approval>,
      callback: BodyResponseCallback<Schema$Approval>
    ): void;
    recordDecision(
      params: Params$Resource$Approvals$Recorddecision,
      callback: BodyResponseCallback<Schema$Approval>
    ): void;
    recordDecision(callback: BodyResponseCallback<Schema$Approval>): void;
    recordDecision(
      paramsOrCallback?:
        | Params$Resource$Approvals$Recorddecision
        | BodyResponseCallback<Schema$Approval>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Approval>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Approval>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Approval> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Approvals$Recorddecision;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Approvals$Recorddecision;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl +
              '/drive/v2.1beta/files/{fileId}/approvals/{approvalId}/recordDecision'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'approvalId'],
        pathParams: ['approvalId', 'fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Approval>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Approval>(parameters);
      }
    }

    /**
     * drive.approvals.setDueDate
     * @desc Update the Approval's due date. If a date is not specified then any existing due date will be removed.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.approvals.setDueDate({
     *     // The ID of the Approval.
     *     approvalId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file the Approval is on.
     *     fileId: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "dueDate": "my_dueDate",
     *       //   "kind": "my_kind"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "approvalId": "my_approvalId",
     *   //   "capabilities": {},
     *   //   "commentText": "my_commentText",
     *   //   "completedDate": "my_completedDate",
     *   //   "createdDate": "my_createdDate",
     *   //   "dueDate": "my_dueDate",
     *   //   "initiator": {},
     *   //   "kind": "my_kind",
     *   //   "latest": false,
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "reviewerDecisions": [],
     *   //   "reviewerEmailAddresses": [],
     *   //   "reviewerPersonNames": [],
     *   //   "revisionId": "my_revisionId",
     *   //   "status": "my_status"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.approvals.setDueDate
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.approvalId The ID of the Approval.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file the Approval is on.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {().ApprovalDueDate} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    setDueDate(
      params: Params$Resource$Approvals$Setduedate,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    setDueDate(
      params?: Params$Resource$Approvals$Setduedate,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Approval>;
    setDueDate(
      params: Params$Resource$Approvals$Setduedate,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    setDueDate(
      params: Params$Resource$Approvals$Setduedate,
      options: MethodOptions | BodyResponseCallback<Schema$Approval>,
      callback: BodyResponseCallback<Schema$Approval>
    ): void;
    setDueDate(
      params: Params$Resource$Approvals$Setduedate,
      callback: BodyResponseCallback<Schema$Approval>
    ): void;
    setDueDate(callback: BodyResponseCallback<Schema$Approval>): void;
    setDueDate(
      paramsOrCallback?:
        | Params$Resource$Approvals$Setduedate
        | BodyResponseCallback<Schema$Approval>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Approval>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Approval>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Approval> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Approvals$Setduedate;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Approvals$Setduedate;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl +
              '/drive/v2.1beta/files/{fileId}/approvals/{approvalId}/setDueDate'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'approvalId'],
        pathParams: ['approvalId', 'fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Approval>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Approval>(parameters);
      }
    }
  }

  export interface Params$Resource$Approvals$Approve
    extends StandardParameters {
    /**
     * The ID of the Approval.
     */
    approvalId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file the Approval is on.
     */
    fileId?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;

    /**
     * Request body metadata
     */
    requestBody?: Schema$ApprovalEventRequest;
  }
  export interface Params$Resource$Approvals$Cancel extends StandardParameters {
    /**
     * The ID of the Approval.
     */
    approvalId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file the Approval is on.
     */
    fileId?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;

    /**
     * Request body metadata
     */
    requestBody?: Schema$ApprovalEventRequest;
  }
  export interface Params$Resource$Approvals$Changereviewers
    extends StandardParameters {
    /**
     * The ID of the Approval.
     */
    approvalId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file the Approval is on.
     */
    fileId?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;

    /**
     * Request body metadata
     */
    requestBody?: Schema$ApprovalChangeReviewers;
  }
  export interface Params$Resource$Approvals$Comment
    extends StandardParameters {
    /**
     * The ID of the Approval.
     */
    approvalId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file the Approval is on.
     */
    fileId?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;

    /**
     * Request body metadata
     */
    requestBody?: Schema$ApprovalEventRequest;
  }
  export interface Params$Resource$Approvals$Decline
    extends StandardParameters {
    /**
     * The ID of the Approval.
     */
    approvalId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file the Approval is on.
     */
    fileId?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;

    /**
     * Request body metadata
     */
    requestBody?: Schema$ApprovalEventRequest;
  }
  export interface Params$Resource$Approvals$Get extends StandardParameters {
    /**
     * The ID of the Approval.
     */
    approvalId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file the Approval is on.
     */
    fileId?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }
  export interface Params$Resource$Approvals$Insert extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the DriveItem associated with the new Approval.
     */
    fileId?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;

    /**
     * Request body metadata
     */
    requestBody?: Schema$Approval;
  }
  export interface Params$Resource$Approvals$List extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file to list Approvals on.
     */
    fileId?: string;
    /**
     * The maximum number of Approvals to return per page. Partial or empty result pages are possible even before the end of the files list has been reached.
     */
    maxResults?: number;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The page token for the Approvals list.
     */
    pageToken?: string;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }
  export interface Params$Resource$Approvals$Recorddecision
    extends StandardParameters {
    /**
     * The ID of the Approval.
     */
    approvalId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file the Approval is on.
     */
    fileId?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;

    /**
     * Request body metadata
     */
    requestBody?: Schema$ApprovalDecisionRequest;
  }
  export interface Params$Resource$Approvals$Setduedate
    extends StandardParameters {
    /**
     * The ID of the Approval.
     */
    approvalId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file the Approval is on.
     */
    fileId?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;

    /**
     * Request body metadata
     */
    requestBody?: Schema$ApprovalDueDate;
  }

  export class Resource$Apps {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * drive.apps.delete
     * @desc Uninstall this app.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.apps.readonly',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.apps.delete({
     *     // The ID of the app to uninstall. Specify 'self' to uninstall the current app.
     *     appId: 'placeholder-value',
     *     // Whether to delete the App Data folder.
     *     deleteAppData: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.apps.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.appId The ID of the app to uninstall. Specify 'self' to uninstall the current app.
     * @param {boolean=} params.deleteAppData Whether to delete the App Data folder.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params: Params$Resource$Apps$Delete,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    delete(
      params?: Params$Resource$Apps$Delete,
      options?: MethodOptions
    ): GaxiosPromise<void>;
    delete(
      params: Params$Resource$Apps$Delete,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    delete(
      params: Params$Resource$Apps$Delete,
      options: MethodOptions | BodyResponseCallback<void>,
      callback: BodyResponseCallback<void>
    ): void;
    delete(
      params: Params$Resource$Apps$Delete,
      callback: BodyResponseCallback<void>
    ): void;
    delete(callback: BodyResponseCallback<void>): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Apps$Delete
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      callback?: BodyResponseCallback<void> | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<void> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Apps$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Apps$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/apps/{appId}').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['appId'],
        pathParams: ['appId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<void>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<void>(parameters);
      }
    }

    /**
     * drive.apps.get
     * @desc Gets a specific app.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.apps.readonly',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.apps.get({
     *     // The ID of the app.
     *     appId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "appDataQuotaBytesUsed": "my_appDataQuotaBytesUsed",
     *   //   "authorized": false,
     *   //   "chromeExtensionIds": [],
     *   //   "createInFolderTemplate": "my_createInFolderTemplate",
     *   //   "createUrl": "my_createUrl",
     *   //   "driveBranded": false,
     *   //   "driveBrandedApp": false,
     *   //   "driveSource": false,
     *   //   "hasAppData": false,
     *   //   "hasDriveWideScope": false,
     *   //   "hasGsmListing": false,
     *   //   "hidden": false,
     *   //   "icons": [],
     *   //   "id": "my_id",
     *   //   "installed": false,
     *   //   "kind": "my_kind",
     *   //   "longDescription": "my_longDescription",
     *   //   "name": "my_name",
     *   //   "objectType": "my_objectType",
     *   //   "openUrlTemplate": "my_openUrlTemplate",
     *   //   "origins": [],
     *   //   "primaryFileExtensions": [],
     *   //   "primaryMimeTypes": [],
     *   //   "productId": "my_productId",
     *   //   "productUrl": "my_productUrl",
     *   //   "rankingInfo": {},
     *   //   "removable": false,
     *   //   "requiresAuthorizationBeforeOpenWith": false,
     *   //   "secondaryFileExtensions": [],
     *   //   "secondaryMimeTypes": [],
     *   //   "shortDescription": "my_shortDescription",
     *   //   "source": false,
     *   //   "supportsAllDrives": false,
     *   //   "supportsCreate": false,
     *   //   "supportsImport": false,
     *   //   "supportsMobileBrowser": false,
     *   //   "supportsMultiOpen": false,
     *   //   "supportsOfflineCreate": false,
     *   //   "supportsTeamDrives": false,
     *   //   "type": "my_type",
     *   //   "useByDefault": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.apps.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.appId The ID of the app.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params: Params$Resource$Apps$Get,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    get(
      params?: Params$Resource$Apps$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$App>;
    get(
      params: Params$Resource$Apps$Get,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    get(
      params: Params$Resource$Apps$Get,
      options: MethodOptions | BodyResponseCallback<Schema$App>,
      callback: BodyResponseCallback<Schema$App>
    ): void;
    get(
      params: Params$Resource$Apps$Get,
      callback: BodyResponseCallback<Schema$App>
    ): void;
    get(callback: BodyResponseCallback<Schema$App>): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Apps$Get
        | BodyResponseCallback<Schema$App>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$App>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$App>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$App> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Apps$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Apps$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/apps/{appId}').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['appId'],
        pathParams: ['appId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$App>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$App>(parameters);
      }
    }

    /**
     * drive.apps.insert
     * @desc Install this app.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.apps.insert({
     *     // The app to install. If no app is given, the calling app is used.
     *     appId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "appDataQuotaBytesUsed": "my_appDataQuotaBytesUsed",
     *   //   "authorized": false,
     *   //   "chromeExtensionIds": [],
     *   //   "createInFolderTemplate": "my_createInFolderTemplate",
     *   //   "createUrl": "my_createUrl",
     *   //   "driveBranded": false,
     *   //   "driveBrandedApp": false,
     *   //   "driveSource": false,
     *   //   "hasAppData": false,
     *   //   "hasDriveWideScope": false,
     *   //   "hasGsmListing": false,
     *   //   "hidden": false,
     *   //   "icons": [],
     *   //   "id": "my_id",
     *   //   "installed": false,
     *   //   "kind": "my_kind",
     *   //   "longDescription": "my_longDescription",
     *   //   "name": "my_name",
     *   //   "objectType": "my_objectType",
     *   //   "openUrlTemplate": "my_openUrlTemplate",
     *   //   "origins": [],
     *   //   "primaryFileExtensions": [],
     *   //   "primaryMimeTypes": [],
     *   //   "productId": "my_productId",
     *   //   "productUrl": "my_productUrl",
     *   //   "rankingInfo": {},
     *   //   "removable": false,
     *   //   "requiresAuthorizationBeforeOpenWith": false,
     *   //   "secondaryFileExtensions": [],
     *   //   "secondaryMimeTypes": [],
     *   //   "shortDescription": "my_shortDescription",
     *   //   "source": false,
     *   //   "supportsAllDrives": false,
     *   //   "supportsCreate": false,
     *   //   "supportsImport": false,
     *   //   "supportsMobileBrowser": false,
     *   //   "supportsMultiOpen": false,
     *   //   "supportsOfflineCreate": false,
     *   //   "supportsTeamDrives": false,
     *   //   "type": "my_type",
     *   //   "useByDefault": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.apps.insert
     * @memberOf! ()
     *
     * @param {object=} params Parameters for request
     * @param {string=} params.appId The app to install. If no app is given, the calling app is used.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    insert(
      params: Params$Resource$Apps$Insert,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    insert(
      params?: Params$Resource$Apps$Insert,
      options?: MethodOptions
    ): GaxiosPromise<Schema$App>;
    insert(
      params: Params$Resource$Apps$Insert,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    insert(
      params: Params$Resource$Apps$Insert,
      options: MethodOptions | BodyResponseCallback<Schema$App>,
      callback: BodyResponseCallback<Schema$App>
    ): void;
    insert(
      params: Params$Resource$Apps$Insert,
      callback: BodyResponseCallback<Schema$App>
    ): void;
    insert(callback: BodyResponseCallback<Schema$App>): void;
    insert(
      paramsOrCallback?:
        | Params$Resource$Apps$Insert
        | BodyResponseCallback<Schema$App>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$App>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$App>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$App> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Apps$Insert;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Apps$Insert;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/apps').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: [],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$App>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$App>(parameters);
      }
    }

    /**
     * drive.apps.list
     * @desc Lists a user's installed apps.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive.apps.readonly'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.apps.list({
     *     // A comma-separated list of file extensions for open with filtering. All apps within the given app query scope which can open any of the given file extensions will be included in the response. If appFilterMimeTypes are provided as well, the result is a union of the two resulting app lists.
     *     appFilterExtensions: 'placeholder-value',
     *     // A comma-separated list of mimetypes for open with filtering. All apps within the given app query scope which can open any of the given mimetypes will be included in the response. If appFilterExtensions are provided as well, the result is a union of the two resulting app lists.
     *     appFilterMimeTypes: 'placeholder-value',
     *     // The scope of this query.
     *     appQueryScope: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // Whether to include apps that are normally suppressed in results, like first-party apps.
     *     includeHidden: 'placeholder-value',
     *     // A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     *     languageCode: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // A comma-separated list of the sources for which to disallow caching. Currently, the only acceptable value is SOURCE.
     *     noCache: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // A comma-separated list of the sources of user apps to query: AUTHORIZED, INSTALLED, or SOURCE.
     *     userAppGrantSource: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "defaultAppIds": [],
     *   //   "etag": "my_etag",
     *   //   "items": [],
     *   //   "kind": "my_kind",
     *   //   "selfLink": "my_selfLink"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.apps.list
     * @memberOf! ()
     *
     * @param {object=} params Parameters for request
     * @param {string=} params.appFilterExtensions A comma-separated list of file extensions for open with filtering. All apps within the given app query scope which can open any of the given file extensions will be included in the response. If appFilterMimeTypes are provided as well, the result is a union of the two resulting app lists.
     * @param {string=} params.appFilterMimeTypes A comma-separated list of mimetypes for open with filtering. All apps within the given app query scope which can open any of the given mimetypes will be included in the response. If appFilterExtensions are provided as well, the result is a union of the two resulting app lists.
     * @param {string=} params.appQueryScope The scope of this query.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {boolean=} params.includeHidden Whether to include apps that are normally suppressed in results, like first-party apps.
     * @param {string=} params.languageCode A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {string=} params.noCache A comma-separated list of the sources for which to disallow caching. Currently, the only acceptable value is SOURCE.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {string=} params.userAppGrantSource A comma-separated list of the sources of user apps to query: AUTHORIZED, INSTALLED, or SOURCE.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params: Params$Resource$Apps$List,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    list(
      params?: Params$Resource$Apps$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$AppList>;
    list(
      params: Params$Resource$Apps$List,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    list(
      params: Params$Resource$Apps$List,
      options: MethodOptions | BodyResponseCallback<Schema$AppList>,
      callback: BodyResponseCallback<Schema$AppList>
    ): void;
    list(
      params: Params$Resource$Apps$List,
      callback: BodyResponseCallback<Schema$AppList>
    ): void;
    list(callback: BodyResponseCallback<Schema$AppList>): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Apps$List
        | BodyResponseCallback<Schema$AppList>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$AppList>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$AppList>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$AppList> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Apps$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Apps$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/apps').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: [],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$AppList>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$AppList>(parameters);
      }
    }

    /**
     * drive.apps.update
     * @desc Update the properties of this app.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.apps.update({
     *     // The ID of the app to update.
     *     appId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "appDataQuotaBytesUsed": "my_appDataQuotaBytesUsed",
     *       //   "authorized": false,
     *       //   "chromeExtensionIds": [],
     *       //   "createInFolderTemplate": "my_createInFolderTemplate",
     *       //   "createUrl": "my_createUrl",
     *       //   "driveBranded": false,
     *       //   "driveBrandedApp": false,
     *       //   "driveSource": false,
     *       //   "hasAppData": false,
     *       //   "hasDriveWideScope": false,
     *       //   "hasGsmListing": false,
     *       //   "hidden": false,
     *       //   "icons": [],
     *       //   "id": "my_id",
     *       //   "installed": false,
     *       //   "kind": "my_kind",
     *       //   "longDescription": "my_longDescription",
     *       //   "name": "my_name",
     *       //   "objectType": "my_objectType",
     *       //   "openUrlTemplate": "my_openUrlTemplate",
     *       //   "origins": [],
     *       //   "primaryFileExtensions": [],
     *       //   "primaryMimeTypes": [],
     *       //   "productId": "my_productId",
     *       //   "productUrl": "my_productUrl",
     *       //   "rankingInfo": {},
     *       //   "removable": false,
     *       //   "requiresAuthorizationBeforeOpenWith": false,
     *       //   "secondaryFileExtensions": [],
     *       //   "secondaryMimeTypes": [],
     *       //   "shortDescription": "my_shortDescription",
     *       //   "source": false,
     *       //   "supportsAllDrives": false,
     *       //   "supportsCreate": false,
     *       //   "supportsImport": false,
     *       //   "supportsMobileBrowser": false,
     *       //   "supportsMultiOpen": false,
     *       //   "supportsOfflineCreate": false,
     *       //   "supportsTeamDrives": false,
     *       //   "type": "my_type",
     *       //   "useByDefault": false
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "appDataQuotaBytesUsed": "my_appDataQuotaBytesUsed",
     *   //   "authorized": false,
     *   //   "chromeExtensionIds": [],
     *   //   "createInFolderTemplate": "my_createInFolderTemplate",
     *   //   "createUrl": "my_createUrl",
     *   //   "driveBranded": false,
     *   //   "driveBrandedApp": false,
     *   //   "driveSource": false,
     *   //   "hasAppData": false,
     *   //   "hasDriveWideScope": false,
     *   //   "hasGsmListing": false,
     *   //   "hidden": false,
     *   //   "icons": [],
     *   //   "id": "my_id",
     *   //   "installed": false,
     *   //   "kind": "my_kind",
     *   //   "longDescription": "my_longDescription",
     *   //   "name": "my_name",
     *   //   "objectType": "my_objectType",
     *   //   "openUrlTemplate": "my_openUrlTemplate",
     *   //   "origins": [],
     *   //   "primaryFileExtensions": [],
     *   //   "primaryMimeTypes": [],
     *   //   "productId": "my_productId",
     *   //   "productUrl": "my_productUrl",
     *   //   "rankingInfo": {},
     *   //   "removable": false,
     *   //   "requiresAuthorizationBeforeOpenWith": false,
     *   //   "secondaryFileExtensions": [],
     *   //   "secondaryMimeTypes": [],
     *   //   "shortDescription": "my_shortDescription",
     *   //   "source": false,
     *   //   "supportsAllDrives": false,
     *   //   "supportsCreate": false,
     *   //   "supportsImport": false,
     *   //   "supportsMobileBrowser": false,
     *   //   "supportsMultiOpen": false,
     *   //   "supportsOfflineCreate": false,
     *   //   "supportsTeamDrives": false,
     *   //   "type": "my_type",
     *   //   "useByDefault": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.apps.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.appId The ID of the app to update.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {().App} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params: Params$Resource$Apps$Update,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    update(
      params?: Params$Resource$Apps$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$App>;
    update(
      params: Params$Resource$Apps$Update,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    update(
      params: Params$Resource$Apps$Update,
      options: MethodOptions | BodyResponseCallback<Schema$App>,
      callback: BodyResponseCallback<Schema$App>
    ): void;
    update(
      params: Params$Resource$Apps$Update,
      callback: BodyResponseCallback<Schema$App>
    ): void;
    update(callback: BodyResponseCallback<Schema$App>): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Apps$Update
        | BodyResponseCallback<Schema$App>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$App>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$App>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$App> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Apps$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Apps$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/apps/{appId}').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['appId'],
        pathParams: ['appId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$App>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$App>(parameters);
      }
    }
  }

  export interface Params$Resource$Apps$Delete extends StandardParameters {
    /**
     * The ID of the app to uninstall. Specify 'self' to uninstall the current app.
     */
    appId?: string;
    /**
     * Whether to delete the App Data folder.
     */
    deleteAppData?: boolean;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }
  export interface Params$Resource$Apps$Get extends StandardParameters {
    /**
     * The ID of the app.
     */
    appId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }
  export interface Params$Resource$Apps$Insert extends StandardParameters {
    /**
     * The app to install. If no app is given, the calling app is used.
     */
    appId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }
  export interface Params$Resource$Apps$List extends StandardParameters {
    /**
     * A comma-separated list of file extensions for open with filtering. All apps within the given app query scope which can open any of the given file extensions will be included in the response. If appFilterMimeTypes are provided as well, the result is a union of the two resulting app lists.
     */
    appFilterExtensions?: string;
    /**
     * A comma-separated list of mimetypes for open with filtering. All apps within the given app query scope which can open any of the given mimetypes will be included in the response. If appFilterExtensions are provided as well, the result is a union of the two resulting app lists.
     */
    appFilterMimeTypes?: string;
    /**
     * The scope of this query.
     */
    appQueryScope?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * Whether to include apps that are normally suppressed in results, like first-party apps.
     */
    includeHidden?: boolean;
    /**
     * A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     */
    languageCode?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * A comma-separated list of the sources for which to disallow caching. Currently, the only acceptable value is SOURCE.
     */
    noCache?: string;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * A comma-separated list of the sources of user apps to query: AUTHORIZED, INSTALLED, or SOURCE.
     */
    userAppGrantSource?: string;
  }
  export interface Params$Resource$Apps$Update extends StandardParameters {
    /**
     * The ID of the app to update.
     */
    appId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;

    /**
     * Request body metadata
     */
    requestBody?: Schema$App;
  }

  export class Resource$Attachments {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * drive.attachments.insert
     * @desc Inserts a gmail attachment into drive.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/gmail.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.attachments.insert({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "fileId": "my_fileId",
     *       //   "kind": "my_kind",
     *       //   "messageId": "my_messageId",
     *       //   "partId": "my_partId"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "fileId": "my_fileId",
     *   //   "kind": "my_kind",
     *   //   "messageId": "my_messageId",
     *   //   "partId": "my_partId"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.attachments.insert
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {().Attachment} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    insert(
      params: Params$Resource$Attachments$Insert,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    insert(
      params?: Params$Resource$Attachments$Insert,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Attachment>;
    insert(
      params: Params$Resource$Attachments$Insert,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    insert(
      params: Params$Resource$Attachments$Insert,
      options: MethodOptions | BodyResponseCallback<Schema$Attachment>,
      callback: BodyResponseCallback<Schema$Attachment>
    ): void;
    insert(
      params: Params$Resource$Attachments$Insert,
      callback: BodyResponseCallback<Schema$Attachment>
    ): void;
    insert(callback: BodyResponseCallback<Schema$Attachment>): void;
    insert(
      paramsOrCallback?:
        | Params$Resource$Attachments$Insert
        | BodyResponseCallback<Schema$Attachment>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Attachment>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Attachment>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Attachment> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Attachments$Insert;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Attachments$Insert;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/attachments').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: [],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Attachment>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Attachment>(parameters);
      }
    }
  }

  export interface Params$Resource$Attachments$Insert
    extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;

    /**
     * Request body metadata
     */
    requestBody?: Schema$Attachment;
  }

  export class Resource$Backups {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * drive.backups.delete
     * @desc Deletes a backup.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.backups.delete({
     *     // The ID of the backup to delete.
     *     backupId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.backups.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.backupId The ID of the backup to delete.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params: Params$Resource$Backups$Delete,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    delete(
      params?: Params$Resource$Backups$Delete,
      options?: MethodOptions
    ): GaxiosPromise<void>;
    delete(
      params: Params$Resource$Backups$Delete,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    delete(
      params: Params$Resource$Backups$Delete,
      options: MethodOptions | BodyResponseCallback<void>,
      callback: BodyResponseCallback<void>
    ): void;
    delete(
      params: Params$Resource$Backups$Delete,
      callback: BodyResponseCallback<void>
    ): void;
    delete(callback: BodyResponseCallback<void>): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Backups$Delete
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      callback?: BodyResponseCallback<void> | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<void> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Backups$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Backups$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/backups/{backupId}').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['backupId'],
        pathParams: ['backupId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<void>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<void>(parameters);
      }
    }

    /**
     * drive.backups.get
     * @desc Gets a backup's metadata by ID.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.backups.get({
     *     // The ID of the backup.
     *     backupId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "backupSource": "my_backupSource",
     *   //   "backupSummary": {},
     *   //   "externalId": "my_externalId",
     *   //   "extractionState": "my_extractionState",
     *   //   "id": "my_id",
     *   //   "kind": "my_kind",
     *   //   "lastBackupDate": "my_lastBackupDate",
     *   //   "targetFolderId": "my_targetFolderId"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.backups.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.backupId The ID of the backup.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params: Params$Resource$Backups$Get,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    get(
      params?: Params$Resource$Backups$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Backup>;
    get(
      params: Params$Resource$Backups$Get,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    get(
      params: Params$Resource$Backups$Get,
      options: MethodOptions | BodyResponseCallback<Schema$Backup>,
      callback: BodyResponseCallback<Schema$Backup>
    ): void;
    get(
      params: Params$Resource$Backups$Get,
      callback: BodyResponseCallback<Schema$Backup>
    ): void;
    get(callback: BodyResponseCallback<Schema$Backup>): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Backups$Get
        | BodyResponseCallback<Schema$Backup>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Backup>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Backup>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Backup> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Backups$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Backups$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/backups/{backupId}').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['backupId'],
        pathParams: ['backupId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Backup>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Backup>(parameters);
      }
    }

    /**
     * drive.backups.list
     * @desc Lists backups for a user.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.backups.list({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "items": [],
     *   //   "kind": "my_kind"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.backups.list
     * @memberOf! ()
     *
     * @param {object=} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params: Params$Resource$Backups$List,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    list(
      params?: Params$Resource$Backups$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$BackupList>;
    list(
      params: Params$Resource$Backups$List,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    list(
      params: Params$Resource$Backups$List,
      options: MethodOptions | BodyResponseCallback<Schema$BackupList>,
      callback: BodyResponseCallback<Schema$BackupList>
    ): void;
    list(
      params: Params$Resource$Backups$List,
      callback: BodyResponseCallback<Schema$BackupList>
    ): void;
    list(callback: BodyResponseCallback<Schema$BackupList>): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Backups$List
        | BodyResponseCallback<Schema$BackupList>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$BackupList>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$BackupList>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$BackupList> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Backups$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Backups$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/backups').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: [],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$BackupList>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$BackupList>(parameters);
      }
    }

    /**
     * drive.backups.patch
     * @desc Updates a backup's metadata.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.backups.patch({
     *     // The ID of the backup to update.
     *     backupId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "backupSource": "my_backupSource",
     *       //   "backupSummary": {},
     *       //   "externalId": "my_externalId",
     *       //   "extractionState": "my_extractionState",
     *       //   "id": "my_id",
     *       //   "kind": "my_kind",
     *       //   "lastBackupDate": "my_lastBackupDate",
     *       //   "targetFolderId": "my_targetFolderId"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "backupSource": "my_backupSource",
     *   //   "backupSummary": {},
     *   //   "externalId": "my_externalId",
     *   //   "extractionState": "my_extractionState",
     *   //   "id": "my_id",
     *   //   "kind": "my_kind",
     *   //   "lastBackupDate": "my_lastBackupDate",
     *   //   "targetFolderId": "my_targetFolderId"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.backups.patch
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.backupId The ID of the backup to update.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {().Backup} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    patch(
      params: Params$Resource$Backups$Patch,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    patch(
      params?: Params$Resource$Backups$Patch,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Backup>;
    patch(
      params: Params$Resource$Backups$Patch,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    patch(
      params: Params$Resource$Backups$Patch,
      options: MethodOptions | BodyResponseCallback<Schema$Backup>,
      callback: BodyResponseCallback<Schema$Backup>
    ): void;
    patch(
      params: Params$Resource$Backups$Patch,
      callback: BodyResponseCallback<Schema$Backup>
    ): void;
    patch(callback: BodyResponseCallback<Schema$Backup>): void;
    patch(
      paramsOrCallback?:
        | Params$Resource$Backups$Patch
        | BodyResponseCallback<Schema$Backup>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Backup>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Backup>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Backup> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Backups$Patch;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Backups$Patch;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/backups/{backupId}').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'PATCH',
          },
          options
        ),
        params,
        requiredParams: ['backupId'],
        pathParams: ['backupId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Backup>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Backup>(parameters);
      }
    }

    /**
     * drive.backups.startExtraction
     * @desc Starts extracting a backup.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.backups.startExtraction({
     *     // A signed token that includes the user ID and a timestamp. Used to verify that a web user completed the reauth flow.
     *     authToken: 'placeholder-value',
     *     // The ID of the backup to extract.
     *     backupId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // The ID of the folder where the files in the backup will be extracted.
     *     targetFolderId: 'placeholder-value',
     *   });
     *   console.log(res.data);
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.backups.startExtraction
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.authToken A signed token that includes the user ID and a timestamp. Used to verify that a web user completed the reauth flow.
     * @param {string} params.backupId The ID of the backup to extract.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {string} params.targetFolderId The ID of the folder where the files in the backup will be extracted.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    startExtraction(
      params: Params$Resource$Backups$Startextraction,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    startExtraction(
      params?: Params$Resource$Backups$Startextraction,
      options?: MethodOptions
    ): GaxiosPromise<void>;
    startExtraction(
      params: Params$Resource$Backups$Startextraction,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    startExtraction(
      params: Params$Resource$Backups$Startextraction,
      options: MethodOptions | BodyResponseCallback<void>,
      callback: BodyResponseCallback<void>
    ): void;
    startExtraction(
      params: Params$Resource$Backups$Startextraction,
      callback: BodyResponseCallback<void>
    ): void;
    startExtraction(callback: BodyResponseCallback<void>): void;
    startExtraction(
      paramsOrCallback?:
        | Params$Resource$Backups$Startextraction
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      callback?: BodyResponseCallback<void> | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<void> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Backups$Startextraction;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Backups$Startextraction;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/backups/{backupId}/startExtraction'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['backupId', 'targetFolderId'],
        pathParams: ['backupId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<void>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<void>(parameters);
      }
    }

    /**
     * drive.backups.stopExtraction
     * @desc Stops extraction of a backup.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.backups.stopExtraction({
     *     // The ID of the backup.
     *     backupId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.backups.stopExtraction
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.backupId The ID of the backup.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    stopExtraction(
      params: Params$Resource$Backups$Stopextraction,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    stopExtraction(
      params?: Params$Resource$Backups$Stopextraction,
      options?: MethodOptions
    ): GaxiosPromise<void>;
    stopExtraction(
      params: Params$Resource$Backups$Stopextraction,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    stopExtraction(
      params: Params$Resource$Backups$Stopextraction,
      options: MethodOptions | BodyResponseCallback<void>,
      callback: BodyResponseCallback<void>
    ): void;
    stopExtraction(
      params: Params$Resource$Backups$Stopextraction,
      callback: BodyResponseCallback<void>
    ): void;
    stopExtraction(callback: BodyResponseCallback<void>): void;
    stopExtraction(
      paramsOrCallback?:
        | Params$Resource$Backups$Stopextraction
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      callback?: BodyResponseCallback<void> | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<void> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Backups$Stopextraction;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Backups$Stopextraction;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/backups/{backupId}/stopExtraction'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['backupId'],
        pathParams: ['backupId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<void>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<void>(parameters);
      }
    }
  }

  export interface Params$Resource$Backups$Delete extends StandardParameters {
    /**
     * The ID of the backup to delete.
     */
    backupId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }
  export interface Params$Resource$Backups$Get extends StandardParameters {
    /**
     * The ID of the backup.
     */
    backupId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }
  export interface Params$Resource$Backups$List extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }
  export interface Params$Resource$Backups$Patch extends StandardParameters {
    /**
     * The ID of the backup to update.
     */
    backupId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;

    /**
     * Request body metadata
     */
    requestBody?: Schema$Backup;
  }
  export interface Params$Resource$Backups$Startextraction
    extends StandardParameters {
    /**
     * A signed token that includes the user ID and a timestamp. Used to verify that a web user completed the reauth flow.
     */
    authToken?: string;
    /**
     * The ID of the backup to extract.
     */
    backupId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * The ID of the folder where the files in the backup will be extracted.
     */
    targetFolderId?: string;
  }
  export interface Params$Resource$Backups$Stopextraction
    extends StandardParameters {
    /**
     * The ID of the backup.
     */
    backupId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }

  export class Resource$Changes {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * drive.changes.get
     * @desc Deprecated - Use changes.getStartPageToken and changes.list to retrieve recent changes.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.apps.readonly',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.photos.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.changes.get({
     *     // Whether to retrieve all properties, not just those visible to the app.
     *     allProperties: 'placeholder-value',
     *     // The ID of the change.
     *     changeId: 'placeholder-value',
     *     // The shared drive from which the change will be returned.
     *     driveId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     *     includePermissionsForView: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the requesting application supports both My Drives and shared drives.
     *     supportsAllDrives: 'placeholder-value',
     *     // Deprecated use supportsAllDrives instead.
     *     supportsTeamDrives: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // Deprecated use driveId instead.
     *     teamDriveId: 'placeholder-value',
     *     // If true, Permissions with type Audience are represented with Domain type.
     *     useLegacyDomainPermissionBehavior: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "changeType": "my_changeType",
     *   //   "deleted": false,
     *   //   "drive": {},
     *   //   "driveId": "my_driveId",
     *   //   "file": {},
     *   //   "fileId": "my_fileId",
     *   //   "fileVersion": "my_fileVersion",
     *   //   "id": "my_id",
     *   //   "kind": "my_kind",
     *   //   "modificationDate": "my_modificationDate",
     *   //   "selfLink": "my_selfLink",
     *   //   "teamDrive": {},
     *   //   "teamDriveId": "my_teamDriveId",
     *   //   "type": "my_type"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.changes.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.allProperties Whether to retrieve all properties, not just those visible to the app.
     * @param {string} params.changeId The ID of the change.
     * @param {string=} params.driveId The shared drive from which the change will be returned.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string=} params.includePermissionsForView Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {boolean=} params.supportsAllDrives Whether the requesting application supports both My Drives and shared drives.
     * @param {boolean=} params.supportsTeamDrives Deprecated use supportsAllDrives instead.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {string=} params.teamDriveId Deprecated use driveId instead.
     * @param {boolean=} params.useLegacyDomainPermissionBehavior If true, Permissions with type Audience are represented with Domain type.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params: Params$Resource$Changes$Get,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    get(
      params?: Params$Resource$Changes$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Change>;
    get(
      params: Params$Resource$Changes$Get,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    get(
      params: Params$Resource$Changes$Get,
      options: MethodOptions | BodyResponseCallback<Schema$Change>,
      callback: BodyResponseCallback<Schema$Change>
    ): void;
    get(
      params: Params$Resource$Changes$Get,
      callback: BodyResponseCallback<Schema$Change>
    ): void;
    get(callback: BodyResponseCallback<Schema$Change>): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Changes$Get
        | BodyResponseCallback<Schema$Change>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Change>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Change>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Change> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Changes$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Changes$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/changes/{changeId}').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['changeId'],
        pathParams: ['changeId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Change>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Change>(parameters);
      }
    }

    /**
     * drive.changes.getRemainingCount
     * @desc Returns the estimated number of change entries that a client could expect by performing a similar changes.list request.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.apps.readonly',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.photos.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.changes.getRemainingCount({
     *     // The shared drive from which changes will be counted. If specified the change IDs will be reflective of the shared drive; use the combined drive ID and change ID as an identifier.
     *     driveId: 'placeholder-value',
     *     // This field is ignored.
     *     filters: 'placeholder-value',
     *     // Whether changes to package embedded items should be counted in results.
     *     includeEmbeddedItems: 'placeholder-value',
     *     // Whether shared drive items should be counted in the results.
     *     includeItemsFromAllDrives: 'placeholder-value',
     *     // Whether to count changes outside the My Drive hierarchy. When set to false, changes to files such as those in the Application Data folder or shared files which have not been added to My Drive will be omitted from the count.
     *     includeSubscribed: 'placeholder-value',
     *     // Deprecated use includeItemsFromAllDrives instead.
     *     includeTeamDriveItems: 'placeholder-value',
     *     // Maximum number of changes to count per page.
     *     maxResults: 'placeholder-value',
     *     // The token for continuing a previous count request on the next page. This should be set to the value of 'nextPageToken' from the previous response or to the response from the getStartPageToken method.
     *     pageToken: 'placeholder-value',
     *     // A comma-separated list of spaces to query. Supported values are 'drive', 'appContent', 'appDataFolder', 'photos' and 'androidBackup'.
     *     spaces: 'placeholder-value',
     *     // Whether the requesting application supports both My Drives and shared drives.
     *     supportsAllDrives: 'placeholder-value',
     *     // Deprecated use supportsAllDrives instead.
     *     supportsTeamDrives: 'placeholder-value',
     *     // Deprecated use driveId instead.
     *     teamDriveId: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "kind": "my_kind",
     *   //   "nextPageToken": "my_nextPageToken",
     *   //   "remainingCount": "my_remainingCount"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.changes.getRemainingCount
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.driveId The shared drive from which changes will be counted. If specified the change IDs will be reflective of the shared drive; use the combined drive ID and change ID as an identifier.
     * @param {string=} params.filters This field is ignored.
     * @param {boolean=} params.includeEmbeddedItems Whether changes to package embedded items should be counted in results.
     * @param {boolean=} params.includeItemsFromAllDrives Whether shared drive items should be counted in the results.
     * @param {boolean=} params.includeSubscribed Whether to count changes outside the My Drive hierarchy. When set to false, changes to files such as those in the Application Data folder or shared files which have not been added to My Drive will be omitted from the count.
     * @param {boolean=} params.includeTeamDriveItems Deprecated use includeItemsFromAllDrives instead.
     * @param {integer=} params.maxResults Maximum number of changes to count per page.
     * @param {string} params.pageToken The token for continuing a previous count request on the next page. This should be set to the value of 'nextPageToken' from the previous response or to the response from the getStartPageToken method.
     * @param {string=} params.spaces A comma-separated list of spaces to query. Supported values are 'drive', 'appContent', 'appDataFolder', 'photos' and 'androidBackup'.
     * @param {boolean=} params.supportsAllDrives Whether the requesting application supports both My Drives and shared drives.
     * @param {boolean=} params.supportsTeamDrives Deprecated use supportsAllDrives instead.
     * @param {string=} params.teamDriveId Deprecated use driveId instead.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getRemainingCount(
      params: Params$Resource$Changes$Getremainingcount,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    getRemainingCount(
      params?: Params$Resource$Changes$Getremainingcount,
      options?: MethodOptions
    ): GaxiosPromise<Schema$RemainingCount>;
    getRemainingCount(
      params: Params$Resource$Changes$Getremainingcount,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    getRemainingCount(
      params: Params$Resource$Changes$Getremainingcount,
      options: MethodOptions | BodyResponseCallback<Schema$RemainingCount>,
      callback: BodyResponseCallback<Schema$RemainingCount>
    ): void;
    getRemainingCount(
      params: Params$Resource$Changes$Getremainingcount,
      callback: BodyResponseCallback<Schema$RemainingCount>
    ): void;
    getRemainingCount(
      callback: BodyResponseCallback<Schema$RemainingCount>
    ): void;
    getRemainingCount(
      paramsOrCallback?:
        | Params$Resource$Changes$Getremainingcount
        | BodyResponseCallback<Schema$RemainingCount>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$RemainingCount>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$RemainingCount>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$RemainingCount> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Changes$Getremainingcount;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Changes$Getremainingcount;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/changes/getRemainingCount'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['pageToken'],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$RemainingCount>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$RemainingCount>(parameters);
      }
    }

    /**
     * drive.changes.getStartPageToken
     * @desc Gets the starting pageToken for listing future changes.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.apps.readonly',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.photos.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.changes.getStartPageToken({
     *     // The ID of the shared drive for which the starting pageToken for listing future changes from that shared drive will be returned.
     *     driveId: 'placeholder-value',
     *     // Whether the requesting application supports both My Drives and shared drives.
     *     supportsAllDrives: 'placeholder-value',
     *     // Deprecated use supportsAllDrives instead.
     *     supportsTeamDrives: 'placeholder-value',
     *     // Deprecated use driveId instead.
     *     teamDriveId: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "kind": "my_kind",
     *   //   "startPageToken": "my_startPageToken"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.changes.getStartPageToken
     * @memberOf! ()
     *
     * @param {object=} params Parameters for request
     * @param {string=} params.driveId The ID of the shared drive for which the starting pageToken for listing future changes from that shared drive will be returned.
     * @param {boolean=} params.supportsAllDrives Whether the requesting application supports both My Drives and shared drives.
     * @param {boolean=} params.supportsTeamDrives Deprecated use supportsAllDrives instead.
     * @param {string=} params.teamDriveId Deprecated use driveId instead.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getStartPageToken(
      params: Params$Resource$Changes$Getstartpagetoken,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    getStartPageToken(
      params?: Params$Resource$Changes$Getstartpagetoken,
      options?: MethodOptions
    ): GaxiosPromise<Schema$StartPageToken>;
    getStartPageToken(
      params: Params$Resource$Changes$Getstartpagetoken,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    getStartPageToken(
      params: Params$Resource$Changes$Getstartpagetoken,
      options: MethodOptions | BodyResponseCallback<Schema$StartPageToken>,
      callback: BodyResponseCallback<Schema$StartPageToken>
    ): void;
    getStartPageToken(
      params: Params$Resource$Changes$Getstartpagetoken,
      callback: BodyResponseCallback<Schema$StartPageToken>
    ): void;
    getStartPageToken(
      callback: BodyResponseCallback<Schema$StartPageToken>
    ): void;
    getStartPageToken(
      paramsOrCallback?:
        | Params$Resource$Changes$Getstartpagetoken
        | BodyResponseCallback<Schema$StartPageToken>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$StartPageToken>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$StartPageToken>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$StartPageToken> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Changes$Getstartpagetoken;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Changes$Getstartpagetoken;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/changes/startPageToken').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: [],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$StartPageToken>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$StartPageToken>(parameters);
      }
    }

    /**
     * drive.changes.list
     * @desc Lists the changes for a user or shared drive.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.apps.readonly',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.photos.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.changes.list({
     *     // Whether to retrieve all properties, not just those visible to the app.
     *     allProperties: 'placeholder-value',
     *     // Deprecated: use 'spaces' instead. Specifies whether to return App Data, non-App Data, or both in query results.
     *     appDataFilter: 'placeholder-value',
     *     // The shared drive from which changes will be returned. If specified the change IDs will be reflective of the shared drive; use the combined drive ID and change ID as an identifier.
     *     driveId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // A comma separated list of app IDs. If set, the list will also include files inside the app data folder that could be opened with any of the given apps with drive.appdata scope. Requires the ALL_APPDATA scope.
     *     fileScopeAppIds: 'placeholder-value',
     *     // This field is ignored.
     *     filters: 'placeholder-value',
     *     // If true, all badged Labels will be returned in the labelInfo part of the response.
     *     includeBadgedLabels: 'placeholder-value',
     *     // Whether changes should include the file resource if the file is still accessible by the user at the time of the request, even when a file was removed from the list of changes and there will be no further change entries for this file.
     *     includeCorpusRemovals: 'placeholder-value',
     *     // Whether to include changes indicating that items have been removed from the list of changes, for example by deletion or loss of access.
     *     includeDeleted: 'placeholder-value',
     *     // Whether changes to package embedded items should be included in results.
     *     includeEmbeddedItems: 'placeholder-value',
     *     // Whether both My Drive and shared drive items should be included in results.
     *     includeItemsFromAllDrives: 'placeholder-value',
     *     // A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     *     includeLabels: 'placeholder-value',
     *     // A comma-separated list of names of Categories to include in the response.
     *     includeMetadataForCategories: 'placeholder-value',
     *     // Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     *     includePermissionsForView: 'placeholder-value',
     *     // Whether to include changes outside the My Drive hierarchy in the result. When set to false, changes to files such as those in the Application Data folder or shared files which have not been added to My Drive will be omitted from the result.
     *     includeSubscribed: 'placeholder-value',
     *     // Deprecated use includeItemsFromAllDrives instead.
     *     includeTeamDriveItems: 'placeholder-value',
     *     // Maximum number of changes to return.
     *     maxResults: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response or to the response from the getStartPageToken method.
     *     pageToken: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // Whether the request should be rejected if it would generate an inefficient query.
     *     rejectInefficientRequests: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request should return efficiency info.
     *     returnEfficiencyInfo: 'placeholder-value',
     *     // Deprecated: use 'spaces' instead. A comma-separated list of sources to query. Supported values are 'GOOGLE_PHOTOS' and 'ANDROID_BACKUP'.
     *     sources: 'placeholder-value',
     *     // A comma-separated list of spaces to query. Supported values are 'drive', 'appContent', 'appDataFolder', 'photos' and 'androidBackup'.
     *     spaces: 'placeholder-value',
     *     // Deprecated - use pageToken instead.
     *     startChangeId: 'placeholder-value',
     *     // Whether the requesting application supports both My Drives and shared drives.
     *     supportsAllDrives: 'placeholder-value',
     *     // Deprecated use supportsAllDrives instead.
     *     supportsTeamDrives: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // Deprecated use driveId instead.
     *     teamDriveId: 'placeholder-value',
     *     // If true, Permissions with type Audience are represented with Domain type.
     *     useLegacyDomainPermissionBehavior: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "efficiencyInfo": {},
     *   //   "etag": "my_etag",
     *   //   "items": [],
     *   //   "kind": "my_kind",
     *   //   "largestChangeId": "my_largestChangeId",
     *   //   "newStartPageToken": "my_newStartPageToken",
     *   //   "nextLink": "my_nextLink",
     *   //   "nextPageToken": "my_nextPageToken",
     *   //   "remainingChanges": "my_remainingChanges",
     *   //   "selfLink": "my_selfLink"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.changes.list
     * @memberOf! ()
     *
     * @param {object=} params Parameters for request
     * @param {boolean=} params.allProperties Whether to retrieve all properties, not just those visible to the app.
     * @param {string=} params.appDataFilter Deprecated: use 'spaces' instead. Specifies whether to return App Data, non-App Data, or both in query results.
     * @param {string=} params.driveId The shared drive from which changes will be returned. If specified the change IDs will be reflective of the shared drive; use the combined drive ID and change ID as an identifier.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string=} params.fileScopeAppIds A comma separated list of app IDs. If set, the list will also include files inside the app data folder that could be opened with any of the given apps with drive.appdata scope. Requires the ALL_APPDATA scope.
     * @param {string=} params.filters This field is ignored.
     * @param {boolean=} params.includeBadgedLabels If true, all badged Labels will be returned in the labelInfo part of the response.
     * @param {boolean=} params.includeCorpusRemovals Whether changes should include the file resource if the file is still accessible by the user at the time of the request, even when a file was removed from the list of changes and there will be no further change entries for this file.
     * @param {boolean=} params.includeDeleted Whether to include changes indicating that items have been removed from the list of changes, for example by deletion or loss of access.
     * @param {boolean=} params.includeEmbeddedItems Whether changes to package embedded items should be included in results.
     * @param {boolean=} params.includeItemsFromAllDrives Whether both My Drive and shared drive items should be included in results.
     * @param {string=} params.includeLabels A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     * @param {string=} params.includeMetadataForCategories A comma-separated list of names of Categories to include in the response.
     * @param {string=} params.includePermissionsForView Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     * @param {boolean=} params.includeSubscribed Whether to include changes outside the My Drive hierarchy in the result. When set to false, changes to files such as those in the Application Data folder or shared files which have not been added to My Drive will be omitted from the result.
     * @param {boolean=} params.includeTeamDriveItems Deprecated use includeItemsFromAllDrives instead.
     * @param {integer=} params.maxResults Maximum number of changes to return.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.pageToken The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response or to the response from the getStartPageToken method.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {boolean=} params.rejectInefficientRequests Whether the request should be rejected if it would generate an inefficient query.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {boolean=} params.returnEfficiencyInfo Whether the request should return efficiency info.
     * @param {string=} params.sources Deprecated: use 'spaces' instead. A comma-separated list of sources to query. Supported values are 'GOOGLE_PHOTOS' and 'ANDROID_BACKUP'.
     * @param {string=} params.spaces A comma-separated list of spaces to query. Supported values are 'drive', 'appContent', 'appDataFolder', 'photos' and 'androidBackup'.
     * @param {string=} params.startChangeId Deprecated - use pageToken instead.
     * @param {boolean=} params.supportsAllDrives Whether the requesting application supports both My Drives and shared drives.
     * @param {boolean=} params.supportsTeamDrives Deprecated use supportsAllDrives instead.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {string=} params.teamDriveId Deprecated use driveId instead.
     * @param {boolean=} params.useLegacyDomainPermissionBehavior If true, Permissions with type Audience are represented with Domain type.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params: Params$Resource$Changes$List,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    list(
      params?: Params$Resource$Changes$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$ChangeList>;
    list(
      params: Params$Resource$Changes$List,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    list(
      params: Params$Resource$Changes$List,
      options: MethodOptions | BodyResponseCallback<Schema$ChangeList>,
      callback: BodyResponseCallback<Schema$ChangeList>
    ): void;
    list(
      params: Params$Resource$Changes$List,
      callback: BodyResponseCallback<Schema$ChangeList>
    ): void;
    list(callback: BodyResponseCallback<Schema$ChangeList>): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Changes$List
        | BodyResponseCallback<Schema$ChangeList>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$ChangeList>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$ChangeList>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$ChangeList> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Changes$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Changes$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/changes').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: [],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$ChangeList>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$ChangeList>(parameters);
      }
    }

    /**
     * drive.changes.watch
     * @desc Subscribe to changes for a user.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.apps.readonly',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.photos.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.changes.watch({
     *     // Whether to retrieve all properties, not just those visible to the app.
     *     allProperties: 'placeholder-value',
     *     // Deprecated: use 'spaces' instead. Specifies whether to return App Data, non-App Data, or both in query results.
     *     appDataFilter: 'placeholder-value',
     *     // The shared drive from which changes will be returned. If specified the change IDs will be reflective of the shared drive; use the combined drive ID and change ID as an identifier.
     *     driveId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // A comma separated list of app IDs. If set, the list will also include files inside the app data folder that could be opened with any of the given apps with drive.appdata scope. Requires the ALL_APPDATA scope.
     *     fileScopeAppIds: 'placeholder-value',
     *     // This field is ignored.
     *     filters: 'placeholder-value',
     *     // If true, all badged Labels will be returned in the labelInfo part of the response.
     *     includeBadgedLabels: 'placeholder-value',
     *     // Whether changes should include the file resource if the file is still accessible by the user at the time of the request, even when a file was removed from the list of changes and there will be no further change entries for this file.
     *     includeCorpusRemovals: 'placeholder-value',
     *     // Whether to include changes indicating that items have been removed from the list of changes, for example by deletion or loss of access.
     *     includeDeleted: 'placeholder-value',
     *     // Whether changes to package embedded items should be included in results.
     *     includeEmbeddedItems: 'placeholder-value',
     *     // Whether both My Drive and shared drive items should be included in results.
     *     includeItemsFromAllDrives: 'placeholder-value',
     *     // A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     *     includeLabels: 'placeholder-value',
     *     // A comma-separated list of names of Categories to include in the response.
     *     includeMetadataForCategories: 'placeholder-value',
     *     // Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     *     includePermissionsForView: 'placeholder-value',
     *     // Whether to include changes outside the My Drive hierarchy in the result. When set to false, changes to files such as those in the Application Data folder or shared files which have not been added to My Drive will be omitted from the result.
     *     includeSubscribed: 'placeholder-value',
     *     // Deprecated use includeItemsFromAllDrives instead.
     *     includeTeamDriveItems: 'placeholder-value',
     *     // Maximum number of changes to return.
     *     maxResults: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response or to the response from the getStartPageToken method.
     *     pageToken: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // Whether the request should be rejected if it would generate an inefficient query.
     *     rejectInefficientRequests: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request should return efficiency info.
     *     returnEfficiencyInfo: 'placeholder-value',
     *     // Deprecated: use 'spaces' instead. A comma-separated list of sources to query. Supported values are 'GOOGLE_PHOTOS' and 'ANDROID_BACKUP'.
     *     sources: 'placeholder-value',
     *     // A comma-separated list of spaces to query. Supported values are 'drive', 'appContent', 'appDataFolder', 'photos' and 'androidBackup'.
     *     spaces: 'placeholder-value',
     *     // Deprecated - use pageToken instead.
     *     startChangeId: 'placeholder-value',
     *     // Whether the requesting application supports both My Drives and shared drives.
     *     supportsAllDrives: 'placeholder-value',
     *     // Deprecated use supportsAllDrives instead.
     *     supportsTeamDrives: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // Deprecated use driveId instead.
     *     teamDriveId: 'placeholder-value',
     *     // If true, Permissions with type Audience are represented with Domain type.
     *     useLegacyDomainPermissionBehavior: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "address": "my_address",
     *       //   "expiration": "my_expiration",
     *       //   "id": "my_id",
     *       //   "kind": "my_kind",
     *       //   "params": {},
     *       //   "payload": false,
     *       //   "resourceId": "my_resourceId",
     *       //   "resourceUri": "my_resourceUri",
     *       //   "token": "my_token",
     *       //   "type": "my_type"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "address": "my_address",
     *   //   "expiration": "my_expiration",
     *   //   "id": "my_id",
     *   //   "kind": "my_kind",
     *   //   "params": {},
     *   //   "payload": false,
     *   //   "resourceId": "my_resourceId",
     *   //   "resourceUri": "my_resourceUri",
     *   //   "token": "my_token",
     *   //   "type": "my_type"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.changes.watch
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.allProperties Whether to retrieve all properties, not just those visible to the app.
     * @param {string=} params.appDataFilter Deprecated: use 'spaces' instead. Specifies whether to return App Data, non-App Data, or both in query results.
     * @param {string=} params.driveId The shared drive from which changes will be returned. If specified the change IDs will be reflective of the shared drive; use the combined drive ID and change ID as an identifier.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string=} params.fileScopeAppIds A comma separated list of app IDs. If set, the list will also include files inside the app data folder that could be opened with any of the given apps with drive.appdata scope. Requires the ALL_APPDATA scope.
     * @param {string=} params.filters This field is ignored.
     * @param {boolean=} params.includeBadgedLabels If true, all badged Labels will be returned in the labelInfo part of the response.
     * @param {boolean=} params.includeCorpusRemovals Whether changes should include the file resource if the file is still accessible by the user at the time of the request, even when a file was removed from the list of changes and there will be no further change entries for this file.
     * @param {boolean=} params.includeDeleted Whether to include changes indicating that items have been removed from the list of changes, for example by deletion or loss of access.
     * @param {boolean=} params.includeEmbeddedItems Whether changes to package embedded items should be included in results.
     * @param {boolean=} params.includeItemsFromAllDrives Whether both My Drive and shared drive items should be included in results.
     * @param {string=} params.includeLabels A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     * @param {string=} params.includeMetadataForCategories A comma-separated list of names of Categories to include in the response.
     * @param {string=} params.includePermissionsForView Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     * @param {boolean=} params.includeSubscribed Whether to include changes outside the My Drive hierarchy in the result. When set to false, changes to files such as those in the Application Data folder or shared files which have not been added to My Drive will be omitted from the result.
     * @param {boolean=} params.includeTeamDriveItems Deprecated use includeItemsFromAllDrives instead.
     * @param {integer=} params.maxResults Maximum number of changes to return.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.pageToken The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response or to the response from the getStartPageToken method.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {boolean=} params.rejectInefficientRequests Whether the request should be rejected if it would generate an inefficient query.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {boolean=} params.returnEfficiencyInfo Whether the request should return efficiency info.
     * @param {string=} params.sources Deprecated: use 'spaces' instead. A comma-separated list of sources to query. Supported values are 'GOOGLE_PHOTOS' and 'ANDROID_BACKUP'.
     * @param {string=} params.spaces A comma-separated list of spaces to query. Supported values are 'drive', 'appContent', 'appDataFolder', 'photos' and 'androidBackup'.
     * @param {string=} params.startChangeId Deprecated - use pageToken instead.
     * @param {boolean=} params.supportsAllDrives Whether the requesting application supports both My Drives and shared drives.
     * @param {boolean=} params.supportsTeamDrives Deprecated use supportsAllDrives instead.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {string=} params.teamDriveId Deprecated use driveId instead.
     * @param {boolean=} params.useLegacyDomainPermissionBehavior If true, Permissions with type Audience are represented with Domain type.
     * @param {().Channel} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    watch(
      params: Params$Resource$Changes$Watch,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    watch(
      params?: Params$Resource$Changes$Watch,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Channel>;
    watch(
      params: Params$Resource$Changes$Watch,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    watch(
      params: Params$Resource$Changes$Watch,
      options: MethodOptions | BodyResponseCallback<Schema$Channel>,
      callback: BodyResponseCallback<Schema$Channel>
    ): void;
    watch(
      params: Params$Resource$Changes$Watch,
      callback: BodyResponseCallback<Schema$Channel>
    ): void;
    watch(callback: BodyResponseCallback<Schema$Channel>): void;
    watch(
      paramsOrCallback?:
        | Params$Resource$Changes$Watch
        | BodyResponseCallback<Schema$Channel>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Channel>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Channel>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Channel> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Changes$Watch;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Changes$Watch;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/changes/watch').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: [],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Channel>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Channel>(parameters);
      }
    }
  }

  export interface Params$Resource$Changes$Get extends StandardParameters {
    /**
     * Whether to retrieve all properties, not just those visible to the app.
     */
    allProperties?: boolean;
    /**
     * The ID of the change.
     */
    changeId?: string;
    /**
     * The shared drive from which the change will be returned.
     */
    driveId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     */
    includePermissionsForView?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the requesting application supports both My Drives and shared drives.
     */
    supportsAllDrives?: boolean;
    /**
     * Deprecated use supportsAllDrives instead.
     */
    supportsTeamDrives?: boolean;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * Deprecated use driveId instead.
     */
    teamDriveId?: string;
    /**
     * If true, Permissions with type Audience are represented with Domain type.
     */
    useLegacyDomainPermissionBehavior?: boolean;
  }
  export interface Params$Resource$Changes$Getremainingcount
    extends StandardParameters {
    /**
     * The shared drive from which changes will be counted. If specified the change IDs will be reflective of the shared drive; use the combined drive ID and change ID as an identifier.
     */
    driveId?: string;
    /**
     * This field is ignored.
     */
    filters?: string;
    /**
     * Whether changes to package embedded items should be counted in results.
     */
    includeEmbeddedItems?: boolean;
    /**
     * Whether shared drive items should be counted in the results.
     */
    includeItemsFromAllDrives?: boolean;
    /**
     * Whether to count changes outside the My Drive hierarchy. When set to false, changes to files such as those in the Application Data folder or shared files which have not been added to My Drive will be omitted from the count.
     */
    includeSubscribed?: boolean;
    /**
     * Deprecated use includeItemsFromAllDrives instead.
     */
    includeTeamDriveItems?: boolean;
    /**
     * Maximum number of changes to count per page.
     */
    maxResults?: number;
    /**
     * The token for continuing a previous count request on the next page. This should be set to the value of 'nextPageToken' from the previous response or to the response from the getStartPageToken method.
     */
    pageToken?: string;
    /**
     * A comma-separated list of spaces to query. Supported values are 'drive', 'appContent', 'appDataFolder', 'photos' and 'androidBackup'.
     */
    spaces?: string;
    /**
     * Whether the requesting application supports both My Drives and shared drives.
     */
    supportsAllDrives?: boolean;
    /**
     * Deprecated use supportsAllDrives instead.
     */
    supportsTeamDrives?: boolean;
    /**
     * Deprecated use driveId instead.
     */
    teamDriveId?: string;
  }
  export interface Params$Resource$Changes$Getstartpagetoken
    extends StandardParameters {
    /**
     * The ID of the shared drive for which the starting pageToken for listing future changes from that shared drive will be returned.
     */
    driveId?: string;
    /**
     * Whether the requesting application supports both My Drives and shared drives.
     */
    supportsAllDrives?: boolean;
    /**
     * Deprecated use supportsAllDrives instead.
     */
    supportsTeamDrives?: boolean;
    /**
     * Deprecated use driveId instead.
     */
    teamDriveId?: string;
  }
  export interface Params$Resource$Changes$List extends StandardParameters {
    /**
     * Whether to retrieve all properties, not just those visible to the app.
     */
    allProperties?: boolean;
    /**
     * Deprecated: use 'spaces' instead. Specifies whether to return App Data, non-App Data, or both in query results.
     */
    appDataFilter?: string;
    /**
     * The shared drive from which changes will be returned. If specified the change IDs will be reflective of the shared drive; use the combined drive ID and change ID as an identifier.
     */
    driveId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * A comma separated list of app IDs. If set, the list will also include files inside the app data folder that could be opened with any of the given apps with drive.appdata scope. Requires the ALL_APPDATA scope.
     */
    fileScopeAppIds?: string;
    /**
     * This field is ignored.
     */
    filters?: string;
    /**
     * If true, all badged Labels will be returned in the labelInfo part of the response.
     */
    includeBadgedLabels?: boolean;
    /**
     * Whether changes should include the file resource if the file is still accessible by the user at the time of the request, even when a file was removed from the list of changes and there will be no further change entries for this file.
     */
    includeCorpusRemovals?: boolean;
    /**
     * Whether to include changes indicating that items have been removed from the list of changes, for example by deletion or loss of access.
     */
    includeDeleted?: boolean;
    /**
     * Whether changes to package embedded items should be included in results.
     */
    includeEmbeddedItems?: boolean;
    /**
     * Whether both My Drive and shared drive items should be included in results.
     */
    includeItemsFromAllDrives?: boolean;
    /**
     * A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     */
    includeLabels?: string;
    /**
     * A comma-separated list of names of Categories to include in the response.
     */
    includeMetadataForCategories?: string;
    /**
     * Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     */
    includePermissionsForView?: string;
    /**
     * Whether to include changes outside the My Drive hierarchy in the result. When set to false, changes to files such as those in the Application Data folder or shared files which have not been added to My Drive will be omitted from the result.
     */
    includeSubscribed?: boolean;
    /**
     * Deprecated use includeItemsFromAllDrives instead.
     */
    includeTeamDriveItems?: boolean;
    /**
     * Maximum number of changes to return.
     */
    maxResults?: number;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response or to the response from the getStartPageToken method.
     */
    pageToken?: string;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * Whether the request should be rejected if it would generate an inefficient query.
     */
    rejectInefficientRequests?: boolean;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request should return efficiency info.
     */
    returnEfficiencyInfo?: boolean;
    /**
     * Deprecated: use 'spaces' instead. A comma-separated list of sources to query. Supported values are 'GOOGLE_PHOTOS' and 'ANDROID_BACKUP'.
     */
    sources?: string;
    /**
     * A comma-separated list of spaces to query. Supported values are 'drive', 'appContent', 'appDataFolder', 'photos' and 'androidBackup'.
     */
    spaces?: string;
    /**
     * Deprecated - use pageToken instead.
     */
    startChangeId?: string;
    /**
     * Whether the requesting application supports both My Drives and shared drives.
     */
    supportsAllDrives?: boolean;
    /**
     * Deprecated use supportsAllDrives instead.
     */
    supportsTeamDrives?: boolean;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * Deprecated use driveId instead.
     */
    teamDriveId?: string;
    /**
     * If true, Permissions with type Audience are represented with Domain type.
     */
    useLegacyDomainPermissionBehavior?: boolean;
  }
  export interface Params$Resource$Changes$Watch extends StandardParameters {
    /**
     * Whether to retrieve all properties, not just those visible to the app.
     */
    allProperties?: boolean;
    /**
     * Deprecated: use 'spaces' instead. Specifies whether to return App Data, non-App Data, or both in query results.
     */
    appDataFilter?: string;
    /**
     * The shared drive from which changes will be returned. If specified the change IDs will be reflective of the shared drive; use the combined drive ID and change ID as an identifier.
     */
    driveId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * A comma separated list of app IDs. If set, the list will also include files inside the app data folder that could be opened with any of the given apps with drive.appdata scope. Requires the ALL_APPDATA scope.
     */
    fileScopeAppIds?: string;
    /**
     * This field is ignored.
     */
    filters?: string;
    /**
     * If true, all badged Labels will be returned in the labelInfo part of the response.
     */
    includeBadgedLabels?: boolean;
    /**
     * Whether changes should include the file resource if the file is still accessible by the user at the time of the request, even when a file was removed from the list of changes and there will be no further change entries for this file.
     */
    includeCorpusRemovals?: boolean;
    /**
     * Whether to include changes indicating that items have been removed from the list of changes, for example by deletion or loss of access.
     */
    includeDeleted?: boolean;
    /**
     * Whether changes to package embedded items should be included in results.
     */
    includeEmbeddedItems?: boolean;
    /**
     * Whether both My Drive and shared drive items should be included in results.
     */
    includeItemsFromAllDrives?: boolean;
    /**
     * A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     */
    includeLabels?: string;
    /**
     * A comma-separated list of names of Categories to include in the response.
     */
    includeMetadataForCategories?: string;
    /**
     * Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     */
    includePermissionsForView?: string;
    /**
     * Whether to include changes outside the My Drive hierarchy in the result. When set to false, changes to files such as those in the Application Data folder or shared files which have not been added to My Drive will be omitted from the result.
     */
    includeSubscribed?: boolean;
    /**
     * Deprecated use includeItemsFromAllDrives instead.
     */
    includeTeamDriveItems?: boolean;
    /**
     * Maximum number of changes to return.
     */
    maxResults?: number;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response or to the response from the getStartPageToken method.
     */
    pageToken?: string;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * Whether the request should be rejected if it would generate an inefficient query.
     */
    rejectInefficientRequests?: boolean;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request should return efficiency info.
     */
    returnEfficiencyInfo?: boolean;
    /**
     * Deprecated: use 'spaces' instead. A comma-separated list of sources to query. Supported values are 'GOOGLE_PHOTOS' and 'ANDROID_BACKUP'.
     */
    sources?: string;
    /**
     * A comma-separated list of spaces to query. Supported values are 'drive', 'appContent', 'appDataFolder', 'photos' and 'androidBackup'.
     */
    spaces?: string;
    /**
     * Deprecated - use pageToken instead.
     */
    startChangeId?: string;
    /**
     * Whether the requesting application supports both My Drives and shared drives.
     */
    supportsAllDrives?: boolean;
    /**
     * Deprecated use supportsAllDrives instead.
     */
    supportsTeamDrives?: boolean;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * Deprecated use driveId instead.
     */
    teamDriveId?: string;
    /**
     * If true, Permissions with type Audience are represented with Domain type.
     */
    useLegacyDomainPermissionBehavior?: boolean;

    /**
     * Request body metadata
     */
    requestBody?: Schema$Channel;
  }

  export class Resource$Channels {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * drive.channels.stop
     * @desc Stop watching resources through this channel
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/activity',
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.activity',
     *       'https://www.googleapis.com/auth/drive.activity.readonly',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.apps.readonly',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.photos.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.channels.stop({
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "address": "my_address",
     *       //   "expiration": "my_expiration",
     *       //   "id": "my_id",
     *       //   "kind": "my_kind",
     *       //   "params": {},
     *       //   "payload": false,
     *       //   "resourceId": "my_resourceId",
     *       //   "resourceUri": "my_resourceUri",
     *       //   "token": "my_token",
     *       //   "type": "my_type"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.channels.stop
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {().Channel} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    stop(
      params: Params$Resource$Channels$Stop,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    stop(
      params?: Params$Resource$Channels$Stop,
      options?: MethodOptions
    ): GaxiosPromise<void>;
    stop(
      params: Params$Resource$Channels$Stop,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    stop(
      params: Params$Resource$Channels$Stop,
      options: MethodOptions | BodyResponseCallback<void>,
      callback: BodyResponseCallback<void>
    ): void;
    stop(
      params: Params$Resource$Channels$Stop,
      callback: BodyResponseCallback<void>
    ): void;
    stop(callback: BodyResponseCallback<void>): void;
    stop(
      paramsOrCallback?:
        | Params$Resource$Channels$Stop
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      callback?: BodyResponseCallback<void> | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<void> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Channels$Stop;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Channels$Stop;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/channels/stop').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: [],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<void>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<void>(parameters);
      }
    }
  }

  export interface Params$Resource$Channels$Stop extends StandardParameters {
    /**
     * Request body metadata
     */
    requestBody?: Schema$Channel;
  }

  export class Resource$Children {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * drive.children.delete
     * @desc Removes a child from a folder.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.file',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.children.delete({
     *     // The ID of the child.
     *     childId: 'placeholder-value',
     *     // Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. If the item's last parent is removed, the item will be placed under its owner's root.
     *     enforceSingleParent: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the folder.
     *     folderId: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.children.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.childId The ID of the child.
     * @param {boolean=} params.enforceSingleParent Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. If the item's last parent is removed, the item will be placed under its owner's root.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.folderId The ID of the folder.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params: Params$Resource$Children$Delete,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    delete(
      params?: Params$Resource$Children$Delete,
      options?: MethodOptions
    ): GaxiosPromise<void>;
    delete(
      params: Params$Resource$Children$Delete,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    delete(
      params: Params$Resource$Children$Delete,
      options: MethodOptions | BodyResponseCallback<void>,
      callback: BodyResponseCallback<void>
    ): void;
    delete(
      params: Params$Resource$Children$Delete,
      callback: BodyResponseCallback<void>
    ): void;
    delete(callback: BodyResponseCallback<void>): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Children$Delete
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      callback?: BodyResponseCallback<void> | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<void> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Children$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Children$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/files/{folderId}/children/{childId}'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['folderId', 'childId'],
        pathParams: ['childId', 'folderId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<void>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<void>(parameters);
      }
    }

    /**
     * drive.children.get
     * @desc Gets a specific child reference.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.photos.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.children.get({
     *     // The ID of the child.
     *     childId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the folder.
     *     folderId: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "childLink": "my_childLink",
     *   //   "id": "my_id",
     *   //   "kind": "my_kind",
     *   //   "selfLink": "my_selfLink"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.children.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.childId The ID of the child.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.folderId The ID of the folder.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params: Params$Resource$Children$Get,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    get(
      params?: Params$Resource$Children$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$ChildReference>;
    get(
      params: Params$Resource$Children$Get,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    get(
      params: Params$Resource$Children$Get,
      options: MethodOptions | BodyResponseCallback<Schema$ChildReference>,
      callback: BodyResponseCallback<Schema$ChildReference>
    ): void;
    get(
      params: Params$Resource$Children$Get,
      callback: BodyResponseCallback<Schema$ChildReference>
    ): void;
    get(callback: BodyResponseCallback<Schema$ChildReference>): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Children$Get
        | BodyResponseCallback<Schema$ChildReference>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$ChildReference>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$ChildReference>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$ChildReference> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Children$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Children$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/files/{folderId}/children/{childId}'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['folderId', 'childId'],
        pathParams: ['childId', 'folderId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$ChildReference>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$ChildReference>(parameters);
      }
    }

    /**
     * drive.children.insert
     * @desc Inserts a file into a folder.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.file',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.children.insert({
     *     // Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. If the child's owner makes the request, the child will be removed from all current folders and placed in the requested folder. Any other requests that increase the number of the child's parents will fail, except when the canAddMyDriveParent file capability is true and a single parent is being added.
     *     enforceSingleParent: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the folder.
     *     folderId: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the requesting application supports both My Drives and shared drives.
     *     supportsAllDrives: 'placeholder-value',
     *     // Deprecated use supportsAllDrives instead.
     *     supportsTeamDrives: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "childLink": "my_childLink",
     *       //   "id": "my_id",
     *       //   "kind": "my_kind",
     *       //   "selfLink": "my_selfLink"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "childLink": "my_childLink",
     *   //   "id": "my_id",
     *   //   "kind": "my_kind",
     *   //   "selfLink": "my_selfLink"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.children.insert
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.enforceSingleParent Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. If the child's owner makes the request, the child will be removed from all current folders and placed in the requested folder. Any other requests that increase the number of the child's parents will fail, except when the canAddMyDriveParent file capability is true and a single parent is being added.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.folderId The ID of the folder.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {boolean=} params.supportsAllDrives Whether the requesting application supports both My Drives and shared drives.
     * @param {boolean=} params.supportsTeamDrives Deprecated use supportsAllDrives instead.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {().ChildReference} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    insert(
      params: Params$Resource$Children$Insert,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    insert(
      params?: Params$Resource$Children$Insert,
      options?: MethodOptions
    ): GaxiosPromise<Schema$ChildReference>;
    insert(
      params: Params$Resource$Children$Insert,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    insert(
      params: Params$Resource$Children$Insert,
      options: MethodOptions | BodyResponseCallback<Schema$ChildReference>,
      callback: BodyResponseCallback<Schema$ChildReference>
    ): void;
    insert(
      params: Params$Resource$Children$Insert,
      callback: BodyResponseCallback<Schema$ChildReference>
    ): void;
    insert(callback: BodyResponseCallback<Schema$ChildReference>): void;
    insert(
      paramsOrCallback?:
        | Params$Resource$Children$Insert
        | BodyResponseCallback<Schema$ChildReference>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$ChildReference>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$ChildReference>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$ChildReference> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Children$Insert;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Children$Insert;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/files/{folderId}/children'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['folderId'],
        pathParams: ['folderId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$ChildReference>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$ChildReference>(parameters);
      }
    }

    /**
     * drive.children.list
     * @desc Lists a folder's children.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.photos.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.children.list({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the folder.
     *     folderId: 'placeholder-value',
     *     // Maximum number of children to return.
     *     maxResults: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // A comma-separated list of sort keys. Valid keys are 'createdDate', 'folder', 'lastViewedByMeDate', 'modifiedByMeDate', 'modifiedDate', 'quotaBytesUsed', 'recency', 'sharedWithMeDate', 'starred', and 'title'. Each key sorts ascending by default, but may be reversed with the 'desc' modifier. Example usage: ?orderBy=folder,modifiedDate desc,title. Please note that there is a current limitation for users with approximately one million files in which the requested sort order is ignored.
     *     orderBy: 'placeholder-value',
     *     // Page token for children.
     *     pageToken: 'placeholder-value',
     *     // Query string for searching children.
     *     q: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // DEPRECATED; use orderBy instead. Whether to reverse the order of the results if sortBy is set.
     *     reverseSort: 'placeholder-value',
     *     // DEPRECATED; use orderBy instead. The list of sort orders to apply after sortBy.
     *     secondarySortBy: 'w+(,w+)*',
     *     // DEPRECATED; use orderBy instead. The sort order for returned files.
     *     sortBy: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "etag": "my_etag",
     *   //   "items": [],
     *   //   "kind": "my_kind",
     *   //   "nextLink": "my_nextLink",
     *   //   "nextPageToken": "my_nextPageToken",
     *   //   "selfLink": "my_selfLink"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.children.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.folderId The ID of the folder.
     * @param {integer=} params.maxResults Maximum number of children to return.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.orderBy A comma-separated list of sort keys. Valid keys are 'createdDate', 'folder', 'lastViewedByMeDate', 'modifiedByMeDate', 'modifiedDate', 'quotaBytesUsed', 'recency', 'sharedWithMeDate', 'starred', and 'title'. Each key sorts ascending by default, but may be reversed with the 'desc' modifier. Example usage: ?orderBy=folder,modifiedDate desc,title. Please note that there is a current limitation for users with approximately one million files in which the requested sort order is ignored.
     * @param {string=} params.pageToken Page token for children.
     * @param {string=} params.q Query string for searching children.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {boolean=} params.reverseSort DEPRECATED; use orderBy instead. Whether to reverse the order of the results if sortBy is set.
     * @param {string=} params.secondarySortBy DEPRECATED; use orderBy instead. The list of sort orders to apply after sortBy.
     * @param {string=} params.sortBy DEPRECATED; use orderBy instead. The sort order for returned files.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params: Params$Resource$Children$List,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    list(
      params?: Params$Resource$Children$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$ChildList>;
    list(
      params: Params$Resource$Children$List,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    list(
      params: Params$Resource$Children$List,
      options: MethodOptions | BodyResponseCallback<Schema$ChildList>,
      callback: BodyResponseCallback<Schema$ChildList>
    ): void;
    list(
      params: Params$Resource$Children$List,
      callback: BodyResponseCallback<Schema$ChildList>
    ): void;
    list(callback: BodyResponseCallback<Schema$ChildList>): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Children$List
        | BodyResponseCallback<Schema$ChildList>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$ChildList>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$ChildList>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$ChildList> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Children$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Children$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/files/{folderId}/children'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['folderId'],
        pathParams: ['folderId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$ChildList>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$ChildList>(parameters);
      }
    }
  }

  export interface Params$Resource$Children$Delete extends StandardParameters {
    /**
     * The ID of the child.
     */
    childId?: string;
    /**
     * Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. If the item's last parent is removed, the item will be placed under its owner's root.
     */
    enforceSingleParent?: boolean;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the folder.
     */
    folderId?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }
  export interface Params$Resource$Children$Get extends StandardParameters {
    /**
     * The ID of the child.
     */
    childId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the folder.
     */
    folderId?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }
  export interface Params$Resource$Children$Insert extends StandardParameters {
    /**
     * Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. If the child's owner makes the request, the child will be removed from all current folders and placed in the requested folder. Any other requests that increase the number of the child's parents will fail, except when the canAddMyDriveParent file capability is true and a single parent is being added.
     */
    enforceSingleParent?: boolean;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the folder.
     */
    folderId?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the requesting application supports both My Drives and shared drives.
     */
    supportsAllDrives?: boolean;
    /**
     * Deprecated use supportsAllDrives instead.
     */
    supportsTeamDrives?: boolean;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;

    /**
     * Request body metadata
     */
    requestBody?: Schema$ChildReference;
  }
  export interface Params$Resource$Children$List extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the folder.
     */
    folderId?: string;
    /**
     * Maximum number of children to return.
     */
    maxResults?: number;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * A comma-separated list of sort keys. Valid keys are 'createdDate', 'folder', 'lastViewedByMeDate', 'modifiedByMeDate', 'modifiedDate', 'quotaBytesUsed', 'recency', 'sharedWithMeDate', 'starred', and 'title'. Each key sorts ascending by default, but may be reversed with the 'desc' modifier. Example usage: ?orderBy=folder,modifiedDate desc,title. Please note that there is a current limitation for users with approximately one million files in which the requested sort order is ignored.
     */
    orderBy?: string;
    /**
     * Page token for children.
     */
    pageToken?: string;
    /**
     * Query string for searching children.
     */
    q?: string;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * DEPRECATED; use orderBy instead. Whether to reverse the order of the results if sortBy is set.
     */
    reverseSort?: boolean;
    /**
     * DEPRECATED; use orderBy instead. The list of sort orders to apply after sortBy.
     */
    secondarySortBy?: string;
    /**
     * DEPRECATED; use orderBy instead. The sort order for returned files.
     */
    sortBy?: string;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }

  export class Resource$Comments {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * drive.comments.delete
     * @desc Deletes a comment.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.file',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.comments.delete({
     *     // The ID of the comment.
     *     commentId: 'placeholder-value',
     *     // The ID of the file.
     *     fileId: 'placeholder-value',
     *   });
     *   console.log(res.data);
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.comments.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.commentId The ID of the comment.
     * @param {string} params.fileId The ID of the file.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params: Params$Resource$Comments$Delete,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    delete(
      params?: Params$Resource$Comments$Delete,
      options?: MethodOptions
    ): GaxiosPromise<void>;
    delete(
      params: Params$Resource$Comments$Delete,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    delete(
      params: Params$Resource$Comments$Delete,
      options: MethodOptions | BodyResponseCallback<void>,
      callback: BodyResponseCallback<void>
    ): void;
    delete(
      params: Params$Resource$Comments$Delete,
      callback: BodyResponseCallback<void>
    ): void;
    delete(callback: BodyResponseCallback<void>): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Comments$Delete
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      callback?: BodyResponseCallback<void> | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<void> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Comments$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Comments$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/files/{fileId}/comments/{commentId}'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'commentId'],
        pathParams: ['commentId', 'fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<void>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<void>(parameters);
      }
    }

    /**
     * drive.comments.get
     * @desc Gets a comment by ID.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.comments.get({
     *     // The ID of the comment.
     *     commentId: 'placeholder-value',
     *     // The ID of the file.
     *     fileId: 'placeholder-value',
     *     // If set, this will succeed when retrieving a deleted comment, and will include any deleted replies.
     *     includeDeleted: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "anchor": "my_anchor",
     *   //   "author": {},
     *   //   "commentId": "my_commentId",
     *   //   "content": "my_content",
     *   //   "context": {},
     *   //   "createdDate": "my_createdDate",
     *   //   "deleted": false,
     *   //   "fileId": "my_fileId",
     *   //   "fileTitle": "my_fileTitle",
     *   //   "htmlContent": "my_htmlContent",
     *   //   "kind": "my_kind",
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "replies": [],
     *   //   "selfLink": "my_selfLink",
     *   //   "status": "my_status",
     *   //   "suggestionId": "my_suggestionId"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.comments.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.commentId The ID of the comment.
     * @param {string} params.fileId The ID of the file.
     * @param {boolean=} params.includeDeleted If set, this will succeed when retrieving a deleted comment, and will include any deleted replies.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params: Params$Resource$Comments$Get,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    get(
      params?: Params$Resource$Comments$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Comment>;
    get(
      params: Params$Resource$Comments$Get,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    get(
      params: Params$Resource$Comments$Get,
      options: MethodOptions | BodyResponseCallback<Schema$Comment>,
      callback: BodyResponseCallback<Schema$Comment>
    ): void;
    get(
      params: Params$Resource$Comments$Get,
      callback: BodyResponseCallback<Schema$Comment>
    ): void;
    get(callback: BodyResponseCallback<Schema$Comment>): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Comments$Get
        | BodyResponseCallback<Schema$Comment>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Comment>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Comment>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Comment> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Comments$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Comments$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/files/{fileId}/comments/{commentId}'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'commentId'],
        pathParams: ['commentId', 'fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Comment>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Comment>(parameters);
      }
    }

    /**
     * drive.comments.insert
     * @desc Creates a new comment on the given file.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.file',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.comments.insert({
     *     // The ID of the file.
     *     fileId: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "anchor": "my_anchor",
     *       //   "author": {},
     *       //   "commentId": "my_commentId",
     *       //   "content": "my_content",
     *       //   "context": {},
     *       //   "createdDate": "my_createdDate",
     *       //   "deleted": false,
     *       //   "fileId": "my_fileId",
     *       //   "fileTitle": "my_fileTitle",
     *       //   "htmlContent": "my_htmlContent",
     *       //   "kind": "my_kind",
     *       //   "modifiedDate": "my_modifiedDate",
     *       //   "replies": [],
     *       //   "selfLink": "my_selfLink",
     *       //   "status": "my_status",
     *       //   "suggestionId": "my_suggestionId"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "anchor": "my_anchor",
     *   //   "author": {},
     *   //   "commentId": "my_commentId",
     *   //   "content": "my_content",
     *   //   "context": {},
     *   //   "createdDate": "my_createdDate",
     *   //   "deleted": false,
     *   //   "fileId": "my_fileId",
     *   //   "fileTitle": "my_fileTitle",
     *   //   "htmlContent": "my_htmlContent",
     *   //   "kind": "my_kind",
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "replies": [],
     *   //   "selfLink": "my_selfLink",
     *   //   "status": "my_status",
     *   //   "suggestionId": "my_suggestionId"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.comments.insert
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.fileId The ID of the file.
     * @param {().Comment} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    insert(
      params: Params$Resource$Comments$Insert,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    insert(
      params?: Params$Resource$Comments$Insert,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Comment>;
    insert(
      params: Params$Resource$Comments$Insert,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    insert(
      params: Params$Resource$Comments$Insert,
      options: MethodOptions | BodyResponseCallback<Schema$Comment>,
      callback: BodyResponseCallback<Schema$Comment>
    ): void;
    insert(
      params: Params$Resource$Comments$Insert,
      callback: BodyResponseCallback<Schema$Comment>
    ): void;
    insert(callback: BodyResponseCallback<Schema$Comment>): void;
    insert(
      paramsOrCallback?:
        | Params$Resource$Comments$Insert
        | BodyResponseCallback<Schema$Comment>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Comment>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Comment>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Comment> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Comments$Insert;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Comments$Insert;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files/{fileId}/comments').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Comment>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Comment>(parameters);
      }
    }

    /**
     * drive.comments.list
     * @desc Lists a file's comments.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.comments.list({
     *     // The ID of the file.
     *     fileId: 'placeholder-value',
     *     // If set, all comments and replies, including deleted comments and replies (with content stripped) will be returned.
     *     includeDeleted: 'placeholder-value',
     *     // If set, suggested edits will be included in the response.
     *     includeSuggestions: 'placeholder-value',
     *     // The maximum number of discussions to include in the response, used for paging.
     *     maxResults: 'placeholder-value',
     *     // The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.
     *     pageToken: 'placeholder-value',
     *     // Only discussions that were updated after this timestamp will be returned. Formatted as an RFC 3339 timestamp.
     *     updatedMin: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "items": [],
     *   //   "kind": "my_kind",
     *   //   "nextLink": "my_nextLink",
     *   //   "nextPageToken": "my_nextPageToken",
     *   //   "selfLink": "my_selfLink"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.comments.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.fileId The ID of the file.
     * @param {boolean=} params.includeDeleted If set, all comments and replies, including deleted comments and replies (with content stripped) will be returned.
     * @param {boolean=} params.includeSuggestions If set, suggested edits will be included in the response.
     * @param {integer=} params.maxResults The maximum number of discussions to include in the response, used for paging.
     * @param {string=} params.pageToken The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.
     * @param {string=} params.updatedMin Only discussions that were updated after this timestamp will be returned. Formatted as an RFC 3339 timestamp.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params: Params$Resource$Comments$List,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    list(
      params?: Params$Resource$Comments$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$CommentList>;
    list(
      params: Params$Resource$Comments$List,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    list(
      params: Params$Resource$Comments$List,
      options: MethodOptions | BodyResponseCallback<Schema$CommentList>,
      callback: BodyResponseCallback<Schema$CommentList>
    ): void;
    list(
      params: Params$Resource$Comments$List,
      callback: BodyResponseCallback<Schema$CommentList>
    ): void;
    list(callback: BodyResponseCallback<Schema$CommentList>): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Comments$List
        | BodyResponseCallback<Schema$CommentList>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$CommentList>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$CommentList>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$CommentList> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Comments$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Comments$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files/{fileId}/comments').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$CommentList>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$CommentList>(parameters);
      }
    }

    /**
     * drive.comments.update
     * @desc Updates an existing comment.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.file',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.comments.update({
     *     // The ID of the comment.
     *     commentId: 'placeholder-value',
     *     // The ID of the file.
     *     fileId: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "anchor": "my_anchor",
     *       //   "author": {},
     *       //   "commentId": "my_commentId",
     *       //   "content": "my_content",
     *       //   "context": {},
     *       //   "createdDate": "my_createdDate",
     *       //   "deleted": false,
     *       //   "fileId": "my_fileId",
     *       //   "fileTitle": "my_fileTitle",
     *       //   "htmlContent": "my_htmlContent",
     *       //   "kind": "my_kind",
     *       //   "modifiedDate": "my_modifiedDate",
     *       //   "replies": [],
     *       //   "selfLink": "my_selfLink",
     *       //   "status": "my_status",
     *       //   "suggestionId": "my_suggestionId"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "anchor": "my_anchor",
     *   //   "author": {},
     *   //   "commentId": "my_commentId",
     *   //   "content": "my_content",
     *   //   "context": {},
     *   //   "createdDate": "my_createdDate",
     *   //   "deleted": false,
     *   //   "fileId": "my_fileId",
     *   //   "fileTitle": "my_fileTitle",
     *   //   "htmlContent": "my_htmlContent",
     *   //   "kind": "my_kind",
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "replies": [],
     *   //   "selfLink": "my_selfLink",
     *   //   "status": "my_status",
     *   //   "suggestionId": "my_suggestionId"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.comments.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.commentId The ID of the comment.
     * @param {string} params.fileId The ID of the file.
     * @param {().Comment} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params: Params$Resource$Comments$Update,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    update(
      params?: Params$Resource$Comments$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Comment>;
    update(
      params: Params$Resource$Comments$Update,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    update(
      params: Params$Resource$Comments$Update,
      options: MethodOptions | BodyResponseCallback<Schema$Comment>,
      callback: BodyResponseCallback<Schema$Comment>
    ): void;
    update(
      params: Params$Resource$Comments$Update,
      callback: BodyResponseCallback<Schema$Comment>
    ): void;
    update(callback: BodyResponseCallback<Schema$Comment>): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Comments$Update
        | BodyResponseCallback<Schema$Comment>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Comment>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Comment>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Comment> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Comments$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Comments$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/files/{fileId}/comments/{commentId}'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'commentId'],
        pathParams: ['commentId', 'fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Comment>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Comment>(parameters);
      }
    }
  }

  export interface Params$Resource$Comments$Delete extends StandardParameters {
    /**
     * The ID of the comment.
     */
    commentId?: string;
    /**
     * The ID of the file.
     */
    fileId?: string;
  }
  export interface Params$Resource$Comments$Get extends StandardParameters {
    /**
     * The ID of the comment.
     */
    commentId?: string;
    /**
     * The ID of the file.
     */
    fileId?: string;
    /**
     * If set, this will succeed when retrieving a deleted comment, and will include any deleted replies.
     */
    includeDeleted?: boolean;
  }
  export interface Params$Resource$Comments$Insert extends StandardParameters {
    /**
     * The ID of the file.
     */
    fileId?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$Comment;
  }
  export interface Params$Resource$Comments$List extends StandardParameters {
    /**
     * The ID of the file.
     */
    fileId?: string;
    /**
     * If set, all comments and replies, including deleted comments and replies (with content stripped) will be returned.
     */
    includeDeleted?: boolean;
    /**
     * If set, suggested edits will be included in the response.
     */
    includeSuggestions?: boolean;
    /**
     * The maximum number of discussions to include in the response, used for paging.
     */
    maxResults?: number;
    /**
     * The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.
     */
    pageToken?: string;
    /**
     * Only discussions that were updated after this timestamp will be returned. Formatted as an RFC 3339 timestamp.
     */
    updatedMin?: string;
  }
  export interface Params$Resource$Comments$Update extends StandardParameters {
    /**
     * The ID of the comment.
     */
    commentId?: string;
    /**
     * The ID of the file.
     */
    fileId?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$Comment;
  }

  export class Resource$Drives {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * drive.drives.changeCategoryReferences
     * @desc Allows adding, removing, and updating references to Categories on a shared drive.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.drives.changeCategoryReferences({
     *     // The ID of the shared drive
     *     driveId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the shared drive belongs.
     *     useDomainAdminAccess: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "addCategoryReferences": [],
     *       //   "kind": "my_kind",
     *       //   "removeCategoryReferences": []
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "backgroundImageFile": {},
     *   //   "backgroundImageGridViewLink": "my_backgroundImageGridViewLink",
     *   //   "backgroundImageLink": "my_backgroundImageLink",
     *   //   "backgroundImageListViewLink": "my_backgroundImageListViewLink",
     *   //   "capabilities": {},
     *   //   "categoryReferences": [],
     *   //   "colorRgb": "my_colorRgb",
     *   //   "createdDate": "my_createdDate",
     *   //   "creator": {},
     *   //   "customerId": "my_customerId",
     *   //   "hidden": false,
     *   //   "id": "my_id",
     *   //   "kind": "my_kind",
     *   //   "name": "my_name",
     *   //   "optOutOfSecureLinkUpdateForAllFilesEnabled": false,
     *   //   "organizationDisplayName": "my_organizationDisplayName",
     *   //   "permissionsSummary": {},
     *   //   "primaryDomainName": "my_primaryDomainName",
     *   //   "quotaInfo": {},
     *   //   "recursiveFileCount": "my_recursiveFileCount",
     *   //   "recursiveFolderCount": "my_recursiveFolderCount",
     *   //   "restrictions": {},
     *   //   "restrictionsOverride": {},
     *   //   "themeId": "my_themeId",
     *   //   "trusted": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.drives.changeCategoryReferences
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.driveId The ID of the shared drive
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {boolean=} params.useDomainAdminAccess Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the shared drive belongs.
     * @param {().DriveCategoryChangeRequest} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    changeCategoryReferences(
      params: Params$Resource$Drives$Changecategoryreferences,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    changeCategoryReferences(
      params?: Params$Resource$Drives$Changecategoryreferences,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Drive>;
    changeCategoryReferences(
      params: Params$Resource$Drives$Changecategoryreferences,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    changeCategoryReferences(
      params: Params$Resource$Drives$Changecategoryreferences,
      options: MethodOptions | BodyResponseCallback<Schema$Drive>,
      callback: BodyResponseCallback<Schema$Drive>
    ): void;
    changeCategoryReferences(
      params: Params$Resource$Drives$Changecategoryreferences,
      callback: BodyResponseCallback<Schema$Drive>
    ): void;
    changeCategoryReferences(
      callback: BodyResponseCallback<Schema$Drive>
    ): void;
    changeCategoryReferences(
      paramsOrCallback?:
        | Params$Resource$Drives$Changecategoryreferences
        | BodyResponseCallback<Schema$Drive>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Drive>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Drive>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Drive> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Drives$Changecategoryreferences;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Drives$Changecategoryreferences;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl +
              '/drive/v2.1beta/drives/{driveId}/changeCategoryReferences'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['driveId'],
        pathParams: ['driveId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Drive>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Drive>(parameters);
      }
    }

    /**
     * drive.drives.delete
     * @desc Permanently deletes a shared drive for which the user is an organizer. The shared drive cannot contain any untrashed items.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.drives.delete({
     *     // The ID of the shared drive.
     *     driveId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.drives.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.driveId The ID of the shared drive.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params: Params$Resource$Drives$Delete,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    delete(
      params?: Params$Resource$Drives$Delete,
      options?: MethodOptions
    ): GaxiosPromise<void>;
    delete(
      params: Params$Resource$Drives$Delete,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    delete(
      params: Params$Resource$Drives$Delete,
      options: MethodOptions | BodyResponseCallback<void>,
      callback: BodyResponseCallback<void>
    ): void;
    delete(
      params: Params$Resource$Drives$Delete,
      callback: BodyResponseCallback<void>
    ): void;
    delete(callback: BodyResponseCallback<void>): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Drives$Delete
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      callback?: BodyResponseCallback<void> | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<void> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Drives$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Drives$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/drives/{driveId}').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['driveId'],
        pathParams: ['driveId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<void>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<void>(parameters);
      }
    }

    /**
     * drive.drives.get
     * @desc Gets a shared drive's metadata by ID.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.drives.get({
     *     // The ID of the shared drive
     *     driveId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the shared drive belongs.
     *     useDomainAdminAccess: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "backgroundImageFile": {},
     *   //   "backgroundImageGridViewLink": "my_backgroundImageGridViewLink",
     *   //   "backgroundImageLink": "my_backgroundImageLink",
     *   //   "backgroundImageListViewLink": "my_backgroundImageListViewLink",
     *   //   "capabilities": {},
     *   //   "categoryReferences": [],
     *   //   "colorRgb": "my_colorRgb",
     *   //   "createdDate": "my_createdDate",
     *   //   "creator": {},
     *   //   "customerId": "my_customerId",
     *   //   "hidden": false,
     *   //   "id": "my_id",
     *   //   "kind": "my_kind",
     *   //   "name": "my_name",
     *   //   "optOutOfSecureLinkUpdateForAllFilesEnabled": false,
     *   //   "organizationDisplayName": "my_organizationDisplayName",
     *   //   "permissionsSummary": {},
     *   //   "primaryDomainName": "my_primaryDomainName",
     *   //   "quotaInfo": {},
     *   //   "recursiveFileCount": "my_recursiveFileCount",
     *   //   "recursiveFolderCount": "my_recursiveFolderCount",
     *   //   "restrictions": {},
     *   //   "restrictionsOverride": {},
     *   //   "themeId": "my_themeId",
     *   //   "trusted": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.drives.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.driveId The ID of the shared drive
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {boolean=} params.useDomainAdminAccess Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the shared drive belongs.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params: Params$Resource$Drives$Get,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    get(
      params?: Params$Resource$Drives$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Drive>;
    get(
      params: Params$Resource$Drives$Get,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    get(
      params: Params$Resource$Drives$Get,
      options: MethodOptions | BodyResponseCallback<Schema$Drive>,
      callback: BodyResponseCallback<Schema$Drive>
    ): void;
    get(
      params: Params$Resource$Drives$Get,
      callback: BodyResponseCallback<Schema$Drive>
    ): void;
    get(callback: BodyResponseCallback<Schema$Drive>): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Drives$Get
        | BodyResponseCallback<Schema$Drive>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Drive>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Drive>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Drive> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Drives$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Drives$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/drives/{driveId}').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['driveId'],
        pathParams: ['driveId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Drive>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Drive>(parameters);
      }
    }

    /**
     * drive.drives.hide
     * @desc Hides a shared drive from the default view.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.drives.hide({
     *     // The ID of the shared drive.
     *     driveId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "backgroundImageFile": {},
     *   //   "backgroundImageGridViewLink": "my_backgroundImageGridViewLink",
     *   //   "backgroundImageLink": "my_backgroundImageLink",
     *   //   "backgroundImageListViewLink": "my_backgroundImageListViewLink",
     *   //   "capabilities": {},
     *   //   "categoryReferences": [],
     *   //   "colorRgb": "my_colorRgb",
     *   //   "createdDate": "my_createdDate",
     *   //   "creator": {},
     *   //   "customerId": "my_customerId",
     *   //   "hidden": false,
     *   //   "id": "my_id",
     *   //   "kind": "my_kind",
     *   //   "name": "my_name",
     *   //   "optOutOfSecureLinkUpdateForAllFilesEnabled": false,
     *   //   "organizationDisplayName": "my_organizationDisplayName",
     *   //   "permissionsSummary": {},
     *   //   "primaryDomainName": "my_primaryDomainName",
     *   //   "quotaInfo": {},
     *   //   "recursiveFileCount": "my_recursiveFileCount",
     *   //   "recursiveFolderCount": "my_recursiveFolderCount",
     *   //   "restrictions": {},
     *   //   "restrictionsOverride": {},
     *   //   "themeId": "my_themeId",
     *   //   "trusted": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.drives.hide
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.driveId The ID of the shared drive.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    hide(
      params: Params$Resource$Drives$Hide,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    hide(
      params?: Params$Resource$Drives$Hide,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Drive>;
    hide(
      params: Params$Resource$Drives$Hide,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    hide(
      params: Params$Resource$Drives$Hide,
      options: MethodOptions | BodyResponseCallback<Schema$Drive>,
      callback: BodyResponseCallback<Schema$Drive>
    ): void;
    hide(
      params: Params$Resource$Drives$Hide,
      callback: BodyResponseCallback<Schema$Drive>
    ): void;
    hide(callback: BodyResponseCallback<Schema$Drive>): void;
    hide(
      paramsOrCallback?:
        | Params$Resource$Drives$Hide
        | BodyResponseCallback<Schema$Drive>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Drive>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Drive>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Drive> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Drives$Hide;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Drives$Hide;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/drives/{driveId}/hide').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['driveId'],
        pathParams: ['driveId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Drive>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Drive>(parameters);
      }
    }

    /**
     * drive.drives.insert
     * @desc Creates a new shared drive.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.drives.insert({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // An ID, such as a random UUID, which uniquely identifies this user's request for idempotent creation of a shared drive. A repeated request by the same user and with the same request ID will avoid creating duplicates by attempting to create the same shared drive. If the shared drive already exists a 409 error will be returned.
     *     requestId: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "backgroundImageFile": {},
     *       //   "backgroundImageGridViewLink": "my_backgroundImageGridViewLink",
     *       //   "backgroundImageLink": "my_backgroundImageLink",
     *       //   "backgroundImageListViewLink": "my_backgroundImageListViewLink",
     *       //   "capabilities": {},
     *       //   "categoryReferences": [],
     *       //   "colorRgb": "my_colorRgb",
     *       //   "createdDate": "my_createdDate",
     *       //   "creator": {},
     *       //   "customerId": "my_customerId",
     *       //   "hidden": false,
     *       //   "id": "my_id",
     *       //   "kind": "my_kind",
     *       //   "name": "my_name",
     *       //   "optOutOfSecureLinkUpdateForAllFilesEnabled": false,
     *       //   "organizationDisplayName": "my_organizationDisplayName",
     *       //   "permissionsSummary": {},
     *       //   "primaryDomainName": "my_primaryDomainName",
     *       //   "quotaInfo": {},
     *       //   "recursiveFileCount": "my_recursiveFileCount",
     *       //   "recursiveFolderCount": "my_recursiveFolderCount",
     *       //   "restrictions": {},
     *       //   "restrictionsOverride": {},
     *       //   "themeId": "my_themeId",
     *       //   "trusted": false
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "backgroundImageFile": {},
     *   //   "backgroundImageGridViewLink": "my_backgroundImageGridViewLink",
     *   //   "backgroundImageLink": "my_backgroundImageLink",
     *   //   "backgroundImageListViewLink": "my_backgroundImageListViewLink",
     *   //   "capabilities": {},
     *   //   "categoryReferences": [],
     *   //   "colorRgb": "my_colorRgb",
     *   //   "createdDate": "my_createdDate",
     *   //   "creator": {},
     *   //   "customerId": "my_customerId",
     *   //   "hidden": false,
     *   //   "id": "my_id",
     *   //   "kind": "my_kind",
     *   //   "name": "my_name",
     *   //   "optOutOfSecureLinkUpdateForAllFilesEnabled": false,
     *   //   "organizationDisplayName": "my_organizationDisplayName",
     *   //   "permissionsSummary": {},
     *   //   "primaryDomainName": "my_primaryDomainName",
     *   //   "quotaInfo": {},
     *   //   "recursiveFileCount": "my_recursiveFileCount",
     *   //   "recursiveFolderCount": "my_recursiveFolderCount",
     *   //   "restrictions": {},
     *   //   "restrictionsOverride": {},
     *   //   "themeId": "my_themeId",
     *   //   "trusted": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.drives.insert
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {string} params.requestId An ID, such as a random UUID, which uniquely identifies this user's request for idempotent creation of a shared drive. A repeated request by the same user and with the same request ID will avoid creating duplicates by attempting to create the same shared drive. If the shared drive already exists a 409 error will be returned.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {().Drive} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    insert(
      params: Params$Resource$Drives$Insert,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    insert(
      params?: Params$Resource$Drives$Insert,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Drive>;
    insert(
      params: Params$Resource$Drives$Insert,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    insert(
      params: Params$Resource$Drives$Insert,
      options: MethodOptions | BodyResponseCallback<Schema$Drive>,
      callback: BodyResponseCallback<Schema$Drive>
    ): void;
    insert(
      params: Params$Resource$Drives$Insert,
      callback: BodyResponseCallback<Schema$Drive>
    ): void;
    insert(callback: BodyResponseCallback<Schema$Drive>): void;
    insert(
      paramsOrCallback?:
        | Params$Resource$Drives$Insert
        | BodyResponseCallback<Schema$Drive>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Drive>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Drive>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Drive> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Drives$Insert;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Drives$Insert;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/drives/{requestId}').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['requestId'],
        pathParams: ['requestId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Drive>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Drive>(parameters);
      }
    }

    /**
     * drive.drives.list
     * @desc Lists the user's shared drives.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.drives.list({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // Maximum number of shared drives to return.
     *     maxResults: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // Page token for shared drives.
     *     pageToken: 'placeholder-value',
     *     // Query string for searching shared drives.
     *     q: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // Issue the request as a domain administrator; if set to true, then all shared drives of the domain in which the requester is an administrator are returned.
     *     useDomainAdminAccess: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "items": [],
     *   //   "kind": "my_kind",
     *   //   "nextPageToken": "my_nextPageToken"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.drives.list
     * @memberOf! ()
     *
     * @param {object=} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.maxResults Maximum number of shared drives to return.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.pageToken Page token for shared drives.
     * @param {string=} params.q Query string for searching shared drives.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {boolean=} params.useDomainAdminAccess Issue the request as a domain administrator; if set to true, then all shared drives of the domain in which the requester is an administrator are returned.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params: Params$Resource$Drives$List,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    list(
      params?: Params$Resource$Drives$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$DriveList>;
    list(
      params: Params$Resource$Drives$List,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    list(
      params: Params$Resource$Drives$List,
      options: MethodOptions | BodyResponseCallback<Schema$DriveList>,
      callback: BodyResponseCallback<Schema$DriveList>
    ): void;
    list(
      params: Params$Resource$Drives$List,
      callback: BodyResponseCallback<Schema$DriveList>
    ): void;
    list(callback: BodyResponseCallback<Schema$DriveList>): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Drives$List
        | BodyResponseCallback<Schema$DriveList>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$DriveList>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$DriveList>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$DriveList> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Drives$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Drives$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/drives').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: [],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$DriveList>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$DriveList>(parameters);
      }
    }

    /**
     * drive.drives.unhide
     * @desc Restores a shared drive to the default view.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.drives.unhide({
     *     // The ID of the shared drive.
     *     driveId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "backgroundImageFile": {},
     *   //   "backgroundImageGridViewLink": "my_backgroundImageGridViewLink",
     *   //   "backgroundImageLink": "my_backgroundImageLink",
     *   //   "backgroundImageListViewLink": "my_backgroundImageListViewLink",
     *   //   "capabilities": {},
     *   //   "categoryReferences": [],
     *   //   "colorRgb": "my_colorRgb",
     *   //   "createdDate": "my_createdDate",
     *   //   "creator": {},
     *   //   "customerId": "my_customerId",
     *   //   "hidden": false,
     *   //   "id": "my_id",
     *   //   "kind": "my_kind",
     *   //   "name": "my_name",
     *   //   "optOutOfSecureLinkUpdateForAllFilesEnabled": false,
     *   //   "organizationDisplayName": "my_organizationDisplayName",
     *   //   "permissionsSummary": {},
     *   //   "primaryDomainName": "my_primaryDomainName",
     *   //   "quotaInfo": {},
     *   //   "recursiveFileCount": "my_recursiveFileCount",
     *   //   "recursiveFolderCount": "my_recursiveFolderCount",
     *   //   "restrictions": {},
     *   //   "restrictionsOverride": {},
     *   //   "themeId": "my_themeId",
     *   //   "trusted": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.drives.unhide
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.driveId The ID of the shared drive.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    unhide(
      params: Params$Resource$Drives$Unhide,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    unhide(
      params?: Params$Resource$Drives$Unhide,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Drive>;
    unhide(
      params: Params$Resource$Drives$Unhide,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    unhide(
      params: Params$Resource$Drives$Unhide,
      options: MethodOptions | BodyResponseCallback<Schema$Drive>,
      callback: BodyResponseCallback<Schema$Drive>
    ): void;
    unhide(
      params: Params$Resource$Drives$Unhide,
      callback: BodyResponseCallback<Schema$Drive>
    ): void;
    unhide(callback: BodyResponseCallback<Schema$Drive>): void;
    unhide(
      paramsOrCallback?:
        | Params$Resource$Drives$Unhide
        | BodyResponseCallback<Schema$Drive>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Drive>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Drive>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Drive> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Drives$Unhide;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Drives$Unhide;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/drives/{driveId}/unhide').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['driveId'],
        pathParams: ['driveId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Drive>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Drive>(parameters);
      }
    }

    /**
     * drive.drives.update
     * @desc Updates the metadata for a shared drive.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.drives.update({
     *     // The ID of the shared drive.
     *     driveId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the shared drive belongs.
     *     useDomainAdminAccess: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "backgroundImageFile": {},
     *       //   "backgroundImageGridViewLink": "my_backgroundImageGridViewLink",
     *       //   "backgroundImageLink": "my_backgroundImageLink",
     *       //   "backgroundImageListViewLink": "my_backgroundImageListViewLink",
     *       //   "capabilities": {},
     *       //   "categoryReferences": [],
     *       //   "colorRgb": "my_colorRgb",
     *       //   "createdDate": "my_createdDate",
     *       //   "creator": {},
     *       //   "customerId": "my_customerId",
     *       //   "hidden": false,
     *       //   "id": "my_id",
     *       //   "kind": "my_kind",
     *       //   "name": "my_name",
     *       //   "optOutOfSecureLinkUpdateForAllFilesEnabled": false,
     *       //   "organizationDisplayName": "my_organizationDisplayName",
     *       //   "permissionsSummary": {},
     *       //   "primaryDomainName": "my_primaryDomainName",
     *       //   "quotaInfo": {},
     *       //   "recursiveFileCount": "my_recursiveFileCount",
     *       //   "recursiveFolderCount": "my_recursiveFolderCount",
     *       //   "restrictions": {},
     *       //   "restrictionsOverride": {},
     *       //   "themeId": "my_themeId",
     *       //   "trusted": false
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "backgroundImageFile": {},
     *   //   "backgroundImageGridViewLink": "my_backgroundImageGridViewLink",
     *   //   "backgroundImageLink": "my_backgroundImageLink",
     *   //   "backgroundImageListViewLink": "my_backgroundImageListViewLink",
     *   //   "capabilities": {},
     *   //   "categoryReferences": [],
     *   //   "colorRgb": "my_colorRgb",
     *   //   "createdDate": "my_createdDate",
     *   //   "creator": {},
     *   //   "customerId": "my_customerId",
     *   //   "hidden": false,
     *   //   "id": "my_id",
     *   //   "kind": "my_kind",
     *   //   "name": "my_name",
     *   //   "optOutOfSecureLinkUpdateForAllFilesEnabled": false,
     *   //   "organizationDisplayName": "my_organizationDisplayName",
     *   //   "permissionsSummary": {},
     *   //   "primaryDomainName": "my_primaryDomainName",
     *   //   "quotaInfo": {},
     *   //   "recursiveFileCount": "my_recursiveFileCount",
     *   //   "recursiveFolderCount": "my_recursiveFolderCount",
     *   //   "restrictions": {},
     *   //   "restrictionsOverride": {},
     *   //   "themeId": "my_themeId",
     *   //   "trusted": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.drives.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.driveId The ID of the shared drive.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {boolean=} params.useDomainAdminAccess Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the shared drive belongs.
     * @param {().Drive} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params: Params$Resource$Drives$Update,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    update(
      params?: Params$Resource$Drives$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Drive>;
    update(
      params: Params$Resource$Drives$Update,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    update(
      params: Params$Resource$Drives$Update,
      options: MethodOptions | BodyResponseCallback<Schema$Drive>,
      callback: BodyResponseCallback<Schema$Drive>
    ): void;
    update(
      params: Params$Resource$Drives$Update,
      callback: BodyResponseCallback<Schema$Drive>
    ): void;
    update(callback: BodyResponseCallback<Schema$Drive>): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Drives$Update
        | BodyResponseCallback<Schema$Drive>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Drive>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Drive>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Drive> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Drives$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Drives$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/drives/{driveId}').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['driveId'],
        pathParams: ['driveId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Drive>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Drive>(parameters);
      }
    }
  }

  export interface Params$Resource$Drives$Changecategoryreferences
    extends StandardParameters {
    /**
     * The ID of the shared drive
     */
    driveId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the shared drive belongs.
     */
    useDomainAdminAccess?: boolean;

    /**
     * Request body metadata
     */
    requestBody?: Schema$DriveCategoryChangeRequest;
  }
  export interface Params$Resource$Drives$Delete extends StandardParameters {
    /**
     * The ID of the shared drive.
     */
    driveId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }
  export interface Params$Resource$Drives$Get extends StandardParameters {
    /**
     * The ID of the shared drive
     */
    driveId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the shared drive belongs.
     */
    useDomainAdminAccess?: boolean;
  }
  export interface Params$Resource$Drives$Hide extends StandardParameters {
    /**
     * The ID of the shared drive.
     */
    driveId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }
  export interface Params$Resource$Drives$Insert extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * An ID, such as a random UUID, which uniquely identifies this user's request for idempotent creation of a shared drive. A repeated request by the same user and with the same request ID will avoid creating duplicates by attempting to create the same shared drive. If the shared drive already exists a 409 error will be returned.
     */
    requestId?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;

    /**
     * Request body metadata
     */
    requestBody?: Schema$Drive;
  }
  export interface Params$Resource$Drives$List extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * Maximum number of shared drives to return.
     */
    maxResults?: number;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * Page token for shared drives.
     */
    pageToken?: string;
    /**
     * Query string for searching shared drives.
     */
    q?: string;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * Issue the request as a domain administrator; if set to true, then all shared drives of the domain in which the requester is an administrator are returned.
     */
    useDomainAdminAccess?: boolean;
  }
  export interface Params$Resource$Drives$Unhide extends StandardParameters {
    /**
     * The ID of the shared drive.
     */
    driveId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }
  export interface Params$Resource$Drives$Update extends StandardParameters {
    /**
     * The ID of the shared drive.
     */
    driveId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the shared drive belongs.
     */
    useDomainAdminAccess?: boolean;

    /**
     * Request body metadata
     */
    requestBody?: Schema$Drive;
  }

  export class Resource$Files {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * drive.files.authorize
     * @desc Authorize an app to access a file.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.authorize({
     *     // The ID of the app to authorize.
     *     appId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file to authorize the app to.
     *     fileId: 'placeholder-value',
     *     // If true, all badged Labels will be returned in the labelInfo part of the response.
     *     includeBadgedLabels: 'placeholder-value',
     *     // A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     *     includeLabels: 'placeholder-value',
     *     // A comma-separated list of names of Categories to include in the response.
     *     includeMetadataForCategories: 'placeholder-value',
     *     // Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     *     includePermissionsForView: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the requesting application supports both My Drives and shared drives.
     *     supportsAllDrives: 'placeholder-value',
     *     // Deprecated use supportsAllDrives instead.
     *     supportsTeamDrives: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // If true, Permissions with type Audience are represented with Domain type.
     *     useLegacyDomainPermissionBehavior: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "actionItems": [],
     *   //   "alternateLink": "my_alternateLink",
     *   //   "alwaysShowInPhotos": false,
     *   //   "ancestorHasAugmentedPermissions": false,
     *   //   "appDataContents": false,
     *   //   "appliedCategories": [],
     *   //   "approvalMetadata": {},
     *   //   "authorizedAppIds": [],
     *   //   "blockingDetectors": [],
     *   //   "canComment": false,
     *   //   "capabilities": {},
     *   //   "categoryMetadata": {},
     *   //   "changed": false,
     *   //   "clientEncryptionDetails": {},
     *   //   "commentsImported": false,
     *   //   "containsUnsubscribedChildren": false,
     *   //   "contentRestriction": {},
     *   //   "contentRestrictions": [],
     *   //   "copyRequiresWriterPermission": false,
     *   //   "copyable": false,
     *   //   "createdDate": "my_createdDate",
     *   //   "creator": {},
     *   //   "creatorAppId": "my_creatorAppId",
     *   //   "customerId": "my_customerId",
     *   //   "defaultOpenWithLink": "my_defaultOpenWithLink",
     *   //   "descendantOfRoot": false,
     *   //   "description": "my_description",
     *   //   "detectors": [],
     *   //   "downloadUrl": "my_downloadUrl",
     *   //   "driveId": "my_driveId",
     *   //   "driveSource": {},
     *   //   "editable": false,
     *   //   "efficiencyInfo": {},
     *   //   "embedLink": "my_embedLink",
     *   //   "embedded": false,
     *   //   "embeddingParent": "my_embeddingParent",
     *   //   "etag": "my_etag",
     *   //   "explicitlyTrashed": false,
     *   //   "exportLinks": {},
     *   //   "fileExtension": "my_fileExtension",
     *   //   "fileSize": "my_fileSize",
     *   //   "flaggedForAbuse": false,
     *   //   "folderColor": "my_folderColor",
     *   //   "folderColorRgb": "my_folderColorRgb",
     *   //   "folderFeatures": [],
     *   //   "folderProperties": {},
     *   //   "fullFileExtension": "my_fullFileExtension",
     *   //   "gplusMedia": false,
     *   //   "hasAppsScriptAddOn": false,
     *   //   "hasAugmentedPermissions": false,
     *   //   "hasChildFolders": false,
     *   //   "hasComment": false,
     *   //   "hasLegacyBlobComments": false,
     *   //   "hasPermissionsForViews": false,
     *   //   "hasPreventDownloadConsequence": false,
     *   //   "hasThumbnail": false,
     *   //   "hasVisitorPermissions": false,
     *   //   "headRevisionCreationDate": "my_headRevisionCreationDate",
     *   //   "headRevisionId": "my_headRevisionId",
     *   //   "iconLink": "my_iconLink",
     *   //   "id": "my_id",
     *   //   "imageMediaMetadata": {},
     *   //   "indexableText": {},
     *   //   "isAppAuthorized": false,
     *   //   "isCompressed": false,
     *   //   "kind": "my_kind",
     *   //   "labelInfo": {},
     *   //   "labels": {},
     *   //   "lastModifyingUser": {},
     *   //   "lastModifyingUserName": "my_lastModifyingUserName",
     *   //   "lastViewedByMeDate": "my_lastViewedByMeDate",
     *   //   "linkShareMetadata": {},
     *   //   "localId": {},
     *   //   "markedViewedByMeDate": "my_markedViewedByMeDate",
     *   //   "md5Checksum": "my_md5Checksum",
     *   //   "mimeType": "my_mimeType",
     *   //   "modifiedByMeDate": "my_modifiedByMeDate",
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "openWithLinks": {},
     *   //   "organizationDisplayName": "my_organizationDisplayName",
     *   //   "originalFileSize": "my_originalFileSize",
     *   //   "originalFilename": "my_originalFilename",
     *   //   "originalMd5Checksum": "my_originalMd5Checksum",
     *   //   "ownedByMe": false,
     *   //   "ownerNames": [],
     *   //   "owners": [],
     *   //   "packageFileSize": "my_packageFileSize",
     *   //   "packageId": "my_packageId",
     *   //   "pairedDocType": "my_pairedDocType",
     *   //   "parent": {},
     *   //   "parents": [],
     *   //   "passivelySubscribed": false,
     *   //   "permissionIds": [],
     *   //   "permissions": [],
     *   //   "permissionsSummary": {},
     *   //   "photosCompressionStatus": "my_photosCompressionStatus",
     *   //   "photosStoragePolicy": "my_photosStoragePolicy",
     *   //   "preview": {},
     *   //   "primaryDomainName": "my_primaryDomainName",
     *   //   "primarySyncParentId": "my_primarySyncParentId",
     *   //   "properties": [],
     *   //   "publishingInfo": {},
     *   //   "quotaBytesUsed": "my_quotaBytesUsed",
     *   //   "readable": false,
     *   //   "readersCanSeeComments": false,
     *   //   "recency": "my_recency",
     *   //   "recencyReason": "my_recencyReason",
     *   //   "recursiveFileCount": "my_recursiveFileCount",
     *   //   "recursiveFileSize": "my_recursiveFileSize",
     *   //   "recursiveQuotaBytesUsed": "my_recursiveQuotaBytesUsed",
     *   //   "removedParents": [],
     *   //   "resourceKey": "my_resourceKey",
     *   //   "searchResultSource": "my_searchResultSource",
     *   //   "selfLink": "my_selfLink",
     *   //   "serverCreatedDate": "my_serverCreatedDate",
     *   //   "sha1Checksums": [],
     *   //   "shareLink": "my_shareLink",
     *   //   "shareable": false,
     *   //   "shared": false,
     *   //   "sharedWithMeDate": "my_sharedWithMeDate",
     *   //   "sharingUser": {},
     *   //   "shortcutDetails": {},
     *   //   "shortcutTargetId": "my_shortcutTargetId",
     *   //   "shortcutTargetMimeType": "my_shortcutTargetMimeType",
     *   //   "source": {},
     *   //   "sourceAppId": "my_sourceAppId",
     *   //   "sources": {},
     *   //   "spaces": [],
     *   //   "storagePolicyPending": false,
     *   //   "subscribed": false,
     *   //   "supportedRoles": [],
     *   //   "teamDriveId": "my_teamDriveId",
     *   //   "templateData": {},
     *   //   "thumbnail": {},
     *   //   "thumbnailLink": "my_thumbnailLink",
     *   //   "thumbnailVersion": "my_thumbnailVersion",
     *   //   "title": "my_title",
     *   //   "trashedDate": "my_trashedDate",
     *   //   "trashingUser": {},
     *   //   "userPermission": {},
     *   //   "version": "my_version",
     *   //   "videoMediaMetadata": {},
     *   //   "warningDetectors": [],
     *   //   "webContentLink": "my_webContentLink",
     *   //   "webViewLink": "my_webViewLink",
     *   //   "workspaceIds": [],
     *   //   "writersCanShare": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.authorize
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.appId The ID of the app to authorize.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file to authorize the app to.
     * @param {boolean=} params.includeBadgedLabels If true, all badged Labels will be returned in the labelInfo part of the response.
     * @param {string=} params.includeLabels A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     * @param {string=} params.includeMetadataForCategories A comma-separated list of names of Categories to include in the response.
     * @param {string=} params.includePermissionsForView Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {boolean=} params.supportsAllDrives Whether the requesting application supports both My Drives and shared drives.
     * @param {boolean=} params.supportsTeamDrives Deprecated use supportsAllDrives instead.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {boolean=} params.useLegacyDomainPermissionBehavior If true, Permissions with type Audience are represented with Domain type.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    authorize(
      params: Params$Resource$Files$Authorize,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    authorize(
      params?: Params$Resource$Files$Authorize,
      options?: MethodOptions
    ): GaxiosPromise<Schema$File>;
    authorize(
      params: Params$Resource$Files$Authorize,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    authorize(
      params: Params$Resource$Files$Authorize,
      options: MethodOptions | BodyResponseCallback<Schema$File>,
      callback: BodyResponseCallback<Schema$File>
    ): void;
    authorize(
      params: Params$Resource$Files$Authorize,
      callback: BodyResponseCallback<Schema$File>
    ): void;
    authorize(callback: BodyResponseCallback<Schema$File>): void;
    authorize(
      paramsOrCallback?:
        | Params$Resource$Files$Authorize
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$File> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Files$Authorize;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Authorize;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files/{fileId}/authorize').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'appId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$File>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$File>(parameters);
      }
    }

    /**
     * drive.files.checkPermissions
     * @desc Checks for permission fix options for a role, a set of files, and a set of recipients.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.checkPermissions({
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "fileIds": [],
     *       //   "kind": "my_kind",
     *       //   "locale": "my_locale",
     *       //   "recipientEmailAddresses": [],
     *       //   "role": "my_role"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "fixOptions": [],
     *   //   "fixabilitySummaryState": "my_fixabilitySummaryState",
     *   //   "kind": "my_kind"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.checkPermissions
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {().CheckPermissionsRequest} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    checkPermissions(
      params: Params$Resource$Files$Checkpermissions,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    checkPermissions(
      params?: Params$Resource$Files$Checkpermissions,
      options?: MethodOptions
    ): GaxiosPromise<Schema$CheckPermissionsResponse>;
    checkPermissions(
      params: Params$Resource$Files$Checkpermissions,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    checkPermissions(
      params: Params$Resource$Files$Checkpermissions,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$CheckPermissionsResponse>,
      callback: BodyResponseCallback<Schema$CheckPermissionsResponse>
    ): void;
    checkPermissions(
      params: Params$Resource$Files$Checkpermissions,
      callback: BodyResponseCallback<Schema$CheckPermissionsResponse>
    ): void;
    checkPermissions(
      callback: BodyResponseCallback<Schema$CheckPermissionsResponse>
    ): void;
    checkPermissions(
      paramsOrCallback?:
        | Params$Resource$Files$Checkpermissions
        | BodyResponseCallback<Schema$CheckPermissionsResponse>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$CheckPermissionsResponse>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$CheckPermissionsResponse>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$CheckPermissionsResponse>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Files$Checkpermissions;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Checkpermissions;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files/checkPermissions').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: [],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$CheckPermissionsResponse>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$CheckPermissionsResponse>(parameters);
      }
    }

    /**
     * drive.files.copy
     * @desc Creates a copy of the specified file.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.apps.readonly',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.photos.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.copy({
     *     // Whether to convert this file to the corresponding Google Docs format.
     *     convert: 'placeholder-value',
     *     // If set, requests conversion to the given format. For native Google Docs, valid values are any of the targets in the exportFormats field of the about.get response.
     *     convertTo: 'placeholder-value',
     *     // Whether to also copy file comments. Only supported for Google Docs files.
     *     copyComments: 'placeholder-value',
     *     // Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. Requests that specify more than one parent will fail.
     *     enforceSingleParent: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file to copy.
     *     fileId: 'placeholder-value',
     *     // If true, all badged Labels will be returned in the labelInfo part of the response.
     *     includeBadgedLabels: 'placeholder-value',
     *     // A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     *     includeLabels: 'placeholder-value',
     *     // A comma-separated list of names of Categories to include in the response.
     *     includeMetadataForCategories: 'placeholder-value',
     *     // Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     *     includePermissionsForView: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads.
     *     ocr: 'placeholder-value',
     *     // If ocr is true, hints at the language to use. Valid values are ISO 639-1 codes.
     *     ocrLanguage: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // Whether to pin the head revision of the new copy. A file can have a maximum of 200 pinned revisions.
     *     pinned: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // The ID of the revision to copy. Only allowed for files with content stored in Google Drive when conversion is not requested. Two revisions of the same file cannot be copied in a single batch request.
     *     revisionId: 'placeholder-value',
     *     // Whether the requesting application supports both My Drives and shared drives.
     *     supportsAllDrives: 'placeholder-value',
     *     // Deprecated use supportsAllDrives instead.
     *     supportsTeamDrives: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // The language of the timed text.
     *     timedTextLanguage: 'placeholder-value',
     *     // The timed text track name.
     *     timedTextTrackName: 'placeholder-value',
     *     // Whether to update the view date on the copied file.
     *     updateViewedDate: 'placeholder-value',
     *     // If true, Permissions with type Audience are represented with Domain type.
     *     useLegacyDomainPermissionBehavior: 'placeholder-value',
     *     // The visibility of the new file. This parameter is only relevant when the source is not a native Google Doc and convert=false.
     *     visibility: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "actionItems": [],
     *       //   "alternateLink": "my_alternateLink",
     *       //   "alwaysShowInPhotos": false,
     *       //   "ancestorHasAugmentedPermissions": false,
     *       //   "appDataContents": false,
     *       //   "appliedCategories": [],
     *       //   "approvalMetadata": {},
     *       //   "authorizedAppIds": [],
     *       //   "blockingDetectors": [],
     *       //   "canComment": false,
     *       //   "capabilities": {},
     *       //   "categoryMetadata": {},
     *       //   "changed": false,
     *       //   "clientEncryptionDetails": {},
     *       //   "commentsImported": false,
     *       //   "containsUnsubscribedChildren": false,
     *       //   "contentRestriction": {},
     *       //   "contentRestrictions": [],
     *       //   "copyRequiresWriterPermission": false,
     *       //   "copyable": false,
     *       //   "createdDate": "my_createdDate",
     *       //   "creator": {},
     *       //   "creatorAppId": "my_creatorAppId",
     *       //   "customerId": "my_customerId",
     *       //   "defaultOpenWithLink": "my_defaultOpenWithLink",
     *       //   "descendantOfRoot": false,
     *       //   "description": "my_description",
     *       //   "detectors": [],
     *       //   "downloadUrl": "my_downloadUrl",
     *       //   "driveId": "my_driveId",
     *       //   "driveSource": {},
     *       //   "editable": false,
     *       //   "efficiencyInfo": {},
     *       //   "embedLink": "my_embedLink",
     *       //   "embedded": false,
     *       //   "embeddingParent": "my_embeddingParent",
     *       //   "etag": "my_etag",
     *       //   "explicitlyTrashed": false,
     *       //   "exportLinks": {},
     *       //   "fileExtension": "my_fileExtension",
     *       //   "fileSize": "my_fileSize",
     *       //   "flaggedForAbuse": false,
     *       //   "folderColor": "my_folderColor",
     *       //   "folderColorRgb": "my_folderColorRgb",
     *       //   "folderFeatures": [],
     *       //   "folderProperties": {},
     *       //   "fullFileExtension": "my_fullFileExtension",
     *       //   "gplusMedia": false,
     *       //   "hasAppsScriptAddOn": false,
     *       //   "hasAugmentedPermissions": false,
     *       //   "hasChildFolders": false,
     *       //   "hasComment": false,
     *       //   "hasLegacyBlobComments": false,
     *       //   "hasPermissionsForViews": false,
     *       //   "hasPreventDownloadConsequence": false,
     *       //   "hasThumbnail": false,
     *       //   "hasVisitorPermissions": false,
     *       //   "headRevisionCreationDate": "my_headRevisionCreationDate",
     *       //   "headRevisionId": "my_headRevisionId",
     *       //   "iconLink": "my_iconLink",
     *       //   "id": "my_id",
     *       //   "imageMediaMetadata": {},
     *       //   "indexableText": {},
     *       //   "isAppAuthorized": false,
     *       //   "isCompressed": false,
     *       //   "kind": "my_kind",
     *       //   "labelInfo": {},
     *       //   "labels": {},
     *       //   "lastModifyingUser": {},
     *       //   "lastModifyingUserName": "my_lastModifyingUserName",
     *       //   "lastViewedByMeDate": "my_lastViewedByMeDate",
     *       //   "linkShareMetadata": {},
     *       //   "localId": {},
     *       //   "markedViewedByMeDate": "my_markedViewedByMeDate",
     *       //   "md5Checksum": "my_md5Checksum",
     *       //   "mimeType": "my_mimeType",
     *       //   "modifiedByMeDate": "my_modifiedByMeDate",
     *       //   "modifiedDate": "my_modifiedDate",
     *       //   "openWithLinks": {},
     *       //   "organizationDisplayName": "my_organizationDisplayName",
     *       //   "originalFileSize": "my_originalFileSize",
     *       //   "originalFilename": "my_originalFilename",
     *       //   "originalMd5Checksum": "my_originalMd5Checksum",
     *       //   "ownedByMe": false,
     *       //   "ownerNames": [],
     *       //   "owners": [],
     *       //   "packageFileSize": "my_packageFileSize",
     *       //   "packageId": "my_packageId",
     *       //   "pairedDocType": "my_pairedDocType",
     *       //   "parent": {},
     *       //   "parents": [],
     *       //   "passivelySubscribed": false,
     *       //   "permissionIds": [],
     *       //   "permissions": [],
     *       //   "permissionsSummary": {},
     *       //   "photosCompressionStatus": "my_photosCompressionStatus",
     *       //   "photosStoragePolicy": "my_photosStoragePolicy",
     *       //   "preview": {},
     *       //   "primaryDomainName": "my_primaryDomainName",
     *       //   "primarySyncParentId": "my_primarySyncParentId",
     *       //   "properties": [],
     *       //   "publishingInfo": {},
     *       //   "quotaBytesUsed": "my_quotaBytesUsed",
     *       //   "readable": false,
     *       //   "readersCanSeeComments": false,
     *       //   "recency": "my_recency",
     *       //   "recencyReason": "my_recencyReason",
     *       //   "recursiveFileCount": "my_recursiveFileCount",
     *       //   "recursiveFileSize": "my_recursiveFileSize",
     *       //   "recursiveQuotaBytesUsed": "my_recursiveQuotaBytesUsed",
     *       //   "removedParents": [],
     *       //   "resourceKey": "my_resourceKey",
     *       //   "searchResultSource": "my_searchResultSource",
     *       //   "selfLink": "my_selfLink",
     *       //   "serverCreatedDate": "my_serverCreatedDate",
     *       //   "sha1Checksums": [],
     *       //   "shareLink": "my_shareLink",
     *       //   "shareable": false,
     *       //   "shared": false,
     *       //   "sharedWithMeDate": "my_sharedWithMeDate",
     *       //   "sharingUser": {},
     *       //   "shortcutDetails": {},
     *       //   "shortcutTargetId": "my_shortcutTargetId",
     *       //   "shortcutTargetMimeType": "my_shortcutTargetMimeType",
     *       //   "source": {},
     *       //   "sourceAppId": "my_sourceAppId",
     *       //   "sources": {},
     *       //   "spaces": [],
     *       //   "storagePolicyPending": false,
     *       //   "subscribed": false,
     *       //   "supportedRoles": [],
     *       //   "teamDriveId": "my_teamDriveId",
     *       //   "templateData": {},
     *       //   "thumbnail": {},
     *       //   "thumbnailLink": "my_thumbnailLink",
     *       //   "thumbnailVersion": "my_thumbnailVersion",
     *       //   "title": "my_title",
     *       //   "trashedDate": "my_trashedDate",
     *       //   "trashingUser": {},
     *       //   "userPermission": {},
     *       //   "version": "my_version",
     *       //   "videoMediaMetadata": {},
     *       //   "warningDetectors": [],
     *       //   "webContentLink": "my_webContentLink",
     *       //   "webViewLink": "my_webViewLink",
     *       //   "workspaceIds": [],
     *       //   "writersCanShare": false
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "actionItems": [],
     *   //   "alternateLink": "my_alternateLink",
     *   //   "alwaysShowInPhotos": false,
     *   //   "ancestorHasAugmentedPermissions": false,
     *   //   "appDataContents": false,
     *   //   "appliedCategories": [],
     *   //   "approvalMetadata": {},
     *   //   "authorizedAppIds": [],
     *   //   "blockingDetectors": [],
     *   //   "canComment": false,
     *   //   "capabilities": {},
     *   //   "categoryMetadata": {},
     *   //   "changed": false,
     *   //   "clientEncryptionDetails": {},
     *   //   "commentsImported": false,
     *   //   "containsUnsubscribedChildren": false,
     *   //   "contentRestriction": {},
     *   //   "contentRestrictions": [],
     *   //   "copyRequiresWriterPermission": false,
     *   //   "copyable": false,
     *   //   "createdDate": "my_createdDate",
     *   //   "creator": {},
     *   //   "creatorAppId": "my_creatorAppId",
     *   //   "customerId": "my_customerId",
     *   //   "defaultOpenWithLink": "my_defaultOpenWithLink",
     *   //   "descendantOfRoot": false,
     *   //   "description": "my_description",
     *   //   "detectors": [],
     *   //   "downloadUrl": "my_downloadUrl",
     *   //   "driveId": "my_driveId",
     *   //   "driveSource": {},
     *   //   "editable": false,
     *   //   "efficiencyInfo": {},
     *   //   "embedLink": "my_embedLink",
     *   //   "embedded": false,
     *   //   "embeddingParent": "my_embeddingParent",
     *   //   "etag": "my_etag",
     *   //   "explicitlyTrashed": false,
     *   //   "exportLinks": {},
     *   //   "fileExtension": "my_fileExtension",
     *   //   "fileSize": "my_fileSize",
     *   //   "flaggedForAbuse": false,
     *   //   "folderColor": "my_folderColor",
     *   //   "folderColorRgb": "my_folderColorRgb",
     *   //   "folderFeatures": [],
     *   //   "folderProperties": {},
     *   //   "fullFileExtension": "my_fullFileExtension",
     *   //   "gplusMedia": false,
     *   //   "hasAppsScriptAddOn": false,
     *   //   "hasAugmentedPermissions": false,
     *   //   "hasChildFolders": false,
     *   //   "hasComment": false,
     *   //   "hasLegacyBlobComments": false,
     *   //   "hasPermissionsForViews": false,
     *   //   "hasPreventDownloadConsequence": false,
     *   //   "hasThumbnail": false,
     *   //   "hasVisitorPermissions": false,
     *   //   "headRevisionCreationDate": "my_headRevisionCreationDate",
     *   //   "headRevisionId": "my_headRevisionId",
     *   //   "iconLink": "my_iconLink",
     *   //   "id": "my_id",
     *   //   "imageMediaMetadata": {},
     *   //   "indexableText": {},
     *   //   "isAppAuthorized": false,
     *   //   "isCompressed": false,
     *   //   "kind": "my_kind",
     *   //   "labelInfo": {},
     *   //   "labels": {},
     *   //   "lastModifyingUser": {},
     *   //   "lastModifyingUserName": "my_lastModifyingUserName",
     *   //   "lastViewedByMeDate": "my_lastViewedByMeDate",
     *   //   "linkShareMetadata": {},
     *   //   "localId": {},
     *   //   "markedViewedByMeDate": "my_markedViewedByMeDate",
     *   //   "md5Checksum": "my_md5Checksum",
     *   //   "mimeType": "my_mimeType",
     *   //   "modifiedByMeDate": "my_modifiedByMeDate",
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "openWithLinks": {},
     *   //   "organizationDisplayName": "my_organizationDisplayName",
     *   //   "originalFileSize": "my_originalFileSize",
     *   //   "originalFilename": "my_originalFilename",
     *   //   "originalMd5Checksum": "my_originalMd5Checksum",
     *   //   "ownedByMe": false,
     *   //   "ownerNames": [],
     *   //   "owners": [],
     *   //   "packageFileSize": "my_packageFileSize",
     *   //   "packageId": "my_packageId",
     *   //   "pairedDocType": "my_pairedDocType",
     *   //   "parent": {},
     *   //   "parents": [],
     *   //   "passivelySubscribed": false,
     *   //   "permissionIds": [],
     *   //   "permissions": [],
     *   //   "permissionsSummary": {},
     *   //   "photosCompressionStatus": "my_photosCompressionStatus",
     *   //   "photosStoragePolicy": "my_photosStoragePolicy",
     *   //   "preview": {},
     *   //   "primaryDomainName": "my_primaryDomainName",
     *   //   "primarySyncParentId": "my_primarySyncParentId",
     *   //   "properties": [],
     *   //   "publishingInfo": {},
     *   //   "quotaBytesUsed": "my_quotaBytesUsed",
     *   //   "readable": false,
     *   //   "readersCanSeeComments": false,
     *   //   "recency": "my_recency",
     *   //   "recencyReason": "my_recencyReason",
     *   //   "recursiveFileCount": "my_recursiveFileCount",
     *   //   "recursiveFileSize": "my_recursiveFileSize",
     *   //   "recursiveQuotaBytesUsed": "my_recursiveQuotaBytesUsed",
     *   //   "removedParents": [],
     *   //   "resourceKey": "my_resourceKey",
     *   //   "searchResultSource": "my_searchResultSource",
     *   //   "selfLink": "my_selfLink",
     *   //   "serverCreatedDate": "my_serverCreatedDate",
     *   //   "sha1Checksums": [],
     *   //   "shareLink": "my_shareLink",
     *   //   "shareable": false,
     *   //   "shared": false,
     *   //   "sharedWithMeDate": "my_sharedWithMeDate",
     *   //   "sharingUser": {},
     *   //   "shortcutDetails": {},
     *   //   "shortcutTargetId": "my_shortcutTargetId",
     *   //   "shortcutTargetMimeType": "my_shortcutTargetMimeType",
     *   //   "source": {},
     *   //   "sourceAppId": "my_sourceAppId",
     *   //   "sources": {},
     *   //   "spaces": [],
     *   //   "storagePolicyPending": false,
     *   //   "subscribed": false,
     *   //   "supportedRoles": [],
     *   //   "teamDriveId": "my_teamDriveId",
     *   //   "templateData": {},
     *   //   "thumbnail": {},
     *   //   "thumbnailLink": "my_thumbnailLink",
     *   //   "thumbnailVersion": "my_thumbnailVersion",
     *   //   "title": "my_title",
     *   //   "trashedDate": "my_trashedDate",
     *   //   "trashingUser": {},
     *   //   "userPermission": {},
     *   //   "version": "my_version",
     *   //   "videoMediaMetadata": {},
     *   //   "warningDetectors": [],
     *   //   "webContentLink": "my_webContentLink",
     *   //   "webViewLink": "my_webViewLink",
     *   //   "workspaceIds": [],
     *   //   "writersCanShare": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.copy
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.convert Whether to convert this file to the corresponding Google Docs format.
     * @param {string=} params.convertTo If set, requests conversion to the given format. For native Google Docs, valid values are any of the targets in the exportFormats field of the about.get response.
     * @param {boolean=} params.copyComments Whether to also copy file comments. Only supported for Google Docs files.
     * @param {boolean=} params.enforceSingleParent Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. Requests that specify more than one parent will fail.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file to copy.
     * @param {boolean=} params.includeBadgedLabels If true, all badged Labels will be returned in the labelInfo part of the response.
     * @param {string=} params.includeLabels A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     * @param {string=} params.includeMetadataForCategories A comma-separated list of names of Categories to include in the response.
     * @param {string=} params.includePermissionsForView Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.ocr Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads.
     * @param {string=} params.ocrLanguage If ocr is true, hints at the language to use. Valid values are ISO 639-1 codes.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {boolean=} params.pinned Whether to pin the head revision of the new copy. A file can have a maximum of 200 pinned revisions.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {string=} params.revisionId The ID of the revision to copy. Only allowed for files with content stored in Google Drive when conversion is not requested. Two revisions of the same file cannot be copied in a single batch request.
     * @param {boolean=} params.supportsAllDrives Whether the requesting application supports both My Drives and shared drives.
     * @param {boolean=} params.supportsTeamDrives Deprecated use supportsAllDrives instead.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {string=} params.timedTextLanguage The language of the timed text.
     * @param {string=} params.timedTextTrackName The timed text track name.
     * @param {boolean=} params.updateViewedDate Whether to update the view date on the copied file.
     * @param {boolean=} params.useLegacyDomainPermissionBehavior If true, Permissions with type Audience are represented with Domain type.
     * @param {string=} params.visibility The visibility of the new file. This parameter is only relevant when the source is not a native Google Doc and convert=false.
     * @param {().File} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    copy(
      params: Params$Resource$Files$Copy,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    copy(
      params?: Params$Resource$Files$Copy,
      options?: MethodOptions
    ): GaxiosPromise<Schema$File>;
    copy(
      params: Params$Resource$Files$Copy,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    copy(
      params: Params$Resource$Files$Copy,
      options: MethodOptions | BodyResponseCallback<Schema$File>,
      callback: BodyResponseCallback<Schema$File>
    ): void;
    copy(
      params: Params$Resource$Files$Copy,
      callback: BodyResponseCallback<Schema$File>
    ): void;
    copy(callback: BodyResponseCallback<Schema$File>): void;
    copy(
      paramsOrCallback?:
        | Params$Resource$Files$Copy
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$File> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Files$Copy;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Copy;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files/{fileId}/copy').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$File>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$File>(parameters);
      }
    }

    /**
     * drive.files.deauthorize
     * @desc Remove an app's authorization from a file.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.deauthorize({
     *     // The ID of the app to deauthorize.
     *     appId: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file from which to remove the app's access.
     *     fileId: 'placeholder-value',
     *     // If true, all badged Labels will be returned in the labelInfo part of the response.
     *     includeBadgedLabels: 'placeholder-value',
     *     // A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     *     includeLabels: 'placeholder-value',
     *     // A comma-separated list of names of Categories to include in the response.
     *     includeMetadataForCategories: 'placeholder-value',
     *     // Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     *     includePermissionsForView: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the requesting application supports both My Drives and shared drives.
     *     supportsAllDrives: 'placeholder-value',
     *     // Deprecated use supportsAllDrives instead.
     *     supportsTeamDrives: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // If true, Permissions with type Audience are represented with Domain type.
     *     useLegacyDomainPermissionBehavior: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "actionItems": [],
     *   //   "alternateLink": "my_alternateLink",
     *   //   "alwaysShowInPhotos": false,
     *   //   "ancestorHasAugmentedPermissions": false,
     *   //   "appDataContents": false,
     *   //   "appliedCategories": [],
     *   //   "approvalMetadata": {},
     *   //   "authorizedAppIds": [],
     *   //   "blockingDetectors": [],
     *   //   "canComment": false,
     *   //   "capabilities": {},
     *   //   "categoryMetadata": {},
     *   //   "changed": false,
     *   //   "clientEncryptionDetails": {},
     *   //   "commentsImported": false,
     *   //   "containsUnsubscribedChildren": false,
     *   //   "contentRestriction": {},
     *   //   "contentRestrictions": [],
     *   //   "copyRequiresWriterPermission": false,
     *   //   "copyable": false,
     *   //   "createdDate": "my_createdDate",
     *   //   "creator": {},
     *   //   "creatorAppId": "my_creatorAppId",
     *   //   "customerId": "my_customerId",
     *   //   "defaultOpenWithLink": "my_defaultOpenWithLink",
     *   //   "descendantOfRoot": false,
     *   //   "description": "my_description",
     *   //   "detectors": [],
     *   //   "downloadUrl": "my_downloadUrl",
     *   //   "driveId": "my_driveId",
     *   //   "driveSource": {},
     *   //   "editable": false,
     *   //   "efficiencyInfo": {},
     *   //   "embedLink": "my_embedLink",
     *   //   "embedded": false,
     *   //   "embeddingParent": "my_embeddingParent",
     *   //   "etag": "my_etag",
     *   //   "explicitlyTrashed": false,
     *   //   "exportLinks": {},
     *   //   "fileExtension": "my_fileExtension",
     *   //   "fileSize": "my_fileSize",
     *   //   "flaggedForAbuse": false,
     *   //   "folderColor": "my_folderColor",
     *   //   "folderColorRgb": "my_folderColorRgb",
     *   //   "folderFeatures": [],
     *   //   "folderProperties": {},
     *   //   "fullFileExtension": "my_fullFileExtension",
     *   //   "gplusMedia": false,
     *   //   "hasAppsScriptAddOn": false,
     *   //   "hasAugmentedPermissions": false,
     *   //   "hasChildFolders": false,
     *   //   "hasComment": false,
     *   //   "hasLegacyBlobComments": false,
     *   //   "hasPermissionsForViews": false,
     *   //   "hasPreventDownloadConsequence": false,
     *   //   "hasThumbnail": false,
     *   //   "hasVisitorPermissions": false,
     *   //   "headRevisionCreationDate": "my_headRevisionCreationDate",
     *   //   "headRevisionId": "my_headRevisionId",
     *   //   "iconLink": "my_iconLink",
     *   //   "id": "my_id",
     *   //   "imageMediaMetadata": {},
     *   //   "indexableText": {},
     *   //   "isAppAuthorized": false,
     *   //   "isCompressed": false,
     *   //   "kind": "my_kind",
     *   //   "labelInfo": {},
     *   //   "labels": {},
     *   //   "lastModifyingUser": {},
     *   //   "lastModifyingUserName": "my_lastModifyingUserName",
     *   //   "lastViewedByMeDate": "my_lastViewedByMeDate",
     *   //   "linkShareMetadata": {},
     *   //   "localId": {},
     *   //   "markedViewedByMeDate": "my_markedViewedByMeDate",
     *   //   "md5Checksum": "my_md5Checksum",
     *   //   "mimeType": "my_mimeType",
     *   //   "modifiedByMeDate": "my_modifiedByMeDate",
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "openWithLinks": {},
     *   //   "organizationDisplayName": "my_organizationDisplayName",
     *   //   "originalFileSize": "my_originalFileSize",
     *   //   "originalFilename": "my_originalFilename",
     *   //   "originalMd5Checksum": "my_originalMd5Checksum",
     *   //   "ownedByMe": false,
     *   //   "ownerNames": [],
     *   //   "owners": [],
     *   //   "packageFileSize": "my_packageFileSize",
     *   //   "packageId": "my_packageId",
     *   //   "pairedDocType": "my_pairedDocType",
     *   //   "parent": {},
     *   //   "parents": [],
     *   //   "passivelySubscribed": false,
     *   //   "permissionIds": [],
     *   //   "permissions": [],
     *   //   "permissionsSummary": {},
     *   //   "photosCompressionStatus": "my_photosCompressionStatus",
     *   //   "photosStoragePolicy": "my_photosStoragePolicy",
     *   //   "preview": {},
     *   //   "primaryDomainName": "my_primaryDomainName",
     *   //   "primarySyncParentId": "my_primarySyncParentId",
     *   //   "properties": [],
     *   //   "publishingInfo": {},
     *   //   "quotaBytesUsed": "my_quotaBytesUsed",
     *   //   "readable": false,
     *   //   "readersCanSeeComments": false,
     *   //   "recency": "my_recency",
     *   //   "recencyReason": "my_recencyReason",
     *   //   "recursiveFileCount": "my_recursiveFileCount",
     *   //   "recursiveFileSize": "my_recursiveFileSize",
     *   //   "recursiveQuotaBytesUsed": "my_recursiveQuotaBytesUsed",
     *   //   "removedParents": [],
     *   //   "resourceKey": "my_resourceKey",
     *   //   "searchResultSource": "my_searchResultSource",
     *   //   "selfLink": "my_selfLink",
     *   //   "serverCreatedDate": "my_serverCreatedDate",
     *   //   "sha1Checksums": [],
     *   //   "shareLink": "my_shareLink",
     *   //   "shareable": false,
     *   //   "shared": false,
     *   //   "sharedWithMeDate": "my_sharedWithMeDate",
     *   //   "sharingUser": {},
     *   //   "shortcutDetails": {},
     *   //   "shortcutTargetId": "my_shortcutTargetId",
     *   //   "shortcutTargetMimeType": "my_shortcutTargetMimeType",
     *   //   "source": {},
     *   //   "sourceAppId": "my_sourceAppId",
     *   //   "sources": {},
     *   //   "spaces": [],
     *   //   "storagePolicyPending": false,
     *   //   "subscribed": false,
     *   //   "supportedRoles": [],
     *   //   "teamDriveId": "my_teamDriveId",
     *   //   "templateData": {},
     *   //   "thumbnail": {},
     *   //   "thumbnailLink": "my_thumbnailLink",
     *   //   "thumbnailVersion": "my_thumbnailVersion",
     *   //   "title": "my_title",
     *   //   "trashedDate": "my_trashedDate",
     *   //   "trashingUser": {},
     *   //   "userPermission": {},
     *   //   "version": "my_version",
     *   //   "videoMediaMetadata": {},
     *   //   "warningDetectors": [],
     *   //   "webContentLink": "my_webContentLink",
     *   //   "webViewLink": "my_webViewLink",
     *   //   "workspaceIds": [],
     *   //   "writersCanShare": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.deauthorize
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.appId The ID of the app to deauthorize.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file from which to remove the app's access.
     * @param {boolean=} params.includeBadgedLabels If true, all badged Labels will be returned in the labelInfo part of the response.
     * @param {string=} params.includeLabels A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     * @param {string=} params.includeMetadataForCategories A comma-separated list of names of Categories to include in the response.
     * @param {string=} params.includePermissionsForView Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {boolean=} params.supportsAllDrives Whether the requesting application supports both My Drives and shared drives.
     * @param {boolean=} params.supportsTeamDrives Deprecated use supportsAllDrives instead.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {boolean=} params.useLegacyDomainPermissionBehavior If true, Permissions with type Audience are represented with Domain type.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    deauthorize(
      params: Params$Resource$Files$Deauthorize,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    deauthorize(
      params?: Params$Resource$Files$Deauthorize,
      options?: MethodOptions
    ): GaxiosPromise<Schema$File>;
    deauthorize(
      params: Params$Resource$Files$Deauthorize,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    deauthorize(
      params: Params$Resource$Files$Deauthorize,
      options: MethodOptions | BodyResponseCallback<Schema$File>,
      callback: BodyResponseCallback<Schema$File>
    ): void;
    deauthorize(
      params: Params$Resource$Files$Deauthorize,
      callback: BodyResponseCallback<Schema$File>
    ): void;
    deauthorize(callback: BodyResponseCallback<Schema$File>): void;
    deauthorize(
      paramsOrCallback?:
        | Params$Resource$Files$Deauthorize
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$File> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Files$Deauthorize;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Deauthorize;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/files/{fileId}/deauthorize'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'appId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$File>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$File>(parameters);
      }
    }

    /**
     * drive.files.delete
     * @desc Permanently deletes a file by ID. Skips the trash. The currently authenticated user must own the file or be an organizer on the parent for shared drive files.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.file',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.delete({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file to delete.
     *     fileId: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the requesting application supports both My Drives and shared drives.
     *     supportsAllDrives: 'placeholder-value',
     *     // Deprecated use supportsAllDrives instead.
     *     supportsTeamDrives: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file to delete.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {boolean=} params.supportsAllDrives Whether the requesting application supports both My Drives and shared drives.
     * @param {boolean=} params.supportsTeamDrives Deprecated use supportsAllDrives instead.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params: Params$Resource$Files$Delete,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    delete(
      params?: Params$Resource$Files$Delete,
      options?: MethodOptions
    ): GaxiosPromise<void>;
    delete(
      params: Params$Resource$Files$Delete,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    delete(
      params: Params$Resource$Files$Delete,
      options: MethodOptions | BodyResponseCallback<void>,
      callback: BodyResponseCallback<void>
    ): void;
    delete(
      params: Params$Resource$Files$Delete,
      callback: BodyResponseCallback<void>
    ): void;
    delete(callback: BodyResponseCallback<void>): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Files$Delete
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      callback?: BodyResponseCallback<void> | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<void> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Files$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files/{fileId}').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<void>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<void>(parameters);
      }
    }

    /**
     * drive.files.emptyTrash
     * @desc Permanently deletes all of the user's trashed files.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.emptyTrash({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.emptyTrash
     * @memberOf! ()
     *
     * @param {object=} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    emptyTrash(
      params: Params$Resource$Files$Emptytrash,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    emptyTrash(
      params?: Params$Resource$Files$Emptytrash,
      options?: MethodOptions
    ): GaxiosPromise<void>;
    emptyTrash(
      params: Params$Resource$Files$Emptytrash,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    emptyTrash(
      params: Params$Resource$Files$Emptytrash,
      options: MethodOptions | BodyResponseCallback<void>,
      callback: BodyResponseCallback<void>
    ): void;
    emptyTrash(
      params: Params$Resource$Files$Emptytrash,
      callback: BodyResponseCallback<void>
    ): void;
    emptyTrash(callback: BodyResponseCallback<void>): void;
    emptyTrash(
      paramsOrCallback?:
        | Params$Resource$Files$Emptytrash
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      callback?: BodyResponseCallback<void> | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<void> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Files$Emptytrash;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Emptytrash;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files/trash').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: [],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<void>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<void>(parameters);
      }
    }

    /**
     * drive.files.export
     * @desc Exports a Google Doc to the requested MIME type and returns the exported content.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.export({
     *     // The ID of the file.
     *     fileId: 'placeholder-value',
     *     // The MIME type of the format requested for this export.
     *     mimeType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.export
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.fileId The ID of the file.
     * @param {string} params.mimeType The MIME type of the format requested for this export.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    export(
      params: Params$Resource$Files$Export,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    export(
      params?: Params$Resource$Files$Export,
      options?: MethodOptions
    ): GaxiosPromise<void>;
    export(
      params: Params$Resource$Files$Export,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    export(
      params: Params$Resource$Files$Export,
      options: MethodOptions | BodyResponseCallback<void>,
      callback: BodyResponseCallback<void>
    ): void;
    export(
      params: Params$Resource$Files$Export,
      callback: BodyResponseCallback<void>
    ): void;
    export(callback: BodyResponseCallback<void>): void;
    export(
      paramsOrCallback?:
        | Params$Resource$Files$Export
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      callback?: BodyResponseCallback<void> | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<void> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Files$Export;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Export;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files/{fileId}/export').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'mimeType'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<void>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<void>(parameters);
      }
    }

    /**
     * drive.files.exportGDoc
     * @desc Exports a Google Doc to the requested MIME type and returns the exported content. Unlike files.export, this method allows exporting larger content.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.exportGDoc({
     *     // The ID of the file.
     *     fileId: 'placeholder-value',
     *     // The MIME type of the format requested for this export. Only editor internal mime types are supported.
     *     mimeType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.exportGDoc
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.fileId The ID of the file.
     * @param {string} params.mimeType The MIME type of the format requested for this export. Only editor internal mime types are supported.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    exportGDoc(
      params: Params$Resource$Files$Exportgdoc,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    exportGDoc(
      params?: Params$Resource$Files$Exportgdoc,
      options?: MethodOptions
    ): GaxiosPromise<void>;
    exportGDoc(
      params: Params$Resource$Files$Exportgdoc,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    exportGDoc(
      params: Params$Resource$Files$Exportgdoc,
      options: MethodOptions | BodyResponseCallback<void>,
      callback: BodyResponseCallback<void>
    ): void;
    exportGDoc(
      params: Params$Resource$Files$Exportgdoc,
      callback: BodyResponseCallback<void>
    ): void;
    exportGDoc(callback: BodyResponseCallback<void>): void;
    exportGDoc(
      paramsOrCallback?:
        | Params$Resource$Files$Exportgdoc
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      callback?: BodyResponseCallback<void> | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<void> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Files$Exportgdoc;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Exportgdoc;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/files/{fileId}/exportGDoc'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'mimeType'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<void>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<void>(parameters);
      }
    }

    /**
     * drive.files.extract
     * @desc Extract the contents of an archive file into Google Drive. Currently supports RAR, TAR/BZ2, TAR/GZIP, and ZIP files.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.file',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.extract({
     *     // The ID of the folder to extract the contents of the archive into.
     *     destinationLocationId: 'placeholder-value',
     *     // The ID for the archive file. Consists of either a Google Drive file id or encrypted id for a gmail attachment.
     *     fileId: 'placeholder-value',
     *     // The name of the archive file to be extracted. Required when origin is GMAIL
     *     fileName: 'placeholder-value',
     *     // The mime type of the archive file to be extracted. Required when origin is GMAIL
     *     mimeType: 'placeholder-value',
     *     // The origin of the file preview request.
     *     origin: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "destinationLocationId": "my_destinationLocationId",
     *   //   "etag": "my_etag",
     *   //   "id": "my_id",
     *   //   "kind": "my_kind",
     *   //   "sourceFileId": "my_sourceFileId",
     *   //   "status": "my_status"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.extract
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.destinationLocationId The ID of the folder to extract the contents of the archive into.
     * @param {string} params.fileId The ID for the archive file. Consists of either a Google Drive file id or encrypted id for a gmail attachment.
     * @param {string=} params.fileName The name of the archive file to be extracted. Required when origin is GMAIL
     * @param {string=} params.mimeType The mime type of the archive file to be extracted. Required when origin is GMAIL
     * @param {string=} params.origin The origin of the file preview request.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    extract(
      params: Params$Resource$Files$Extract,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    extract(
      params?: Params$Resource$Files$Extract,
      options?: MethodOptions
    ): GaxiosPromise<Schema$ArchiveExtractionJob>;
    extract(
      params: Params$Resource$Files$Extract,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    extract(
      params: Params$Resource$Files$Extract,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$ArchiveExtractionJob>,
      callback: BodyResponseCallback<Schema$ArchiveExtractionJob>
    ): void;
    extract(
      params: Params$Resource$Files$Extract,
      callback: BodyResponseCallback<Schema$ArchiveExtractionJob>
    ): void;
    extract(callback: BodyResponseCallback<Schema$ArchiveExtractionJob>): void;
    extract(
      paramsOrCallback?:
        | Params$Resource$Files$Extract
        | BodyResponseCallback<Schema$ArchiveExtractionJob>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$ArchiveExtractionJob>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$ArchiveExtractionJob>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$ArchiveExtractionJob>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Files$Extract;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Extract;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files/{fileId}/extract').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$ArchiveExtractionJob>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$ArchiveExtractionJob>(parameters);
      }
    }

    /**
     * drive.files.extractcancel
     * @desc Cancel an archive extraction job by the job ID
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.file',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.extractcancel({
     *     // The ID for the archive extraction job.
     *     jobId: 'placeholder-value',
     *   });
     *   console.log(res.data);
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.extractcancel
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.jobId The ID for the archive extraction job.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    extractcancel(
      params: Params$Resource$Files$Extractcancel,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    extractcancel(
      params?: Params$Resource$Files$Extractcancel,
      options?: MethodOptions
    ): GaxiosPromise<void>;
    extractcancel(
      params: Params$Resource$Files$Extractcancel,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    extractcancel(
      params: Params$Resource$Files$Extractcancel,
      options: MethodOptions | BodyResponseCallback<void>,
      callback: BodyResponseCallback<void>
    ): void;
    extractcancel(
      params: Params$Resource$Files$Extractcancel,
      callback: BodyResponseCallback<void>
    ): void;
    extractcancel(callback: BodyResponseCallback<void>): void;
    extractcancel(
      paramsOrCallback?:
        | Params$Resource$Files$Extractcancel
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      callback?: BodyResponseCallback<void> | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<void> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Files$Extractcancel;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Extractcancel;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/extractionJobs/{jobId}').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['jobId'],
        pathParams: ['jobId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<void>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<void>(parameters);
      }
    }

    /**
     * drive.files.extractstatus
     * @desc Retrieve the status of an archive extraction job by the job ID
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.file',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.extractstatus({
     *     // The ID for the archive extraction job.
     *     jobId: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "destinationLocationId": "my_destinationLocationId",
     *   //   "etag": "my_etag",
     *   //   "id": "my_id",
     *   //   "kind": "my_kind",
     *   //   "sourceFileId": "my_sourceFileId",
     *   //   "status": "my_status"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.extractstatus
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.jobId The ID for the archive extraction job.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    extractstatus(
      params: Params$Resource$Files$Extractstatus,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    extractstatus(
      params?: Params$Resource$Files$Extractstatus,
      options?: MethodOptions
    ): GaxiosPromise<Schema$ArchiveExtractionJob>;
    extractstatus(
      params: Params$Resource$Files$Extractstatus,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    extractstatus(
      params: Params$Resource$Files$Extractstatus,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$ArchiveExtractionJob>,
      callback: BodyResponseCallback<Schema$ArchiveExtractionJob>
    ): void;
    extractstatus(
      params: Params$Resource$Files$Extractstatus,
      callback: BodyResponseCallback<Schema$ArchiveExtractionJob>
    ): void;
    extractstatus(
      callback: BodyResponseCallback<Schema$ArchiveExtractionJob>
    ): void;
    extractstatus(
      paramsOrCallback?:
        | Params$Resource$Files$Extractstatus
        | BodyResponseCallback<Schema$ArchiveExtractionJob>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$ArchiveExtractionJob>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$ArchiveExtractionJob>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$ArchiveExtractionJob>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Files$Extractstatus;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Extractstatus;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/extractionJobs/{jobId}').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['jobId'],
        pathParams: ['jobId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$ArchiveExtractionJob>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$ArchiveExtractionJob>(parameters);
      }
    }

    /**
     * drive.files.fixPermissions
     * @desc Executes a permission fix option for a role, a set of files, and a set of recipients.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.fixPermissions({
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "fileIds": [],
     *       //   "fixOptionType": "my_fixOptionType",
     *       //   "kind": "my_kind",
     *       //   "recipientEmailAddresses": [],
     *       //   "role": "my_role"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.fixPermissions
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {().FixPermissionsRequest} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    fixPermissions(
      params: Params$Resource$Files$Fixpermissions,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    fixPermissions(
      params?: Params$Resource$Files$Fixpermissions,
      options?: MethodOptions
    ): GaxiosPromise<void>;
    fixPermissions(
      params: Params$Resource$Files$Fixpermissions,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    fixPermissions(
      params: Params$Resource$Files$Fixpermissions,
      options: MethodOptions | BodyResponseCallback<void>,
      callback: BodyResponseCallback<void>
    ): void;
    fixPermissions(
      params: Params$Resource$Files$Fixpermissions,
      callback: BodyResponseCallback<void>
    ): void;
    fixPermissions(callback: BodyResponseCallback<void>): void;
    fixPermissions(
      paramsOrCallback?:
        | Params$Resource$Files$Fixpermissions
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      callback?: BodyResponseCallback<void> | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<void> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Files$Fixpermissions;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Fixpermissions;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files/fixPermissions').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: [],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<void>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<void>(parameters);
      }
    }

    /**
     * drive.files.generateCseToken
     * @desc Generates a CSE token which can be used to create CSE files.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.generateCseToken({
     *     // The ID of the file for which the JWT should be generated. If specified, the user's access will be checked on the file based on the value of the 'role' field.
     *     fileId: 'placeholder-value',
     *     // The role for the user, which will be set in the JWT. Supported values are 'reader' and 'writer'
     *     role: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "currentKaclsId": "my_currentKaclsId",
     *   //   "fileId": "my_fileId",
     *   //   "jwt": "my_jwt",
     *   //   "kind": "my_kind"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.generateCseToken
     * @memberOf! ()
     *
     * @param {object=} params Parameters for request
     * @param {string=} params.fileId The ID of the file for which the JWT should be generated. If specified, the user's access will be checked on the file based on the value of the 'role' field.
     * @param {string=} params.role The role for the user, which will be set in the JWT. Supported values are 'reader' and 'writer'
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    generateCseToken(
      params: Params$Resource$Files$Generatecsetoken,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    generateCseToken(
      params?: Params$Resource$Files$Generatecsetoken,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GenerateCseTokenResponse>;
    generateCseToken(
      params: Params$Resource$Files$Generatecsetoken,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    generateCseToken(
      params: Params$Resource$Files$Generatecsetoken,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GenerateCseTokenResponse>,
      callback: BodyResponseCallback<Schema$GenerateCseTokenResponse>
    ): void;
    generateCseToken(
      params: Params$Resource$Files$Generatecsetoken,
      callback: BodyResponseCallback<Schema$GenerateCseTokenResponse>
    ): void;
    generateCseToken(
      callback: BodyResponseCallback<Schema$GenerateCseTokenResponse>
    ): void;
    generateCseToken(
      paramsOrCallback?:
        | Params$Resource$Files$Generatecsetoken
        | BodyResponseCallback<Schema$GenerateCseTokenResponse>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GenerateCseTokenResponse>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GenerateCseTokenResponse>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GenerateCseTokenResponse>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Files$Generatecsetoken;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Generatecsetoken;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files/generateCseToken').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: [],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GenerateCseTokenResponse>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$GenerateCseTokenResponse>(parameters);
      }
    }

    /**
     * drive.files.generateId
     * @desc Generates a file ID based on the provided local ID.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.apps.readonly',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.generateId({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "actionItems": [],
     *       //   "alternateLink": "my_alternateLink",
     *       //   "alwaysShowInPhotos": false,
     *       //   "ancestorHasAugmentedPermissions": false,
     *       //   "appDataContents": false,
     *       //   "appliedCategories": [],
     *       //   "approvalMetadata": {},
     *       //   "authorizedAppIds": [],
     *       //   "blockingDetectors": [],
     *       //   "canComment": false,
     *       //   "capabilities": {},
     *       //   "categoryMetadata": {},
     *       //   "changed": false,
     *       //   "clientEncryptionDetails": {},
     *       //   "commentsImported": false,
     *       //   "containsUnsubscribedChildren": false,
     *       //   "contentRestriction": {},
     *       //   "contentRestrictions": [],
     *       //   "copyRequiresWriterPermission": false,
     *       //   "copyable": false,
     *       //   "createdDate": "my_createdDate",
     *       //   "creator": {},
     *       //   "creatorAppId": "my_creatorAppId",
     *       //   "customerId": "my_customerId",
     *       //   "defaultOpenWithLink": "my_defaultOpenWithLink",
     *       //   "descendantOfRoot": false,
     *       //   "description": "my_description",
     *       //   "detectors": [],
     *       //   "downloadUrl": "my_downloadUrl",
     *       //   "driveId": "my_driveId",
     *       //   "driveSource": {},
     *       //   "editable": false,
     *       //   "efficiencyInfo": {},
     *       //   "embedLink": "my_embedLink",
     *       //   "embedded": false,
     *       //   "embeddingParent": "my_embeddingParent",
     *       //   "etag": "my_etag",
     *       //   "explicitlyTrashed": false,
     *       //   "exportLinks": {},
     *       //   "fileExtension": "my_fileExtension",
     *       //   "fileSize": "my_fileSize",
     *       //   "flaggedForAbuse": false,
     *       //   "folderColor": "my_folderColor",
     *       //   "folderColorRgb": "my_folderColorRgb",
     *       //   "folderFeatures": [],
     *       //   "folderProperties": {},
     *       //   "fullFileExtension": "my_fullFileExtension",
     *       //   "gplusMedia": false,
     *       //   "hasAppsScriptAddOn": false,
     *       //   "hasAugmentedPermissions": false,
     *       //   "hasChildFolders": false,
     *       //   "hasComment": false,
     *       //   "hasLegacyBlobComments": false,
     *       //   "hasPermissionsForViews": false,
     *       //   "hasPreventDownloadConsequence": false,
     *       //   "hasThumbnail": false,
     *       //   "hasVisitorPermissions": false,
     *       //   "headRevisionCreationDate": "my_headRevisionCreationDate",
     *       //   "headRevisionId": "my_headRevisionId",
     *       //   "iconLink": "my_iconLink",
     *       //   "id": "my_id",
     *       //   "imageMediaMetadata": {},
     *       //   "indexableText": {},
     *       //   "isAppAuthorized": false,
     *       //   "isCompressed": false,
     *       //   "kind": "my_kind",
     *       //   "labelInfo": {},
     *       //   "labels": {},
     *       //   "lastModifyingUser": {},
     *       //   "lastModifyingUserName": "my_lastModifyingUserName",
     *       //   "lastViewedByMeDate": "my_lastViewedByMeDate",
     *       //   "linkShareMetadata": {},
     *       //   "localId": {},
     *       //   "markedViewedByMeDate": "my_markedViewedByMeDate",
     *       //   "md5Checksum": "my_md5Checksum",
     *       //   "mimeType": "my_mimeType",
     *       //   "modifiedByMeDate": "my_modifiedByMeDate",
     *       //   "modifiedDate": "my_modifiedDate",
     *       //   "openWithLinks": {},
     *       //   "organizationDisplayName": "my_organizationDisplayName",
     *       //   "originalFileSize": "my_originalFileSize",
     *       //   "originalFilename": "my_originalFilename",
     *       //   "originalMd5Checksum": "my_originalMd5Checksum",
     *       //   "ownedByMe": false,
     *       //   "ownerNames": [],
     *       //   "owners": [],
     *       //   "packageFileSize": "my_packageFileSize",
     *       //   "packageId": "my_packageId",
     *       //   "pairedDocType": "my_pairedDocType",
     *       //   "parent": {},
     *       //   "parents": [],
     *       //   "passivelySubscribed": false,
     *       //   "permissionIds": [],
     *       //   "permissions": [],
     *       //   "permissionsSummary": {},
     *       //   "photosCompressionStatus": "my_photosCompressionStatus",
     *       //   "photosStoragePolicy": "my_photosStoragePolicy",
     *       //   "preview": {},
     *       //   "primaryDomainName": "my_primaryDomainName",
     *       //   "primarySyncParentId": "my_primarySyncParentId",
     *       //   "properties": [],
     *       //   "publishingInfo": {},
     *       //   "quotaBytesUsed": "my_quotaBytesUsed",
     *       //   "readable": false,
     *       //   "readersCanSeeComments": false,
     *       //   "recency": "my_recency",
     *       //   "recencyReason": "my_recencyReason",
     *       //   "recursiveFileCount": "my_recursiveFileCount",
     *       //   "recursiveFileSize": "my_recursiveFileSize",
     *       //   "recursiveQuotaBytesUsed": "my_recursiveQuotaBytesUsed",
     *       //   "removedParents": [],
     *       //   "resourceKey": "my_resourceKey",
     *       //   "searchResultSource": "my_searchResultSource",
     *       //   "selfLink": "my_selfLink",
     *       //   "serverCreatedDate": "my_serverCreatedDate",
     *       //   "sha1Checksums": [],
     *       //   "shareLink": "my_shareLink",
     *       //   "shareable": false,
     *       //   "shared": false,
     *       //   "sharedWithMeDate": "my_sharedWithMeDate",
     *       //   "sharingUser": {},
     *       //   "shortcutDetails": {},
     *       //   "shortcutTargetId": "my_shortcutTargetId",
     *       //   "shortcutTargetMimeType": "my_shortcutTargetMimeType",
     *       //   "source": {},
     *       //   "sourceAppId": "my_sourceAppId",
     *       //   "sources": {},
     *       //   "spaces": [],
     *       //   "storagePolicyPending": false,
     *       //   "subscribed": false,
     *       //   "supportedRoles": [],
     *       //   "teamDriveId": "my_teamDriveId",
     *       //   "templateData": {},
     *       //   "thumbnail": {},
     *       //   "thumbnailLink": "my_thumbnailLink",
     *       //   "thumbnailVersion": "my_thumbnailVersion",
     *       //   "title": "my_title",
     *       //   "trashedDate": "my_trashedDate",
     *       //   "trashingUser": {},
     *       //   "userPermission": {},
     *       //   "version": "my_version",
     *       //   "videoMediaMetadata": {},
     *       //   "warningDetectors": [],
     *       //   "webContentLink": "my_webContentLink",
     *       //   "webViewLink": "my_webViewLink",
     *       //   "workspaceIds": [],
     *       //   "writersCanShare": false
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "actionItems": [],
     *   //   "alternateLink": "my_alternateLink",
     *   //   "alwaysShowInPhotos": false,
     *   //   "ancestorHasAugmentedPermissions": false,
     *   //   "appDataContents": false,
     *   //   "appliedCategories": [],
     *   //   "approvalMetadata": {},
     *   //   "authorizedAppIds": [],
     *   //   "blockingDetectors": [],
     *   //   "canComment": false,
     *   //   "capabilities": {},
     *   //   "categoryMetadata": {},
     *   //   "changed": false,
     *   //   "clientEncryptionDetails": {},
     *   //   "commentsImported": false,
     *   //   "containsUnsubscribedChildren": false,
     *   //   "contentRestriction": {},
     *   //   "contentRestrictions": [],
     *   //   "copyRequiresWriterPermission": false,
     *   //   "copyable": false,
     *   //   "createdDate": "my_createdDate",
     *   //   "creator": {},
     *   //   "creatorAppId": "my_creatorAppId",
     *   //   "customerId": "my_customerId",
     *   //   "defaultOpenWithLink": "my_defaultOpenWithLink",
     *   //   "descendantOfRoot": false,
     *   //   "description": "my_description",
     *   //   "detectors": [],
     *   //   "downloadUrl": "my_downloadUrl",
     *   //   "driveId": "my_driveId",
     *   //   "driveSource": {},
     *   //   "editable": false,
     *   //   "efficiencyInfo": {},
     *   //   "embedLink": "my_embedLink",
     *   //   "embedded": false,
     *   //   "embeddingParent": "my_embeddingParent",
     *   //   "etag": "my_etag",
     *   //   "explicitlyTrashed": false,
     *   //   "exportLinks": {},
     *   //   "fileExtension": "my_fileExtension",
     *   //   "fileSize": "my_fileSize",
     *   //   "flaggedForAbuse": false,
     *   //   "folderColor": "my_folderColor",
     *   //   "folderColorRgb": "my_folderColorRgb",
     *   //   "folderFeatures": [],
     *   //   "folderProperties": {},
     *   //   "fullFileExtension": "my_fullFileExtension",
     *   //   "gplusMedia": false,
     *   //   "hasAppsScriptAddOn": false,
     *   //   "hasAugmentedPermissions": false,
     *   //   "hasChildFolders": false,
     *   //   "hasComment": false,
     *   //   "hasLegacyBlobComments": false,
     *   //   "hasPermissionsForViews": false,
     *   //   "hasPreventDownloadConsequence": false,
     *   //   "hasThumbnail": false,
     *   //   "hasVisitorPermissions": false,
     *   //   "headRevisionCreationDate": "my_headRevisionCreationDate",
     *   //   "headRevisionId": "my_headRevisionId",
     *   //   "iconLink": "my_iconLink",
     *   //   "id": "my_id",
     *   //   "imageMediaMetadata": {},
     *   //   "indexableText": {},
     *   //   "isAppAuthorized": false,
     *   //   "isCompressed": false,
     *   //   "kind": "my_kind",
     *   //   "labelInfo": {},
     *   //   "labels": {},
     *   //   "lastModifyingUser": {},
     *   //   "lastModifyingUserName": "my_lastModifyingUserName",
     *   //   "lastViewedByMeDate": "my_lastViewedByMeDate",
     *   //   "linkShareMetadata": {},
     *   //   "localId": {},
     *   //   "markedViewedByMeDate": "my_markedViewedByMeDate",
     *   //   "md5Checksum": "my_md5Checksum",
     *   //   "mimeType": "my_mimeType",
     *   //   "modifiedByMeDate": "my_modifiedByMeDate",
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "openWithLinks": {},
     *   //   "organizationDisplayName": "my_organizationDisplayName",
     *   //   "originalFileSize": "my_originalFileSize",
     *   //   "originalFilename": "my_originalFilename",
     *   //   "originalMd5Checksum": "my_originalMd5Checksum",
     *   //   "ownedByMe": false,
     *   //   "ownerNames": [],
     *   //   "owners": [],
     *   //   "packageFileSize": "my_packageFileSize",
     *   //   "packageId": "my_packageId",
     *   //   "pairedDocType": "my_pairedDocType",
     *   //   "parent": {},
     *   //   "parents": [],
     *   //   "passivelySubscribed": false,
     *   //   "permissionIds": [],
     *   //   "permissions": [],
     *   //   "permissionsSummary": {},
     *   //   "photosCompressionStatus": "my_photosCompressionStatus",
     *   //   "photosStoragePolicy": "my_photosStoragePolicy",
     *   //   "preview": {},
     *   //   "primaryDomainName": "my_primaryDomainName",
     *   //   "primarySyncParentId": "my_primarySyncParentId",
     *   //   "properties": [],
     *   //   "publishingInfo": {},
     *   //   "quotaBytesUsed": "my_quotaBytesUsed",
     *   //   "readable": false,
     *   //   "readersCanSeeComments": false,
     *   //   "recency": "my_recency",
     *   //   "recencyReason": "my_recencyReason",
     *   //   "recursiveFileCount": "my_recursiveFileCount",
     *   //   "recursiveFileSize": "my_recursiveFileSize",
     *   //   "recursiveQuotaBytesUsed": "my_recursiveQuotaBytesUsed",
     *   //   "removedParents": [],
     *   //   "resourceKey": "my_resourceKey",
     *   //   "searchResultSource": "my_searchResultSource",
     *   //   "selfLink": "my_selfLink",
     *   //   "serverCreatedDate": "my_serverCreatedDate",
     *   //   "sha1Checksums": [],
     *   //   "shareLink": "my_shareLink",
     *   //   "shareable": false,
     *   //   "shared": false,
     *   //   "sharedWithMeDate": "my_sharedWithMeDate",
     *   //   "sharingUser": {},
     *   //   "shortcutDetails": {},
     *   //   "shortcutTargetId": "my_shortcutTargetId",
     *   //   "shortcutTargetMimeType": "my_shortcutTargetMimeType",
     *   //   "source": {},
     *   //   "sourceAppId": "my_sourceAppId",
     *   //   "sources": {},
     *   //   "spaces": [],
     *   //   "storagePolicyPending": false,
     *   //   "subscribed": false,
     *   //   "supportedRoles": [],
     *   //   "teamDriveId": "my_teamDriveId",
     *   //   "templateData": {},
     *   //   "thumbnail": {},
     *   //   "thumbnailLink": "my_thumbnailLink",
     *   //   "thumbnailVersion": "my_thumbnailVersion",
     *   //   "title": "my_title",
     *   //   "trashedDate": "my_trashedDate",
     *   //   "trashingUser": {},
     *   //   "userPermission": {},
     *   //   "version": "my_version",
     *   //   "videoMediaMetadata": {},
     *   //   "warningDetectors": [],
     *   //   "webContentLink": "my_webContentLink",
     *   //   "webViewLink": "my_webViewLink",
     *   //   "workspaceIds": [],
     *   //   "writersCanShare": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.generateId
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {().File} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    generateId(
      params: Params$Resource$Files$Generateid,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    generateId(
      params?: Params$Resource$Files$Generateid,
      options?: MethodOptions
    ): GaxiosPromise<Schema$File>;
    generateId(
      params: Params$Resource$Files$Generateid,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    generateId(
      params: Params$Resource$Files$Generateid,
      options: MethodOptions | BodyResponseCallback<Schema$File>,
      callback: BodyResponseCallback<Schema$File>
    ): void;
    generateId(
      params: Params$Resource$Files$Generateid,
      callback: BodyResponseCallback<Schema$File>
    ): void;
    generateId(callback: BodyResponseCallback<Schema$File>): void;
    generateId(
      paramsOrCallback?:
        | Params$Resource$Files$Generateid
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$File> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Files$Generateid;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Generateid;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files/generateId').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: [],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$File>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$File>(parameters);
      }
    }

    /**
     * drive.files.generateIds
     * @desc Generates a set of file IDs which can be provided in insert or copy requests.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.file',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.generateIds({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // Maximum number of IDs to return.
     *     maxResults: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // The space in which the IDs can be used to create new items. Supported values are 'drive' and 'appDataFolder'.
     *     space: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // The type of items which the IDs can be used for. Supported values are 'files' and 'shortcuts'. Note that 'shortcuts' are only supported in the drive 'space'.
     *     type: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "ids": [],
     *   //   "kind": "my_kind",
     *   //   "space": "my_space",
     *   //   "type": "my_type"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.generateIds
     * @memberOf! ()
     *
     * @param {object=} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.maxResults Maximum number of IDs to return.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {string=} params.space The space in which the IDs can be used to create new items. Supported values are 'drive' and 'appDataFolder'.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {string=} params.type The type of items which the IDs can be used for. Supported values are 'files' and 'shortcuts'. Note that 'shortcuts' are only supported in the drive 'space'.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    generateIds(
      params: Params$Resource$Files$Generateids,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    generateIds(
      params?: Params$Resource$Files$Generateids,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GeneratedIds>;
    generateIds(
      params: Params$Resource$Files$Generateids,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    generateIds(
      params: Params$Resource$Files$Generateids,
      options: MethodOptions | BodyResponseCallback<Schema$GeneratedIds>,
      callback: BodyResponseCallback<Schema$GeneratedIds>
    ): void;
    generateIds(
      params: Params$Resource$Files$Generateids,
      callback: BodyResponseCallback<Schema$GeneratedIds>
    ): void;
    generateIds(callback: BodyResponseCallback<Schema$GeneratedIds>): void;
    generateIds(
      paramsOrCallback?:
        | Params$Resource$Files$Generateids
        | BodyResponseCallback<Schema$GeneratedIds>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GeneratedIds>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GeneratedIds>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$GeneratedIds> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Files$Generateids;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Generateids;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files/generateIds').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: [],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GeneratedIds>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$GeneratedIds>(parameters);
      }
    }

    /**
     * drive.files.get
     * @desc Gets a file's metadata by ID.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.photos.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.get({
     *     // Whether the user is acknowledging the risk of downloading known malware or other abusive files.
     *     acknowledgeAbuse: 'placeholder-value',
     *     // Whether to retrieve all properties, not just those visible to the app.
     *     allProperties: 'placeholder-value',
     *     // The origin in which the sharing widget will be embedded. This should be supplied when requesting the shareLink field.
     *     embedOrigin: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // A comma-separated list of parent IDs that have already been discovered by the requesting user. Parent filtering is prevented for parents on this list.
     *     expectedParentIds: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID for the file in question.
     *     fileId: 'placeholder-value',
     *     // DEPRECATED; not needed. A comma separated list of app IDs. If set the result will only include a file inside the app data folder if it could be opened by any of the specified app IDs with the drive.appdata scope. Requires the ALL_APPDATA scope.
     *     fileScopeAppIds: 'placeholder-value',
     *     // If true, all badged Labels will be returned in the labelInfo part of the response.
     *     includeBadgedLabels: 'placeholder-value',
     *     // A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     *     includeLabels: 'placeholder-value',
     *     // A comma-separated list of names of Categories to include in the response.
     *     includeMetadataForCategories: 'placeholder-value',
     *     // Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     *     includePermissionsForView: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // This parameter is deprecated and has no function.
     *     projection: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // Whether the request should be rejected if it would generate an inefficient query.
     *     rejectInefficientRequests: 'placeholder-value',
     *     // Whether the request should return 403 instead 404 if the file exists but the user doesn't have read access. This option is not compatible with the deprecated updateViewedDate parameter. If set for any item in a batch, it will be set for all.
     *     reportPermissionErrors: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request should return efficiency info.
     *     returnEfficiencyInfo: 'placeholder-value',
     *     // Specifies the Revision ID that should be downloaded. Ignored unless alt=media is specified.
     *     revisionId: 'placeholder-value',
     *     // Deprecated. This parameter is no longer necessary.
     *     sources: 'placeholder-value',
     *     // Whether the requesting application supports both My Drives and shared drives.
     *     supportsAllDrives: 'placeholder-value',
     *     // Deprecated - use supportsAllDrives instead.
     *     supportsTeamDrives: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // Deprecated: Use files.update with modifiedDateBehavior=noChange, updateViewedDate=true and an empty request body.
     *     updateViewedDate: 'placeholder-value',
     *     // Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the item belongs.
     *     useDomainAdminAccess: 'placeholder-value',
     *     // If true, Permissions with type Audience are represented with Domain type.
     *     useLegacyDomainPermissionBehavior: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "actionItems": [],
     *   //   "alternateLink": "my_alternateLink",
     *   //   "alwaysShowInPhotos": false,
     *   //   "ancestorHasAugmentedPermissions": false,
     *   //   "appDataContents": false,
     *   //   "appliedCategories": [],
     *   //   "approvalMetadata": {},
     *   //   "authorizedAppIds": [],
     *   //   "blockingDetectors": [],
     *   //   "canComment": false,
     *   //   "capabilities": {},
     *   //   "categoryMetadata": {},
     *   //   "changed": false,
     *   //   "clientEncryptionDetails": {},
     *   //   "commentsImported": false,
     *   //   "containsUnsubscribedChildren": false,
     *   //   "contentRestriction": {},
     *   //   "contentRestrictions": [],
     *   //   "copyRequiresWriterPermission": false,
     *   //   "copyable": false,
     *   //   "createdDate": "my_createdDate",
     *   //   "creator": {},
     *   //   "creatorAppId": "my_creatorAppId",
     *   //   "customerId": "my_customerId",
     *   //   "defaultOpenWithLink": "my_defaultOpenWithLink",
     *   //   "descendantOfRoot": false,
     *   //   "description": "my_description",
     *   //   "detectors": [],
     *   //   "downloadUrl": "my_downloadUrl",
     *   //   "driveId": "my_driveId",
     *   //   "driveSource": {},
     *   //   "editable": false,
     *   //   "efficiencyInfo": {},
     *   //   "embedLink": "my_embedLink",
     *   //   "embedded": false,
     *   //   "embeddingParent": "my_embeddingParent",
     *   //   "etag": "my_etag",
     *   //   "explicitlyTrashed": false,
     *   //   "exportLinks": {},
     *   //   "fileExtension": "my_fileExtension",
     *   //   "fileSize": "my_fileSize",
     *   //   "flaggedForAbuse": false,
     *   //   "folderColor": "my_folderColor",
     *   //   "folderColorRgb": "my_folderColorRgb",
     *   //   "folderFeatures": [],
     *   //   "folderProperties": {},
     *   //   "fullFileExtension": "my_fullFileExtension",
     *   //   "gplusMedia": false,
     *   //   "hasAppsScriptAddOn": false,
     *   //   "hasAugmentedPermissions": false,
     *   //   "hasChildFolders": false,
     *   //   "hasComment": false,
     *   //   "hasLegacyBlobComments": false,
     *   //   "hasPermissionsForViews": false,
     *   //   "hasPreventDownloadConsequence": false,
     *   //   "hasThumbnail": false,
     *   //   "hasVisitorPermissions": false,
     *   //   "headRevisionCreationDate": "my_headRevisionCreationDate",
     *   //   "headRevisionId": "my_headRevisionId",
     *   //   "iconLink": "my_iconLink",
     *   //   "id": "my_id",
     *   //   "imageMediaMetadata": {},
     *   //   "indexableText": {},
     *   //   "isAppAuthorized": false,
     *   //   "isCompressed": false,
     *   //   "kind": "my_kind",
     *   //   "labelInfo": {},
     *   //   "labels": {},
     *   //   "lastModifyingUser": {},
     *   //   "lastModifyingUserName": "my_lastModifyingUserName",
     *   //   "lastViewedByMeDate": "my_lastViewedByMeDate",
     *   //   "linkShareMetadata": {},
     *   //   "localId": {},
     *   //   "markedViewedByMeDate": "my_markedViewedByMeDate",
     *   //   "md5Checksum": "my_md5Checksum",
     *   //   "mimeType": "my_mimeType",
     *   //   "modifiedByMeDate": "my_modifiedByMeDate",
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "openWithLinks": {},
     *   //   "organizationDisplayName": "my_organizationDisplayName",
     *   //   "originalFileSize": "my_originalFileSize",
     *   //   "originalFilename": "my_originalFilename",
     *   //   "originalMd5Checksum": "my_originalMd5Checksum",
     *   //   "ownedByMe": false,
     *   //   "ownerNames": [],
     *   //   "owners": [],
     *   //   "packageFileSize": "my_packageFileSize",
     *   //   "packageId": "my_packageId",
     *   //   "pairedDocType": "my_pairedDocType",
     *   //   "parent": {},
     *   //   "parents": [],
     *   //   "passivelySubscribed": false,
     *   //   "permissionIds": [],
     *   //   "permissions": [],
     *   //   "permissionsSummary": {},
     *   //   "photosCompressionStatus": "my_photosCompressionStatus",
     *   //   "photosStoragePolicy": "my_photosStoragePolicy",
     *   //   "preview": {},
     *   //   "primaryDomainName": "my_primaryDomainName",
     *   //   "primarySyncParentId": "my_primarySyncParentId",
     *   //   "properties": [],
     *   //   "publishingInfo": {},
     *   //   "quotaBytesUsed": "my_quotaBytesUsed",
     *   //   "readable": false,
     *   //   "readersCanSeeComments": false,
     *   //   "recency": "my_recency",
     *   //   "recencyReason": "my_recencyReason",
     *   //   "recursiveFileCount": "my_recursiveFileCount",
     *   //   "recursiveFileSize": "my_recursiveFileSize",
     *   //   "recursiveQuotaBytesUsed": "my_recursiveQuotaBytesUsed",
     *   //   "removedParents": [],
     *   //   "resourceKey": "my_resourceKey",
     *   //   "searchResultSource": "my_searchResultSource",
     *   //   "selfLink": "my_selfLink",
     *   //   "serverCreatedDate": "my_serverCreatedDate",
     *   //   "sha1Checksums": [],
     *   //   "shareLink": "my_shareLink",
     *   //   "shareable": false,
     *   //   "shared": false,
     *   //   "sharedWithMeDate": "my_sharedWithMeDate",
     *   //   "sharingUser": {},
     *   //   "shortcutDetails": {},
     *   //   "shortcutTargetId": "my_shortcutTargetId",
     *   //   "shortcutTargetMimeType": "my_shortcutTargetMimeType",
     *   //   "source": {},
     *   //   "sourceAppId": "my_sourceAppId",
     *   //   "sources": {},
     *   //   "spaces": [],
     *   //   "storagePolicyPending": false,
     *   //   "subscribed": false,
     *   //   "supportedRoles": [],
     *   //   "teamDriveId": "my_teamDriveId",
     *   //   "templateData": {},
     *   //   "thumbnail": {},
     *   //   "thumbnailLink": "my_thumbnailLink",
     *   //   "thumbnailVersion": "my_thumbnailVersion",
     *   //   "title": "my_title",
     *   //   "trashedDate": "my_trashedDate",
     *   //   "trashingUser": {},
     *   //   "userPermission": {},
     *   //   "version": "my_version",
     *   //   "videoMediaMetadata": {},
     *   //   "warningDetectors": [],
     *   //   "webContentLink": "my_webContentLink",
     *   //   "webViewLink": "my_webViewLink",
     *   //   "workspaceIds": [],
     *   //   "writersCanShare": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.acknowledgeAbuse Whether the user is acknowledging the risk of downloading known malware or other abusive files.
     * @param {boolean=} params.allProperties Whether to retrieve all properties, not just those visible to the app.
     * @param {string=} params.embedOrigin The origin in which the sharing widget will be embedded. This should be supplied when requesting the shareLink field.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.expectedParentIds A comma-separated list of parent IDs that have already been discovered by the requesting user. Parent filtering is prevented for parents on this list.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID for the file in question.
     * @param {string=} params.fileScopeAppIds DEPRECATED; not needed. A comma separated list of app IDs. If set the result will only include a file inside the app data folder if it could be opened by any of the specified app IDs with the drive.appdata scope. Requires the ALL_APPDATA scope.
     * @param {boolean=} params.includeBadgedLabels If true, all badged Labels will be returned in the labelInfo part of the response.
     * @param {string=} params.includeLabels A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     * @param {string=} params.includeMetadataForCategories A comma-separated list of names of Categories to include in the response.
     * @param {string=} params.includePermissionsForView Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.projection This parameter is deprecated and has no function.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {boolean=} params.rejectInefficientRequests Whether the request should be rejected if it would generate an inefficient query.
     * @param {boolean=} params.reportPermissionErrors Whether the request should return 403 instead 404 if the file exists but the user doesn't have read access. This option is not compatible with the deprecated updateViewedDate parameter. If set for any item in a batch, it will be set for all.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {boolean=} params.returnEfficiencyInfo Whether the request should return efficiency info.
     * @param {string=} params.revisionId Specifies the Revision ID that should be downloaded. Ignored unless alt=media is specified.
     * @param {string=} params.sources Deprecated. This parameter is no longer necessary.
     * @param {boolean=} params.supportsAllDrives Whether the requesting application supports both My Drives and shared drives.
     * @param {boolean=} params.supportsTeamDrives Deprecated - use supportsAllDrives instead.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {boolean=} params.updateViewedDate Deprecated: Use files.update with modifiedDateBehavior=noChange, updateViewedDate=true and an empty request body.
     * @param {boolean=} params.useDomainAdminAccess Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the item belongs.
     * @param {boolean=} params.useLegacyDomainPermissionBehavior If true, Permissions with type Audience are represented with Domain type.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params: Params$Resource$Files$Get,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    get(
      params?: Params$Resource$Files$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$File>;
    get(
      params: Params$Resource$Files$Get,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    get(
      params: Params$Resource$Files$Get,
      options: MethodOptions | BodyResponseCallback<Schema$File>,
      callback: BodyResponseCallback<Schema$File>
    ): void;
    get(
      params: Params$Resource$Files$Get,
      callback: BodyResponseCallback<Schema$File>
    ): void;
    get(callback: BodyResponseCallback<Schema$File>): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Files$Get
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$File> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Files$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files/{fileId}').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$File>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$File>(parameters);
      }
    }

    /**
     * drive.files.insert
     * @desc Insert a new file.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.apps.readonly',
     *       'https://www.googleapis.com/auth/drive.file',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.insert({
     *     // Whether to convert this file to the corresponding Google Docs format.
     *     convert: 'placeholder-value',
     *     // Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. Requests that specify more than one parent will fail.
     *     enforceSingleParent: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // If true, all badged Labels will be returned in the labelInfo part of the response.
     *     includeBadgedLabels: 'placeholder-value',
     *     // A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     *     includeLabels: 'placeholder-value',
     *     // A comma-separated list of names of Categories to include in the response.
     *     includeMetadataForCategories: 'placeholder-value',
     *     // Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     *     includePermissionsForView: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads.
     *     ocr: 'placeholder-value',
     *     // If ocr is true, hints at the language to use. Valid values are ISO 639-1 codes.
     *     ocrLanguage: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // Whether to pin the head revision of the uploaded file. A file can have a maximum of 200 pinned revisions.
     *     pinned: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // For eligible files (e.g. image and video) whether to store the data at original compressed high-quality resolution. Valid values are 'original' and 'highQuality'.
     *     storagePolicy: 'placeholder-value',
     *     // Whether the requesting application supports both My Drives and shared drives.
     *     supportsAllDrives: 'placeholder-value',
     *     // Deprecated use supportsAllDrives instead.
     *     supportsTeamDrives: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // The language of the timed text.
     *     timedTextLanguage: 'placeholder-value',
     *     // The timed text track name.
     *     timedTextTrackName: 'placeholder-value',
     *     // Whether to update the view date when inserting the file.
     *     updateViewedDate: 'placeholder-value',
     *     // Whether to use the content as indexable text.
     *     useContentAsIndexableText: 'placeholder-value',
     *     // If true, Permissions with type Audience are represented with Domain type.
     *     useLegacyDomainPermissionBehavior: 'placeholder-value',
     *     // The visibility of the new file. This parameter is only relevant when convert=false.
     *     visibility: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "actionItems": [],
     *       //   "alternateLink": "my_alternateLink",
     *       //   "alwaysShowInPhotos": false,
     *       //   "ancestorHasAugmentedPermissions": false,
     *       //   "appDataContents": false,
     *       //   "appliedCategories": [],
     *       //   "approvalMetadata": {},
     *       //   "authorizedAppIds": [],
     *       //   "blockingDetectors": [],
     *       //   "canComment": false,
     *       //   "capabilities": {},
     *       //   "categoryMetadata": {},
     *       //   "changed": false,
     *       //   "clientEncryptionDetails": {},
     *       //   "commentsImported": false,
     *       //   "containsUnsubscribedChildren": false,
     *       //   "contentRestriction": {},
     *       //   "contentRestrictions": [],
     *       //   "copyRequiresWriterPermission": false,
     *       //   "copyable": false,
     *       //   "createdDate": "my_createdDate",
     *       //   "creator": {},
     *       //   "creatorAppId": "my_creatorAppId",
     *       //   "customerId": "my_customerId",
     *       //   "defaultOpenWithLink": "my_defaultOpenWithLink",
     *       //   "descendantOfRoot": false,
     *       //   "description": "my_description",
     *       //   "detectors": [],
     *       //   "downloadUrl": "my_downloadUrl",
     *       //   "driveId": "my_driveId",
     *       //   "driveSource": {},
     *       //   "editable": false,
     *       //   "efficiencyInfo": {},
     *       //   "embedLink": "my_embedLink",
     *       //   "embedded": false,
     *       //   "embeddingParent": "my_embeddingParent",
     *       //   "etag": "my_etag",
     *       //   "explicitlyTrashed": false,
     *       //   "exportLinks": {},
     *       //   "fileExtension": "my_fileExtension",
     *       //   "fileSize": "my_fileSize",
     *       //   "flaggedForAbuse": false,
     *       //   "folderColor": "my_folderColor",
     *       //   "folderColorRgb": "my_folderColorRgb",
     *       //   "folderFeatures": [],
     *       //   "folderProperties": {},
     *       //   "fullFileExtension": "my_fullFileExtension",
     *       //   "gplusMedia": false,
     *       //   "hasAppsScriptAddOn": false,
     *       //   "hasAugmentedPermissions": false,
     *       //   "hasChildFolders": false,
     *       //   "hasComment": false,
     *       //   "hasLegacyBlobComments": false,
     *       //   "hasPermissionsForViews": false,
     *       //   "hasPreventDownloadConsequence": false,
     *       //   "hasThumbnail": false,
     *       //   "hasVisitorPermissions": false,
     *       //   "headRevisionCreationDate": "my_headRevisionCreationDate",
     *       //   "headRevisionId": "my_headRevisionId",
     *       //   "iconLink": "my_iconLink",
     *       //   "id": "my_id",
     *       //   "imageMediaMetadata": {},
     *       //   "indexableText": {},
     *       //   "isAppAuthorized": false,
     *       //   "isCompressed": false,
     *       //   "kind": "my_kind",
     *       //   "labelInfo": {},
     *       //   "labels": {},
     *       //   "lastModifyingUser": {},
     *       //   "lastModifyingUserName": "my_lastModifyingUserName",
     *       //   "lastViewedByMeDate": "my_lastViewedByMeDate",
     *       //   "linkShareMetadata": {},
     *       //   "localId": {},
     *       //   "markedViewedByMeDate": "my_markedViewedByMeDate",
     *       //   "md5Checksum": "my_md5Checksum",
     *       //   "mimeType": "my_mimeType",
     *       //   "modifiedByMeDate": "my_modifiedByMeDate",
     *       //   "modifiedDate": "my_modifiedDate",
     *       //   "openWithLinks": {},
     *       //   "organizationDisplayName": "my_organizationDisplayName",
     *       //   "originalFileSize": "my_originalFileSize",
     *       //   "originalFilename": "my_originalFilename",
     *       //   "originalMd5Checksum": "my_originalMd5Checksum",
     *       //   "ownedByMe": false,
     *       //   "ownerNames": [],
     *       //   "owners": [],
     *       //   "packageFileSize": "my_packageFileSize",
     *       //   "packageId": "my_packageId",
     *       //   "pairedDocType": "my_pairedDocType",
     *       //   "parent": {},
     *       //   "parents": [],
     *       //   "passivelySubscribed": false,
     *       //   "permissionIds": [],
     *       //   "permissions": [],
     *       //   "permissionsSummary": {},
     *       //   "photosCompressionStatus": "my_photosCompressionStatus",
     *       //   "photosStoragePolicy": "my_photosStoragePolicy",
     *       //   "preview": {},
     *       //   "primaryDomainName": "my_primaryDomainName",
     *       //   "primarySyncParentId": "my_primarySyncParentId",
     *       //   "properties": [],
     *       //   "publishingInfo": {},
     *       //   "quotaBytesUsed": "my_quotaBytesUsed",
     *       //   "readable": false,
     *       //   "readersCanSeeComments": false,
     *       //   "recency": "my_recency",
     *       //   "recencyReason": "my_recencyReason",
     *       //   "recursiveFileCount": "my_recursiveFileCount",
     *       //   "recursiveFileSize": "my_recursiveFileSize",
     *       //   "recursiveQuotaBytesUsed": "my_recursiveQuotaBytesUsed",
     *       //   "removedParents": [],
     *       //   "resourceKey": "my_resourceKey",
     *       //   "searchResultSource": "my_searchResultSource",
     *       //   "selfLink": "my_selfLink",
     *       //   "serverCreatedDate": "my_serverCreatedDate",
     *       //   "sha1Checksums": [],
     *       //   "shareLink": "my_shareLink",
     *       //   "shareable": false,
     *       //   "shared": false,
     *       //   "sharedWithMeDate": "my_sharedWithMeDate",
     *       //   "sharingUser": {},
     *       //   "shortcutDetails": {},
     *       //   "shortcutTargetId": "my_shortcutTargetId",
     *       //   "shortcutTargetMimeType": "my_shortcutTargetMimeType",
     *       //   "source": {},
     *       //   "sourceAppId": "my_sourceAppId",
     *       //   "sources": {},
     *       //   "spaces": [],
     *       //   "storagePolicyPending": false,
     *       //   "subscribed": false,
     *       //   "supportedRoles": [],
     *       //   "teamDriveId": "my_teamDriveId",
     *       //   "templateData": {},
     *       //   "thumbnail": {},
     *       //   "thumbnailLink": "my_thumbnailLink",
     *       //   "thumbnailVersion": "my_thumbnailVersion",
     *       //   "title": "my_title",
     *       //   "trashedDate": "my_trashedDate",
     *       //   "trashingUser": {},
     *       //   "userPermission": {},
     *       //   "version": "my_version",
     *       //   "videoMediaMetadata": {},
     *       //   "warningDetectors": [],
     *       //   "webContentLink": "my_webContentLink",
     *       //   "webViewLink": "my_webViewLink",
     *       //   "workspaceIds": [],
     *       //   "writersCanShare": false
     *       // }
     *     },
     *     media: {
     *       mimeType: 'placeholder-value',
     *       body: 'placeholder-value',
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "actionItems": [],
     *   //   "alternateLink": "my_alternateLink",
     *   //   "alwaysShowInPhotos": false,
     *   //   "ancestorHasAugmentedPermissions": false,
     *   //   "appDataContents": false,
     *   //   "appliedCategories": [],
     *   //   "approvalMetadata": {},
     *   //   "authorizedAppIds": [],
     *   //   "blockingDetectors": [],
     *   //   "canComment": false,
     *   //   "capabilities": {},
     *   //   "categoryMetadata": {},
     *   //   "changed": false,
     *   //   "clientEncryptionDetails": {},
     *   //   "commentsImported": false,
     *   //   "containsUnsubscribedChildren": false,
     *   //   "contentRestriction": {},
     *   //   "contentRestrictions": [],
     *   //   "copyRequiresWriterPermission": false,
     *   //   "copyable": false,
     *   //   "createdDate": "my_createdDate",
     *   //   "creator": {},
     *   //   "creatorAppId": "my_creatorAppId",
     *   //   "customerId": "my_customerId",
     *   //   "defaultOpenWithLink": "my_defaultOpenWithLink",
     *   //   "descendantOfRoot": false,
     *   //   "description": "my_description",
     *   //   "detectors": [],
     *   //   "downloadUrl": "my_downloadUrl",
     *   //   "driveId": "my_driveId",
     *   //   "driveSource": {},
     *   //   "editable": false,
     *   //   "efficiencyInfo": {},
     *   //   "embedLink": "my_embedLink",
     *   //   "embedded": false,
     *   //   "embeddingParent": "my_embeddingParent",
     *   //   "etag": "my_etag",
     *   //   "explicitlyTrashed": false,
     *   //   "exportLinks": {},
     *   //   "fileExtension": "my_fileExtension",
     *   //   "fileSize": "my_fileSize",
     *   //   "flaggedForAbuse": false,
     *   //   "folderColor": "my_folderColor",
     *   //   "folderColorRgb": "my_folderColorRgb",
     *   //   "folderFeatures": [],
     *   //   "folderProperties": {},
     *   //   "fullFileExtension": "my_fullFileExtension",
     *   //   "gplusMedia": false,
     *   //   "hasAppsScriptAddOn": false,
     *   //   "hasAugmentedPermissions": false,
     *   //   "hasChildFolders": false,
     *   //   "hasComment": false,
     *   //   "hasLegacyBlobComments": false,
     *   //   "hasPermissionsForViews": false,
     *   //   "hasPreventDownloadConsequence": false,
     *   //   "hasThumbnail": false,
     *   //   "hasVisitorPermissions": false,
     *   //   "headRevisionCreationDate": "my_headRevisionCreationDate",
     *   //   "headRevisionId": "my_headRevisionId",
     *   //   "iconLink": "my_iconLink",
     *   //   "id": "my_id",
     *   //   "imageMediaMetadata": {},
     *   //   "indexableText": {},
     *   //   "isAppAuthorized": false,
     *   //   "isCompressed": false,
     *   //   "kind": "my_kind",
     *   //   "labelInfo": {},
     *   //   "labels": {},
     *   //   "lastModifyingUser": {},
     *   //   "lastModifyingUserName": "my_lastModifyingUserName",
     *   //   "lastViewedByMeDate": "my_lastViewedByMeDate",
     *   //   "linkShareMetadata": {},
     *   //   "localId": {},
     *   //   "markedViewedByMeDate": "my_markedViewedByMeDate",
     *   //   "md5Checksum": "my_md5Checksum",
     *   //   "mimeType": "my_mimeType",
     *   //   "modifiedByMeDate": "my_modifiedByMeDate",
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "openWithLinks": {},
     *   //   "organizationDisplayName": "my_organizationDisplayName",
     *   //   "originalFileSize": "my_originalFileSize",
     *   //   "originalFilename": "my_originalFilename",
     *   //   "originalMd5Checksum": "my_originalMd5Checksum",
     *   //   "ownedByMe": false,
     *   //   "ownerNames": [],
     *   //   "owners": [],
     *   //   "packageFileSize": "my_packageFileSize",
     *   //   "packageId": "my_packageId",
     *   //   "pairedDocType": "my_pairedDocType",
     *   //   "parent": {},
     *   //   "parents": [],
     *   //   "passivelySubscribed": false,
     *   //   "permissionIds": [],
     *   //   "permissions": [],
     *   //   "permissionsSummary": {},
     *   //   "photosCompressionStatus": "my_photosCompressionStatus",
     *   //   "photosStoragePolicy": "my_photosStoragePolicy",
     *   //   "preview": {},
     *   //   "primaryDomainName": "my_primaryDomainName",
     *   //   "primarySyncParentId": "my_primarySyncParentId",
     *   //   "properties": [],
     *   //   "publishingInfo": {},
     *   //   "quotaBytesUsed": "my_quotaBytesUsed",
     *   //   "readable": false,
     *   //   "readersCanSeeComments": false,
     *   //   "recency": "my_recency",
     *   //   "recencyReason": "my_recencyReason",
     *   //   "recursiveFileCount": "my_recursiveFileCount",
     *   //   "recursiveFileSize": "my_recursiveFileSize",
     *   //   "recursiveQuotaBytesUsed": "my_recursiveQuotaBytesUsed",
     *   //   "removedParents": [],
     *   //   "resourceKey": "my_resourceKey",
     *   //   "searchResultSource": "my_searchResultSource",
     *   //   "selfLink": "my_selfLink",
     *   //   "serverCreatedDate": "my_serverCreatedDate",
     *   //   "sha1Checksums": [],
     *   //   "shareLink": "my_shareLink",
     *   //   "shareable": false,
     *   //   "shared": false,
     *   //   "sharedWithMeDate": "my_sharedWithMeDate",
     *   //   "sharingUser": {},
     *   //   "shortcutDetails": {},
     *   //   "shortcutTargetId": "my_shortcutTargetId",
     *   //   "shortcutTargetMimeType": "my_shortcutTargetMimeType",
     *   //   "source": {},
     *   //   "sourceAppId": "my_sourceAppId",
     *   //   "sources": {},
     *   //   "spaces": [],
     *   //   "storagePolicyPending": false,
     *   //   "subscribed": false,
     *   //   "supportedRoles": [],
     *   //   "teamDriveId": "my_teamDriveId",
     *   //   "templateData": {},
     *   //   "thumbnail": {},
     *   //   "thumbnailLink": "my_thumbnailLink",
     *   //   "thumbnailVersion": "my_thumbnailVersion",
     *   //   "title": "my_title",
     *   //   "trashedDate": "my_trashedDate",
     *   //   "trashingUser": {},
     *   //   "userPermission": {},
     *   //   "version": "my_version",
     *   //   "videoMediaMetadata": {},
     *   //   "warningDetectors": [],
     *   //   "webContentLink": "my_webContentLink",
     *   //   "webViewLink": "my_webViewLink",
     *   //   "workspaceIds": [],
     *   //   "writersCanShare": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.insert
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.convert Whether to convert this file to the corresponding Google Docs format.
     * @param {boolean=} params.enforceSingleParent Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. Requests that specify more than one parent will fail.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {boolean=} params.includeBadgedLabels If true, all badged Labels will be returned in the labelInfo part of the response.
     * @param {string=} params.includeLabels A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     * @param {string=} params.includeMetadataForCategories A comma-separated list of names of Categories to include in the response.
     * @param {string=} params.includePermissionsForView Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.ocr Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads.
     * @param {string=} params.ocrLanguage If ocr is true, hints at the language to use. Valid values are ISO 639-1 codes.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {boolean=} params.pinned Whether to pin the head revision of the uploaded file. A file can have a maximum of 200 pinned revisions.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {string=} params.storagePolicy For eligible files (e.g. image and video) whether to store the data at original compressed high-quality resolution. Valid values are 'original' and 'highQuality'.
     * @param {boolean=} params.supportsAllDrives Whether the requesting application supports both My Drives and shared drives.
     * @param {boolean=} params.supportsTeamDrives Deprecated use supportsAllDrives instead.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {string=} params.timedTextLanguage The language of the timed text.
     * @param {string=} params.timedTextTrackName The timed text track name.
     * @param {boolean=} params.updateViewedDate Whether to update the view date when inserting the file.
     * @param {boolean=} params.useContentAsIndexableText Whether to use the content as indexable text.
     * @param {boolean=} params.useLegacyDomainPermissionBehavior If true, Permissions with type Audience are represented with Domain type.
     * @param {string=} params.visibility The visibility of the new file. This parameter is only relevant when convert=false.
     * @param  {object} params.requestBody Media resource metadata
     * @param {object} params.media Media object
     * @param {string} params.media.mimeType Media mime-type
     * @param {string|object} params.media.body Media body contents
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    insert(
      params: Params$Resource$Files$Insert,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    insert(
      params?: Params$Resource$Files$Insert,
      options?: MethodOptions
    ): GaxiosPromise<Schema$File>;
    insert(
      params: Params$Resource$Files$Insert,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    insert(
      params: Params$Resource$Files$Insert,
      options: MethodOptions | BodyResponseCallback<Schema$File>,
      callback: BodyResponseCallback<Schema$File>
    ): void;
    insert(
      params: Params$Resource$Files$Insert,
      callback: BodyResponseCallback<Schema$File>
    ): void;
    insert(callback: BodyResponseCallback<Schema$File>): void;
    insert(
      paramsOrCallback?:
        | Params$Resource$Files$Insert
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$File> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Files$Insert;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Insert;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        mediaUrl: (rootUrl + '/upload/drive/v2.1beta/files').replace(
          /([^:]\/)\/+/g,
          '$1'
        ),
        requiredParams: [],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$File>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$File>(parameters);
      }
    }

    /**
     * drive.files.list
     * @desc Lists the user's files.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.apps.readonly',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.photos.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.list({
     *     // Whether to retrieve all properties, not just those visible to the app.
     *     allProperties: 'placeholder-value',
     *     // Deprecated: use 'spaces' instead. Specifies whether to return App Data, non-App Data, or both in query results.
     *     appDataFilter: 'placeholder-value',
     *     // Bodies of items (files/documents) to which the query applies. Supported bodies are 'default', 'domain', 'drive' and 'allDrives'. Prefer 'default' or 'drive' to 'allDrives' for efficiency.
     *     corpora: 'placeholder-value',
     *     // The body of items (files/documents) to which the query applies. Deprecated: use 'corpora' instead.
     *     corpus: 'placeholder-value',
     *     // ID of shared drive to search.
     *     driveId: 'placeholder-value',
     *     // The origin in which the sharing widget will be embedded. This should be supplied when requesting the shareLink field.
     *     embedOrigin: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // A comma separated list of app IDs. If set, the list will also include files inside the app data folder that could be opened with any of the given apps with drive.appdata scope. Requires the ALL_APPDATA scope.
     *     fileScopeAppIds: 'placeholder-value',
     *     // If true, all badged Labels will be returned in the labelInfo part of the response.
     *     includeBadgedLabels: 'placeholder-value',
     *     // Whether to include items embedded in a package in the results.
     *     includeEmbeds: 'placeholder-value',
     *     // Whether both My Drive and shared drive items should be included in results.
     *     includeItemsFromAllDrives: 'placeholder-value',
     *     // A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     *     includeLabels: 'placeholder-value',
     *     // A comma-separated list of names of Categories to include in the response.
     *     includeMetadataForCategories: 'placeholder-value',
     *     // Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     *     includePermissionsForView: 'placeholder-value',
     *     // Deprecated use includeItemsFromAllDrives instead.
     *     includeTeamDriveItems: 'placeholder-value',
     *     // For Cello, allow fetching unsubscribed children to complete backfill.
     *     includeUnsubscribed: 'placeholder-value',
     *     // The maximum number of files to return per page. Partial or empty result pages are possible even before the end of the files list has been reached.
     *     maxResults: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // A comma-separated list of sort keys. Valid keys are 'createdDate', 'folder', 'lastViewedByMeDate', 'modifiedByMeDate', 'modifiedDate', 'quotaBytesUsed', 'recursiveFileCount', 'recursiveFileSize', 'recursiveQuotaBytesUsed', 'recency', 'sharedWithMeDate', 'starred', 'title', 'title_natural', and 'trashedDate'. Each key sorts ascending by default, but may be reversed with the 'desc' modifier. Example usage: ?orderBy=folder,modifiedDate desc,title. Please note that there is a current limitation for users with approximately one million files in which the requested sort order is ignored.
     *     orderBy: 'placeholder-value',
     *     // Page token for files.
     *     pageToken: 'placeholder-value',
     *     // This parameter is deprecated and has no function.
     *     projection: 'placeholder-value',
     *     // Query string for searching files.
     *     q: 'placeholder-value',
     *     // The unmodified user-specified query string.
     *     rawUserQuery: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // Whether the request should be rejected if it would generate an inefficient query.
     *     rejectInefficientRequests: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request should return efficiency info.
     *     returnEfficiencyInfo: 'placeholder-value',
     *     // DEPRECATED; use orderBy instead. Whether to reverse the order of the results if sortBy is set.
     *     reverseSort: 'placeholder-value',
     *     // Opaque search session data from apps search quality.
     *     searchSessionData: 'placeholder-value',
     *     // DEPRECATED; use orderBy instead. The list of sort orders to apply after sortBy.
     *     secondarySortBy: 'w+(,w+)*',
     *     // DEPRECATED; use orderBy instead. The sort order for returned files.
     *     sortBy: 'placeholder-value',
     *     // Deprecated: use 'spaces' instead. A comma-separated list of sources to query. Supported values are 'GOOGLE_PHOTOS' and 'ANDROID_BACKUP'.
     *     sources: 'placeholder-value',
     *     // A comma-separated list of spaces to query. Supported values are 'drive', 'appContent', 'appDataFolder', 'photos' and 'androidBackup'.
     *     spaces: 'placeholder-value',
     *     // Whether the requesting application supports both My Drives and shared drives.
     *     supportsAllDrives: 'placeholder-value',
     *     // Deprecated use supportsAllDrives instead.
     *     supportsTeamDrives: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // Deprecated use driveId instead.
     *     teamDriveId: 'placeholder-value',
     *     // If true, Permissions with type Audience are represented with Domain type.
     *     useLegacyDomainPermissionBehavior: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "efficiencyInfo": {},
     *   //   "etag": "my_etag",
     *   //   "incompleteSearch": false,
     *   //   "items": [],
     *   //   "kind": "my_kind",
     *   //   "nextLink": "my_nextLink",
     *   //   "nextPageToken": "my_nextPageToken",
     *   //   "selfLink": "my_selfLink",
     *   //   "spellResponse": {},
     *   //   "suggestedNlpQueries": []
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.list
     * @memberOf! ()
     *
     * @param {object=} params Parameters for request
     * @param {boolean=} params.allProperties Whether to retrieve all properties, not just those visible to the app.
     * @param {string=} params.appDataFilter Deprecated: use 'spaces' instead. Specifies whether to return App Data, non-App Data, or both in query results.
     * @param {string=} params.corpora Bodies of items (files/documents) to which the query applies. Supported bodies are 'default', 'domain', 'drive' and 'allDrives'. Prefer 'default' or 'drive' to 'allDrives' for efficiency.
     * @param {string=} params.corpus The body of items (files/documents) to which the query applies. Deprecated: use 'corpora' instead.
     * @param {string=} params.driveId ID of shared drive to search.
     * @param {string=} params.embedOrigin The origin in which the sharing widget will be embedded. This should be supplied when requesting the shareLink field.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string=} params.fileScopeAppIds A comma separated list of app IDs. If set, the list will also include files inside the app data folder that could be opened with any of the given apps with drive.appdata scope. Requires the ALL_APPDATA scope.
     * @param {boolean=} params.includeBadgedLabels If true, all badged Labels will be returned in the labelInfo part of the response.
     * @param {boolean=} params.includeEmbeds Whether to include items embedded in a package in the results.
     * @param {boolean=} params.includeItemsFromAllDrives Whether both My Drive and shared drive items should be included in results.
     * @param {string=} params.includeLabels A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     * @param {string=} params.includeMetadataForCategories A comma-separated list of names of Categories to include in the response.
     * @param {string=} params.includePermissionsForView Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     * @param {boolean=} params.includeTeamDriveItems Deprecated use includeItemsFromAllDrives instead.
     * @param {boolean=} params.includeUnsubscribed For Cello, allow fetching unsubscribed children to complete backfill.
     * @param {integer=} params.maxResults The maximum number of files to return per page. Partial or empty result pages are possible even before the end of the files list has been reached.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.orderBy A comma-separated list of sort keys. Valid keys are 'createdDate', 'folder', 'lastViewedByMeDate', 'modifiedByMeDate', 'modifiedDate', 'quotaBytesUsed', 'recursiveFileCount', 'recursiveFileSize', 'recursiveQuotaBytesUsed', 'recency', 'sharedWithMeDate', 'starred', 'title', 'title_natural', and 'trashedDate'. Each key sorts ascending by default, but may be reversed with the 'desc' modifier. Example usage: ?orderBy=folder,modifiedDate desc,title. Please note that there is a current limitation for users with approximately one million files in which the requested sort order is ignored.
     * @param {string=} params.pageToken Page token for files.
     * @param {string=} params.projection This parameter is deprecated and has no function.
     * @param {string=} params.q Query string for searching files.
     * @param {string=} params.rawUserQuery The unmodified user-specified query string.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {boolean=} params.rejectInefficientRequests Whether the request should be rejected if it would generate an inefficient query.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {boolean=} params.returnEfficiencyInfo Whether the request should return efficiency info.
     * @param {boolean=} params.reverseSort DEPRECATED; use orderBy instead. Whether to reverse the order of the results if sortBy is set.
     * @param {string=} params.searchSessionData Opaque search session data from apps search quality.
     * @param {string=} params.secondarySortBy DEPRECATED; use orderBy instead. The list of sort orders to apply after sortBy.
     * @param {string=} params.sortBy DEPRECATED; use orderBy instead. The sort order for returned files.
     * @param {string=} params.sources Deprecated: use 'spaces' instead. A comma-separated list of sources to query. Supported values are 'GOOGLE_PHOTOS' and 'ANDROID_BACKUP'.
     * @param {string=} params.spaces A comma-separated list of spaces to query. Supported values are 'drive', 'appContent', 'appDataFolder', 'photos' and 'androidBackup'.
     * @param {boolean=} params.supportsAllDrives Whether the requesting application supports both My Drives and shared drives.
     * @param {boolean=} params.supportsTeamDrives Deprecated use supportsAllDrives instead.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {string=} params.teamDriveId Deprecated use driveId instead.
     * @param {boolean=} params.useLegacyDomainPermissionBehavior If true, Permissions with type Audience are represented with Domain type.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params: Params$Resource$Files$List,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    list(
      params?: Params$Resource$Files$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$FileList>;
    list(
      params: Params$Resource$Files$List,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    list(
      params: Params$Resource$Files$List,
      options: MethodOptions | BodyResponseCallback<Schema$FileList>,
      callback: BodyResponseCallback<Schema$FileList>
    ): void;
    list(
      params: Params$Resource$Files$List,
      callback: BodyResponseCallback<Schema$FileList>
    ): void;
    list(callback: BodyResponseCallback<Schema$FileList>): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Files$List
        | BodyResponseCallback<Schema$FileList>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$FileList>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$FileList>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$FileList> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Files$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: [],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$FileList>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$FileList>(parameters);
      }
    }

    /**
     * drive.files.listCategoryMetadata
     * @desc Lists a category metadata on a file.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.listCategoryMetadata({
     *     // The ID for the file or shared drive.
     *     fileId: 'placeholder-value',
     *     // The maximum number of categories to return per page. When not set, at most 100 results will be returned.
     *     maxResults: 'placeholder-value',
     *     // The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response.
     *     pageToken: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "categoryMetadata": {},
     *   //   "items": [],
     *   //   "kind": "my_kind",
     *   //   "nextPageToken": "my_nextPageToken"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.listCategoryMetadata
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.fileId The ID for the file or shared drive.
     * @param {integer=} params.maxResults The maximum number of categories to return per page. When not set, at most 100 results will be returned.
     * @param {string=} params.pageToken The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    listCategoryMetadata(
      params: Params$Resource$Files$Listcategorymetadata,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    listCategoryMetadata(
      params?: Params$Resource$Files$Listcategorymetadata,
      options?: MethodOptions
    ): GaxiosPromise<Schema$CategoryMetadataList>;
    listCategoryMetadata(
      params: Params$Resource$Files$Listcategorymetadata,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    listCategoryMetadata(
      params: Params$Resource$Files$Listcategorymetadata,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$CategoryMetadataList>,
      callback: BodyResponseCallback<Schema$CategoryMetadataList>
    ): void;
    listCategoryMetadata(
      params: Params$Resource$Files$Listcategorymetadata,
      callback: BodyResponseCallback<Schema$CategoryMetadataList>
    ): void;
    listCategoryMetadata(
      callback: BodyResponseCallback<Schema$CategoryMetadataList>
    ): void;
    listCategoryMetadata(
      paramsOrCallback?:
        | Params$Resource$Files$Listcategorymetadata
        | BodyResponseCallback<Schema$CategoryMetadataList>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$CategoryMetadataList>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$CategoryMetadataList>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$CategoryMetadataList>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Files$Listcategorymetadata;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Listcategorymetadata;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/files/{fileId}/listCategoryMetadata'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$CategoryMetadataList>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$CategoryMetadataList>(parameters);
      }
    }

    /**
     * drive.files.listLabels
     * @desc Lists the labels on a file.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.listLabels({
     *     // The ID of the file.
     *     fileId: 'placeholder-value',
     *     // The maximum number of labels to return per page. When not set, this defaults to 100.
     *     maxResults: 'placeholder-value',
     *     // The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response.
     *     pageToken: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "items": [],
     *   //   "kind": "my_kind",
     *   //   "nextPageToken": "my_nextPageToken"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.listLabels
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.fileId The ID of the file.
     * @param {integer=} params.maxResults The maximum number of labels to return per page. When not set, this defaults to 100.
     * @param {string=} params.pageToken The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    listLabels(
      params: Params$Resource$Files$Listlabels,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    listLabels(
      params?: Params$Resource$Files$Listlabels,
      options?: MethodOptions
    ): GaxiosPromise<Schema$LabelList>;
    listLabels(
      params: Params$Resource$Files$Listlabels,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    listLabels(
      params: Params$Resource$Files$Listlabels,
      options: MethodOptions | BodyResponseCallback<Schema$LabelList>,
      callback: BodyResponseCallback<Schema$LabelList>
    ): void;
    listLabels(
      params: Params$Resource$Files$Listlabels,
      callback: BodyResponseCallback<Schema$LabelList>
    ): void;
    listLabels(callback: BodyResponseCallback<Schema$LabelList>): void;
    listLabels(
      paramsOrCallback?:
        | Params$Resource$Files$Listlabels
        | BodyResponseCallback<Schema$LabelList>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$LabelList>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$LabelList>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$LabelList> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Files$Listlabels;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Listlabels;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/files/{fileId}/listLabels'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$LabelList>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$LabelList>(parameters);
      }
    }

    /**
     * drive.files.migrateToDrivePreFlight
     * @desc Verifies if migrating a set of files & folders into a shared drive can succeed without errors. The result is a best effort check on a potential migration.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.migrateToDrivePreFlight({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // Issue the request as a domain administrator; if set to true, then the move will be verified as an admin move if the requester is an administrator of the domain to which the source folder(s) belong.
     *     useDomainAdminAccess: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "continuationToken": "my_continuationToken",
     *       //   "destinationFolderId": "my_destinationFolderId",
     *       //   "kind": "my_kind",
     *       //   "sourceIds": []
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "continuationToken": "my_continuationToken",
     *   //   "kind": "my_kind",
     *   //   "processedFileCount": 0,
     *   //   "result": {}
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.migrateToDrivePreFlight
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {boolean=} params.useDomainAdminAccess Issue the request as a domain administrator; if set to true, then the move will be verified as an admin move if the requester is an administrator of the domain to which the source folder(s) belong.
     * @param {().MigrateToDrivePreFlightRequest} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    migrateToDrivePreFlight(
      params: Params$Resource$Files$Migratetodrivepreflight,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    migrateToDrivePreFlight(
      params?: Params$Resource$Files$Migratetodrivepreflight,
      options?: MethodOptions
    ): GaxiosPromise<Schema$MigrateToDrivePreFlightResponse>;
    migrateToDrivePreFlight(
      params: Params$Resource$Files$Migratetodrivepreflight,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    migrateToDrivePreFlight(
      params: Params$Resource$Files$Migratetodrivepreflight,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$MigrateToDrivePreFlightResponse>,
      callback: BodyResponseCallback<Schema$MigrateToDrivePreFlightResponse>
    ): void;
    migrateToDrivePreFlight(
      params: Params$Resource$Files$Migratetodrivepreflight,
      callback: BodyResponseCallback<Schema$MigrateToDrivePreFlightResponse>
    ): void;
    migrateToDrivePreFlight(
      callback: BodyResponseCallback<Schema$MigrateToDrivePreFlightResponse>
    ): void;
    migrateToDrivePreFlight(
      paramsOrCallback?:
        | Params$Resource$Files$Migratetodrivepreflight
        | BodyResponseCallback<Schema$MigrateToDrivePreFlightResponse>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$MigrateToDrivePreFlightResponse>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$MigrateToDrivePreFlightResponse>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$MigrateToDrivePreFlightResponse>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Files$Migratetodrivepreflight;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Migratetodrivepreflight;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/admin/files/migrateToDrivePreFlight'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: [],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$MigrateToDrivePreFlightResponse>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$MigrateToDrivePreFlightResponse>(
          parameters
        );
      }
    }

    /**
     * drive.files.migrateToTeamDrivePreFlight
     * @desc Verifies if migrating a set of files & folders into a Team Drive can succeed without errors. The result is a best effort check on a potential migration.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.migrateToTeamDrivePreFlight({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // Issue the request as a domain administrator; if set to true, then the move will be verified as an admin move if the requester is an administrator of the domain to which the source folder(s) belong.
     *     useDomainAdminAccess: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "continuationToken": "my_continuationToken",
     *       //   "destinationFolderId": "my_destinationFolderId",
     *       //   "kind": "my_kind",
     *       //   "sourceIds": []
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "continuationToken": "my_continuationToken",
     *   //   "kind": "my_kind",
     *   //   "processedFileCount": 0,
     *   //   "result": {}
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.migrateToTeamDrivePreFlight
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {boolean=} params.useDomainAdminAccess Issue the request as a domain administrator; if set to true, then the move will be verified as an admin move if the requester is an administrator of the domain to which the source folder(s) belong.
     * @param {().MigrateToTeamDrivePreFlightRequest} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    migrateToTeamDrivePreFlight(
      params: Params$Resource$Files$Migratetoteamdrivepreflight,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    migrateToTeamDrivePreFlight(
      params?: Params$Resource$Files$Migratetoteamdrivepreflight,
      options?: MethodOptions
    ): GaxiosPromise<Schema$MigrateToTeamDrivePreFlightResponse>;
    migrateToTeamDrivePreFlight(
      params: Params$Resource$Files$Migratetoteamdrivepreflight,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    migrateToTeamDrivePreFlight(
      params: Params$Resource$Files$Migratetoteamdrivepreflight,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$MigrateToTeamDrivePreFlightResponse>,
      callback: BodyResponseCallback<Schema$MigrateToTeamDrivePreFlightResponse>
    ): void;
    migrateToTeamDrivePreFlight(
      params: Params$Resource$Files$Migratetoteamdrivepreflight,
      callback: BodyResponseCallback<Schema$MigrateToTeamDrivePreFlightResponse>
    ): void;
    migrateToTeamDrivePreFlight(
      callback: BodyResponseCallback<Schema$MigrateToTeamDrivePreFlightResponse>
    ): void;
    migrateToTeamDrivePreFlight(
      paramsOrCallback?:
        | Params$Resource$Files$Migratetoteamdrivepreflight
        | BodyResponseCallback<Schema$MigrateToTeamDrivePreFlightResponse>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$MigrateToTeamDrivePreFlightResponse>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$MigrateToTeamDrivePreFlightResponse>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$MigrateToTeamDrivePreFlightResponse>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Files$Migratetoteamdrivepreflight;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Migratetoteamdrivepreflight;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl +
              '/drive/v2.1beta/admin/files/migrateToTeamDrivePreFlight'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: [],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$MigrateToTeamDrivePreFlightResponse>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$MigrateToTeamDrivePreFlightResponse>(
          parameters
        );
      }
    }

    /**
     * drive.files.modifyLabels
     * @desc Modifies the set of Labels on a file.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.modifyLabels({
     *     // The ID of the file for which the labels are modified.
     *     fileId: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "kind": "my_kind",
     *       //   "labelModifications": []
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "kind": "my_kind",
     *   //   "modifiedLabels": []
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.modifyLabels
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.fileId The ID of the file for which the labels are modified.
     * @param {().ModifyLabelsRequest} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    modifyLabels(
      params: Params$Resource$Files$Modifylabels,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    modifyLabels(
      params?: Params$Resource$Files$Modifylabels,
      options?: MethodOptions
    ): GaxiosPromise<Schema$ModifyLabelsResponse>;
    modifyLabels(
      params: Params$Resource$Files$Modifylabels,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    modifyLabels(
      params: Params$Resource$Files$Modifylabels,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$ModifyLabelsResponse>,
      callback: BodyResponseCallback<Schema$ModifyLabelsResponse>
    ): void;
    modifyLabels(
      params: Params$Resource$Files$Modifylabels,
      callback: BodyResponseCallback<Schema$ModifyLabelsResponse>
    ): void;
    modifyLabels(
      callback: BodyResponseCallback<Schema$ModifyLabelsResponse>
    ): void;
    modifyLabels(
      paramsOrCallback?:
        | Params$Resource$Files$Modifylabels
        | BodyResponseCallback<Schema$ModifyLabelsResponse>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$ModifyLabelsResponse>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$ModifyLabelsResponse>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$ModifyLabelsResponse>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Files$Modifylabels;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Modifylabels;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/files/{fileId}/modifyLabels'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$ModifyLabelsResponse>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$ModifyLabelsResponse>(parameters);
      }
    }

    /**
     * drive.files.patch
     * @desc Updates file metadata and/or content. This method supports patch semantics.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.apps.readonly',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.scripts',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.patch({
     *     // Comma-separated list of parent IDs to add.
     *     addParents: 'placeholder-value',
     *     // Base revision to use when uploading using partial updates.
     *     baseRevision: 'placeholder-value',
     *     // If true, checks that prevent increasing the number of an item's parents are bypassed.
     *     bypassMultiparentingCheck: 'placeholder-value',
     *     // Whether the user has confirmed any warnings for the update.
     *     confirmed: 'placeholder-value',
     *     // Whether to convert this file to the corresponding Google Docs format.
     *     convert: 'placeholder-value',
     *     // If true and combined with exactly one ID in the addParents field, all the file's current parents will be replaced.
     *     enableSingleParentingOnAddParentByOwner: 'placeholder-value',
     *     // Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. If the item's owner makes a request to add a single parent, the item will be removed from all current folders and placed in the requested folder. Other requests that increase the number of parents will fail, except when the canAddMyDriveParent file capability is true and a single parent is being added.
     *     enforceSingleParent: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // A comma-separated list of parent IDs that have already been discovered by the requesting user. Parent filtering is prevented for parents on this list.
     *     expectedParentIds: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file to update.
     *     fileId: 'placeholder-value',
     *     // If true, all badged Labels will be returned in the labelInfo part of the response.
     *     includeBadgedLabels: 'placeholder-value',
     *     // A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     *     includeLabels: 'placeholder-value',
     *     // A comma-separated list of names of Categories to include in the response.
     *     includeMetadataForCategories: 'placeholder-value',
     *     // Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     *     includePermissionsForView: 'placeholder-value',
     *     // A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     *     languageCode: 'placeholder-value',
     *     // The behavior of the last modified date. This overrides setModifiedDate.
     *     modifiedDateBehavior: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether a blob upload should create a new revision. If false, the blob data in the current head revision is replaced. If true or not set, a new blob is created as head revision, and previous unpinned revisions are preserved for a short period of time. Pinned revisions are stored indefinitely using additional storage quota, up to a maximum of 200 revisions.
     *     newRevision: 'placeholder-value',
     *     // Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads.
     *     ocr: 'placeholder-value',
     *     // If ocr is true, hints at the language to use. Valid values are ISO 639-1 codes.
     *     ocrLanguage: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // Whether to pin the new revision. A file can have a maximum of 200 pinned revisions.
     *     pinned: 'placeholder-value',
     *     // Query string for file update preconditions.
     *     precondition: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // Comma-separated list of parent IDs to remove.
     *     removeParents: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether to set the modified date with the supplied modified date.
     *     setModifiedDate: 'placeholder-value',
     *     // For eligible files (e.g. image and video) whether to store the data at original compressed high-quality resolution. Valid values are 'original' and 'highQuality'
     *     storagePolicy: 'placeholder-value',
     *     // Whether the requesting application supports both My Drives and shared drives.
     *     supportsAllDrives: 'placeholder-value',
     *     // Deprecated use supportsAllDrives instead.
     *     supportsTeamDrives: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // The language of the timed text.
     *     timedTextLanguage: 'placeholder-value',
     *     // The timed text track name.
     *     timedTextTrackName: 'placeholder-value',
     *     // Whether to update the view date after successfully updating the file.
     *     updateViewedDate: 'placeholder-value',
     *     // Whether to use the content as indexable text.
     *     useContentAsIndexableText: 'placeholder-value',
     *     // Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the item belongs. This feature is only available to whitelisted apps.
     *     useDomainAdminAccess: 'placeholder-value',
     *     // If true, Permissions with type Audience are represented with Domain type.
     *     useLegacyDomainPermissionBehavior: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "actionItems": [],
     *       //   "alternateLink": "my_alternateLink",
     *       //   "alwaysShowInPhotos": false,
     *       //   "ancestorHasAugmentedPermissions": false,
     *       //   "appDataContents": false,
     *       //   "appliedCategories": [],
     *       //   "approvalMetadata": {},
     *       //   "authorizedAppIds": [],
     *       //   "blockingDetectors": [],
     *       //   "canComment": false,
     *       //   "capabilities": {},
     *       //   "categoryMetadata": {},
     *       //   "changed": false,
     *       //   "clientEncryptionDetails": {},
     *       //   "commentsImported": false,
     *       //   "containsUnsubscribedChildren": false,
     *       //   "contentRestriction": {},
     *       //   "contentRestrictions": [],
     *       //   "copyRequiresWriterPermission": false,
     *       //   "copyable": false,
     *       //   "createdDate": "my_createdDate",
     *       //   "creator": {},
     *       //   "creatorAppId": "my_creatorAppId",
     *       //   "customerId": "my_customerId",
     *       //   "defaultOpenWithLink": "my_defaultOpenWithLink",
     *       //   "descendantOfRoot": false,
     *       //   "description": "my_description",
     *       //   "detectors": [],
     *       //   "downloadUrl": "my_downloadUrl",
     *       //   "driveId": "my_driveId",
     *       //   "driveSource": {},
     *       //   "editable": false,
     *       //   "efficiencyInfo": {},
     *       //   "embedLink": "my_embedLink",
     *       //   "embedded": false,
     *       //   "embeddingParent": "my_embeddingParent",
     *       //   "etag": "my_etag",
     *       //   "explicitlyTrashed": false,
     *       //   "exportLinks": {},
     *       //   "fileExtension": "my_fileExtension",
     *       //   "fileSize": "my_fileSize",
     *       //   "flaggedForAbuse": false,
     *       //   "folderColor": "my_folderColor",
     *       //   "folderColorRgb": "my_folderColorRgb",
     *       //   "folderFeatures": [],
     *       //   "folderProperties": {},
     *       //   "fullFileExtension": "my_fullFileExtension",
     *       //   "gplusMedia": false,
     *       //   "hasAppsScriptAddOn": false,
     *       //   "hasAugmentedPermissions": false,
     *       //   "hasChildFolders": false,
     *       //   "hasComment": false,
     *       //   "hasLegacyBlobComments": false,
     *       //   "hasPermissionsForViews": false,
     *       //   "hasPreventDownloadConsequence": false,
     *       //   "hasThumbnail": false,
     *       //   "hasVisitorPermissions": false,
     *       //   "headRevisionCreationDate": "my_headRevisionCreationDate",
     *       //   "headRevisionId": "my_headRevisionId",
     *       //   "iconLink": "my_iconLink",
     *       //   "id": "my_id",
     *       //   "imageMediaMetadata": {},
     *       //   "indexableText": {},
     *       //   "isAppAuthorized": false,
     *       //   "isCompressed": false,
     *       //   "kind": "my_kind",
     *       //   "labelInfo": {},
     *       //   "labels": {},
     *       //   "lastModifyingUser": {},
     *       //   "lastModifyingUserName": "my_lastModifyingUserName",
     *       //   "lastViewedByMeDate": "my_lastViewedByMeDate",
     *       //   "linkShareMetadata": {},
     *       //   "localId": {},
     *       //   "markedViewedByMeDate": "my_markedViewedByMeDate",
     *       //   "md5Checksum": "my_md5Checksum",
     *       //   "mimeType": "my_mimeType",
     *       //   "modifiedByMeDate": "my_modifiedByMeDate",
     *       //   "modifiedDate": "my_modifiedDate",
     *       //   "openWithLinks": {},
     *       //   "organizationDisplayName": "my_organizationDisplayName",
     *       //   "originalFileSize": "my_originalFileSize",
     *       //   "originalFilename": "my_originalFilename",
     *       //   "originalMd5Checksum": "my_originalMd5Checksum",
     *       //   "ownedByMe": false,
     *       //   "ownerNames": [],
     *       //   "owners": [],
     *       //   "packageFileSize": "my_packageFileSize",
     *       //   "packageId": "my_packageId",
     *       //   "pairedDocType": "my_pairedDocType",
     *       //   "parent": {},
     *       //   "parents": [],
     *       //   "passivelySubscribed": false,
     *       //   "permissionIds": [],
     *       //   "permissions": [],
     *       //   "permissionsSummary": {},
     *       //   "photosCompressionStatus": "my_photosCompressionStatus",
     *       //   "photosStoragePolicy": "my_photosStoragePolicy",
     *       //   "preview": {},
     *       //   "primaryDomainName": "my_primaryDomainName",
     *       //   "primarySyncParentId": "my_primarySyncParentId",
     *       //   "properties": [],
     *       //   "publishingInfo": {},
     *       //   "quotaBytesUsed": "my_quotaBytesUsed",
     *       //   "readable": false,
     *       //   "readersCanSeeComments": false,
     *       //   "recency": "my_recency",
     *       //   "recencyReason": "my_recencyReason",
     *       //   "recursiveFileCount": "my_recursiveFileCount",
     *       //   "recursiveFileSize": "my_recursiveFileSize",
     *       //   "recursiveQuotaBytesUsed": "my_recursiveQuotaBytesUsed",
     *       //   "removedParents": [],
     *       //   "resourceKey": "my_resourceKey",
     *       //   "searchResultSource": "my_searchResultSource",
     *       //   "selfLink": "my_selfLink",
     *       //   "serverCreatedDate": "my_serverCreatedDate",
     *       //   "sha1Checksums": [],
     *       //   "shareLink": "my_shareLink",
     *       //   "shareable": false,
     *       //   "shared": false,
     *       //   "sharedWithMeDate": "my_sharedWithMeDate",
     *       //   "sharingUser": {},
     *       //   "shortcutDetails": {},
     *       //   "shortcutTargetId": "my_shortcutTargetId",
     *       //   "shortcutTargetMimeType": "my_shortcutTargetMimeType",
     *       //   "source": {},
     *       //   "sourceAppId": "my_sourceAppId",
     *       //   "sources": {},
     *       //   "spaces": [],
     *       //   "storagePolicyPending": false,
     *       //   "subscribed": false,
     *       //   "supportedRoles": [],
     *       //   "teamDriveId": "my_teamDriveId",
     *       //   "templateData": {},
     *       //   "thumbnail": {},
     *       //   "thumbnailLink": "my_thumbnailLink",
     *       //   "thumbnailVersion": "my_thumbnailVersion",
     *       //   "title": "my_title",
     *       //   "trashedDate": "my_trashedDate",
     *       //   "trashingUser": {},
     *       //   "userPermission": {},
     *       //   "version": "my_version",
     *       //   "videoMediaMetadata": {},
     *       //   "warningDetectors": [],
     *       //   "webContentLink": "my_webContentLink",
     *       //   "webViewLink": "my_webViewLink",
     *       //   "workspaceIds": [],
     *       //   "writersCanShare": false
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "actionItems": [],
     *   //   "alternateLink": "my_alternateLink",
     *   //   "alwaysShowInPhotos": false,
     *   //   "ancestorHasAugmentedPermissions": false,
     *   //   "appDataContents": false,
     *   //   "appliedCategories": [],
     *   //   "approvalMetadata": {},
     *   //   "authorizedAppIds": [],
     *   //   "blockingDetectors": [],
     *   //   "canComment": false,
     *   //   "capabilities": {},
     *   //   "categoryMetadata": {},
     *   //   "changed": false,
     *   //   "clientEncryptionDetails": {},
     *   //   "commentsImported": false,
     *   //   "containsUnsubscribedChildren": false,
     *   //   "contentRestriction": {},
     *   //   "contentRestrictions": [],
     *   //   "copyRequiresWriterPermission": false,
     *   //   "copyable": false,
     *   //   "createdDate": "my_createdDate",
     *   //   "creator": {},
     *   //   "creatorAppId": "my_creatorAppId",
     *   //   "customerId": "my_customerId",
     *   //   "defaultOpenWithLink": "my_defaultOpenWithLink",
     *   //   "descendantOfRoot": false,
     *   //   "description": "my_description",
     *   //   "detectors": [],
     *   //   "downloadUrl": "my_downloadUrl",
     *   //   "driveId": "my_driveId",
     *   //   "driveSource": {},
     *   //   "editable": false,
     *   //   "efficiencyInfo": {},
     *   //   "embedLink": "my_embedLink",
     *   //   "embedded": false,
     *   //   "embeddingParent": "my_embeddingParent",
     *   //   "etag": "my_etag",
     *   //   "explicitlyTrashed": false,
     *   //   "exportLinks": {},
     *   //   "fileExtension": "my_fileExtension",
     *   //   "fileSize": "my_fileSize",
     *   //   "flaggedForAbuse": false,
     *   //   "folderColor": "my_folderColor",
     *   //   "folderColorRgb": "my_folderColorRgb",
     *   //   "folderFeatures": [],
     *   //   "folderProperties": {},
     *   //   "fullFileExtension": "my_fullFileExtension",
     *   //   "gplusMedia": false,
     *   //   "hasAppsScriptAddOn": false,
     *   //   "hasAugmentedPermissions": false,
     *   //   "hasChildFolders": false,
     *   //   "hasComment": false,
     *   //   "hasLegacyBlobComments": false,
     *   //   "hasPermissionsForViews": false,
     *   //   "hasPreventDownloadConsequence": false,
     *   //   "hasThumbnail": false,
     *   //   "hasVisitorPermissions": false,
     *   //   "headRevisionCreationDate": "my_headRevisionCreationDate",
     *   //   "headRevisionId": "my_headRevisionId",
     *   //   "iconLink": "my_iconLink",
     *   //   "id": "my_id",
     *   //   "imageMediaMetadata": {},
     *   //   "indexableText": {},
     *   //   "isAppAuthorized": false,
     *   //   "isCompressed": false,
     *   //   "kind": "my_kind",
     *   //   "labelInfo": {},
     *   //   "labels": {},
     *   //   "lastModifyingUser": {},
     *   //   "lastModifyingUserName": "my_lastModifyingUserName",
     *   //   "lastViewedByMeDate": "my_lastViewedByMeDate",
     *   //   "linkShareMetadata": {},
     *   //   "localId": {},
     *   //   "markedViewedByMeDate": "my_markedViewedByMeDate",
     *   //   "md5Checksum": "my_md5Checksum",
     *   //   "mimeType": "my_mimeType",
     *   //   "modifiedByMeDate": "my_modifiedByMeDate",
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "openWithLinks": {},
     *   //   "organizationDisplayName": "my_organizationDisplayName",
     *   //   "originalFileSize": "my_originalFileSize",
     *   //   "originalFilename": "my_originalFilename",
     *   //   "originalMd5Checksum": "my_originalMd5Checksum",
     *   //   "ownedByMe": false,
     *   //   "ownerNames": [],
     *   //   "owners": [],
     *   //   "packageFileSize": "my_packageFileSize",
     *   //   "packageId": "my_packageId",
     *   //   "pairedDocType": "my_pairedDocType",
     *   //   "parent": {},
     *   //   "parents": [],
     *   //   "passivelySubscribed": false,
     *   //   "permissionIds": [],
     *   //   "permissions": [],
     *   //   "permissionsSummary": {},
     *   //   "photosCompressionStatus": "my_photosCompressionStatus",
     *   //   "photosStoragePolicy": "my_photosStoragePolicy",
     *   //   "preview": {},
     *   //   "primaryDomainName": "my_primaryDomainName",
     *   //   "primarySyncParentId": "my_primarySyncParentId",
     *   //   "properties": [],
     *   //   "publishingInfo": {},
     *   //   "quotaBytesUsed": "my_quotaBytesUsed",
     *   //   "readable": false,
     *   //   "readersCanSeeComments": false,
     *   //   "recency": "my_recency",
     *   //   "recencyReason": "my_recencyReason",
     *   //   "recursiveFileCount": "my_recursiveFileCount",
     *   //   "recursiveFileSize": "my_recursiveFileSize",
     *   //   "recursiveQuotaBytesUsed": "my_recursiveQuotaBytesUsed",
     *   //   "removedParents": [],
     *   //   "resourceKey": "my_resourceKey",
     *   //   "searchResultSource": "my_searchResultSource",
     *   //   "selfLink": "my_selfLink",
     *   //   "serverCreatedDate": "my_serverCreatedDate",
     *   //   "sha1Checksums": [],
     *   //   "shareLink": "my_shareLink",
     *   //   "shareable": false,
     *   //   "shared": false,
     *   //   "sharedWithMeDate": "my_sharedWithMeDate",
     *   //   "sharingUser": {},
     *   //   "shortcutDetails": {},
     *   //   "shortcutTargetId": "my_shortcutTargetId",
     *   //   "shortcutTargetMimeType": "my_shortcutTargetMimeType",
     *   //   "source": {},
     *   //   "sourceAppId": "my_sourceAppId",
     *   //   "sources": {},
     *   //   "spaces": [],
     *   //   "storagePolicyPending": false,
     *   //   "subscribed": false,
     *   //   "supportedRoles": [],
     *   //   "teamDriveId": "my_teamDriveId",
     *   //   "templateData": {},
     *   //   "thumbnail": {},
     *   //   "thumbnailLink": "my_thumbnailLink",
     *   //   "thumbnailVersion": "my_thumbnailVersion",
     *   //   "title": "my_title",
     *   //   "trashedDate": "my_trashedDate",
     *   //   "trashingUser": {},
     *   //   "userPermission": {},
     *   //   "version": "my_version",
     *   //   "videoMediaMetadata": {},
     *   //   "warningDetectors": [],
     *   //   "webContentLink": "my_webContentLink",
     *   //   "webViewLink": "my_webViewLink",
     *   //   "workspaceIds": [],
     *   //   "writersCanShare": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.patch
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.addParents Comma-separated list of parent IDs to add.
     * @param {string=} params.baseRevision Base revision to use when uploading using partial updates.
     * @param {boolean=} params.bypassMultiparentingCheck If true, checks that prevent increasing the number of an item's parents are bypassed.
     * @param {boolean=} params.confirmed Whether the user has confirmed any warnings for the update.
     * @param {boolean=} params.convert Whether to convert this file to the corresponding Google Docs format.
     * @param {boolean=} params.enableSingleParentingOnAddParentByOwner If true and combined with exactly one ID in the addParents field, all the file's current parents will be replaced.
     * @param {boolean=} params.enforceSingleParent Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. If the item's owner makes a request to add a single parent, the item will be removed from all current folders and placed in the requested folder. Other requests that increase the number of parents will fail, except when the canAddMyDriveParent file capability is true and a single parent is being added.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.expectedParentIds A comma-separated list of parent IDs that have already been discovered by the requesting user. Parent filtering is prevented for parents on this list.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file to update.
     * @param {boolean=} params.includeBadgedLabels If true, all badged Labels will be returned in the labelInfo part of the response.
     * @param {string=} params.includeLabels A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     * @param {string=} params.includeMetadataForCategories A comma-separated list of names of Categories to include in the response.
     * @param {string=} params.includePermissionsForView Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     * @param {string=} params.languageCode A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     * @param {string=} params.modifiedDateBehavior The behavior of the last modified date. This overrides setModifiedDate.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.newRevision Whether a blob upload should create a new revision. If false, the blob data in the current head revision is replaced. If true or not set, a new blob is created as head revision, and previous unpinned revisions are preserved for a short period of time. Pinned revisions are stored indefinitely using additional storage quota, up to a maximum of 200 revisions.
     * @param {boolean=} params.ocr Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads.
     * @param {string=} params.ocrLanguage If ocr is true, hints at the language to use. Valid values are ISO 639-1 codes.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {boolean=} params.pinned Whether to pin the new revision. A file can have a maximum of 200 pinned revisions.
     * @param {string=} params.precondition Query string for file update preconditions.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {string=} params.removeParents Comma-separated list of parent IDs to remove.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {boolean=} params.setModifiedDate Whether to set the modified date with the supplied modified date.
     * @param {string=} params.storagePolicy For eligible files (e.g. image and video) whether to store the data at original compressed high-quality resolution. Valid values are 'original' and 'highQuality'
     * @param {boolean=} params.supportsAllDrives Whether the requesting application supports both My Drives and shared drives.
     * @param {boolean=} params.supportsTeamDrives Deprecated use supportsAllDrives instead.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {string=} params.timedTextLanguage The language of the timed text.
     * @param {string=} params.timedTextTrackName The timed text track name.
     * @param {boolean=} params.updateViewedDate Whether to update the view date after successfully updating the file.
     * @param {boolean=} params.useContentAsIndexableText Whether to use the content as indexable text.
     * @param {boolean=} params.useDomainAdminAccess Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the item belongs. This feature is only available to whitelisted apps.
     * @param {boolean=} params.useLegacyDomainPermissionBehavior If true, Permissions with type Audience are represented with Domain type.
     * @param {().File} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    patch(
      params: Params$Resource$Files$Patch,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    patch(
      params?: Params$Resource$Files$Patch,
      options?: MethodOptions
    ): GaxiosPromise<Schema$File>;
    patch(
      params: Params$Resource$Files$Patch,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    patch(
      params: Params$Resource$Files$Patch,
      options: MethodOptions | BodyResponseCallback<Schema$File>,
      callback: BodyResponseCallback<Schema$File>
    ): void;
    patch(
      params: Params$Resource$Files$Patch,
      callback: BodyResponseCallback<Schema$File>
    ): void;
    patch(callback: BodyResponseCallback<Schema$File>): void;
    patch(
      paramsOrCallback?:
        | Params$Resource$Files$Patch
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$File> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Files$Patch;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Patch;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files/{fileId}').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'PATCH',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$File>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$File>(parameters);
      }
    }

    /**
     * drive.files.preview
     * @desc Generate a preview for an archive file. Currently supports RAR, TAR/BZ2, TAR/GZIP, and ZIP files.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.preview({
     *     // The ID for the archive file. Consists of either a Google Drive file id or encrypted id for a gmail attachment.
     *     fileId: 'placeholder-value',
     *     // The name of the archive file to be previewed. Required when origin is GMAIL
     *     fileName: 'placeholder-value',
     *     // The size of the archive file to be previewed. Required when origin is GMAIL
     *     fileSize: 'placeholder-value',
     *     // The mime type of the archive file to be previewed. Required when origin is GMAIL
     *     mimeType: 'placeholder-value',
     *     // The origin of the file preview request.
     *     origin: 'placeholder-value',
     *     // The user's available quota, in bytes.
     *     quotaBytes: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "archivePreview": [],
     *   //   "etag": "my_etag",
     *   //   "kind": "my_kind",
     *   //   "selfLink": "my_selfLink"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.preview
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.fileId The ID for the archive file. Consists of either a Google Drive file id or encrypted id for a gmail attachment.
     * @param {string=} params.fileName The name of the archive file to be previewed. Required when origin is GMAIL
     * @param {string=} params.fileSize The size of the archive file to be previewed. Required when origin is GMAIL
     * @param {string=} params.mimeType The mime type of the archive file to be previewed. Required when origin is GMAIL
     * @param {string=} params.origin The origin of the file preview request.
     * @param {string=} params.quotaBytes The user's available quota, in bytes.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    preview(
      params: Params$Resource$Files$Preview,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    preview(
      params?: Params$Resource$Files$Preview,
      options?: MethodOptions
    ): GaxiosPromise<Schema$FilePreview>;
    preview(
      params: Params$Resource$Files$Preview,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    preview(
      params: Params$Resource$Files$Preview,
      options: MethodOptions | BodyResponseCallback<Schema$FilePreview>,
      callback: BodyResponseCallback<Schema$FilePreview>
    ): void;
    preview(
      params: Params$Resource$Files$Preview,
      callback: BodyResponseCallback<Schema$FilePreview>
    ): void;
    preview(callback: BodyResponseCallback<Schema$FilePreview>): void;
    preview(
      paramsOrCallback?:
        | Params$Resource$Files$Preview
        | BodyResponseCallback<Schema$FilePreview>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$FilePreview>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$FilePreview>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$FilePreview> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Files$Preview;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Preview;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files/{fileId}/preview').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$FilePreview>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$FilePreview>(parameters);
      }
    }

    /**
     * drive.files.remove
     * @desc If user owns the file, trashes it; else if parentId is provided, removes the file from that folder; otherwise, unsubscribes the user. This method is unsupported for shared drive files.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.apps.readonly',
     *       'https://www.googleapis.com/auth/drive.file',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.remove({
     *     // Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. If the item's last parent is removed, the item will be placed under its owner's root.
     *     enforceSingleParent: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file to remove.
     *     fileId: 'placeholder-value',
     *     // If true, all badged Labels will be returned in the labelInfo part of the response.
     *     includeBadgedLabels: 'placeholder-value',
     *     // A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     *     includeLabels: 'placeholder-value',
     *     // A comma-separated list of names of Categories to include in the response.
     *     includeMetadataForCategories: 'placeholder-value',
     *     // Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     *     includePermissionsForView: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The ID of the folder from which to remove the file.
     *     parentId: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // If true, Permissions with type Audience are represented with Domain type.
     *     useLegacyDomainPermissionBehavior: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "actionItems": [],
     *   //   "alternateLink": "my_alternateLink",
     *   //   "alwaysShowInPhotos": false,
     *   //   "ancestorHasAugmentedPermissions": false,
     *   //   "appDataContents": false,
     *   //   "appliedCategories": [],
     *   //   "approvalMetadata": {},
     *   //   "authorizedAppIds": [],
     *   //   "blockingDetectors": [],
     *   //   "canComment": false,
     *   //   "capabilities": {},
     *   //   "categoryMetadata": {},
     *   //   "changed": false,
     *   //   "clientEncryptionDetails": {},
     *   //   "commentsImported": false,
     *   //   "containsUnsubscribedChildren": false,
     *   //   "contentRestriction": {},
     *   //   "contentRestrictions": [],
     *   //   "copyRequiresWriterPermission": false,
     *   //   "copyable": false,
     *   //   "createdDate": "my_createdDate",
     *   //   "creator": {},
     *   //   "creatorAppId": "my_creatorAppId",
     *   //   "customerId": "my_customerId",
     *   //   "defaultOpenWithLink": "my_defaultOpenWithLink",
     *   //   "descendantOfRoot": false,
     *   //   "description": "my_description",
     *   //   "detectors": [],
     *   //   "downloadUrl": "my_downloadUrl",
     *   //   "driveId": "my_driveId",
     *   //   "driveSource": {},
     *   //   "editable": false,
     *   //   "efficiencyInfo": {},
     *   //   "embedLink": "my_embedLink",
     *   //   "embedded": false,
     *   //   "embeddingParent": "my_embeddingParent",
     *   //   "etag": "my_etag",
     *   //   "explicitlyTrashed": false,
     *   //   "exportLinks": {},
     *   //   "fileExtension": "my_fileExtension",
     *   //   "fileSize": "my_fileSize",
     *   //   "flaggedForAbuse": false,
     *   //   "folderColor": "my_folderColor",
     *   //   "folderColorRgb": "my_folderColorRgb",
     *   //   "folderFeatures": [],
     *   //   "folderProperties": {},
     *   //   "fullFileExtension": "my_fullFileExtension",
     *   //   "gplusMedia": false,
     *   //   "hasAppsScriptAddOn": false,
     *   //   "hasAugmentedPermissions": false,
     *   //   "hasChildFolders": false,
     *   //   "hasComment": false,
     *   //   "hasLegacyBlobComments": false,
     *   //   "hasPermissionsForViews": false,
     *   //   "hasPreventDownloadConsequence": false,
     *   //   "hasThumbnail": false,
     *   //   "hasVisitorPermissions": false,
     *   //   "headRevisionCreationDate": "my_headRevisionCreationDate",
     *   //   "headRevisionId": "my_headRevisionId",
     *   //   "iconLink": "my_iconLink",
     *   //   "id": "my_id",
     *   //   "imageMediaMetadata": {},
     *   //   "indexableText": {},
     *   //   "isAppAuthorized": false,
     *   //   "isCompressed": false,
     *   //   "kind": "my_kind",
     *   //   "labelInfo": {},
     *   //   "labels": {},
     *   //   "lastModifyingUser": {},
     *   //   "lastModifyingUserName": "my_lastModifyingUserName",
     *   //   "lastViewedByMeDate": "my_lastViewedByMeDate",
     *   //   "linkShareMetadata": {},
     *   //   "localId": {},
     *   //   "markedViewedByMeDate": "my_markedViewedByMeDate",
     *   //   "md5Checksum": "my_md5Checksum",
     *   //   "mimeType": "my_mimeType",
     *   //   "modifiedByMeDate": "my_modifiedByMeDate",
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "openWithLinks": {},
     *   //   "organizationDisplayName": "my_organizationDisplayName",
     *   //   "originalFileSize": "my_originalFileSize",
     *   //   "originalFilename": "my_originalFilename",
     *   //   "originalMd5Checksum": "my_originalMd5Checksum",
     *   //   "ownedByMe": false,
     *   //   "ownerNames": [],
     *   //   "owners": [],
     *   //   "packageFileSize": "my_packageFileSize",
     *   //   "packageId": "my_packageId",
     *   //   "pairedDocType": "my_pairedDocType",
     *   //   "parent": {},
     *   //   "parents": [],
     *   //   "passivelySubscribed": false,
     *   //   "permissionIds": [],
     *   //   "permissions": [],
     *   //   "permissionsSummary": {},
     *   //   "photosCompressionStatus": "my_photosCompressionStatus",
     *   //   "photosStoragePolicy": "my_photosStoragePolicy",
     *   //   "preview": {},
     *   //   "primaryDomainName": "my_primaryDomainName",
     *   //   "primarySyncParentId": "my_primarySyncParentId",
     *   //   "properties": [],
     *   //   "publishingInfo": {},
     *   //   "quotaBytesUsed": "my_quotaBytesUsed",
     *   //   "readable": false,
     *   //   "readersCanSeeComments": false,
     *   //   "recency": "my_recency",
     *   //   "recencyReason": "my_recencyReason",
     *   //   "recursiveFileCount": "my_recursiveFileCount",
     *   //   "recursiveFileSize": "my_recursiveFileSize",
     *   //   "recursiveQuotaBytesUsed": "my_recursiveQuotaBytesUsed",
     *   //   "removedParents": [],
     *   //   "resourceKey": "my_resourceKey",
     *   //   "searchResultSource": "my_searchResultSource",
     *   //   "selfLink": "my_selfLink",
     *   //   "serverCreatedDate": "my_serverCreatedDate",
     *   //   "sha1Checksums": [],
     *   //   "shareLink": "my_shareLink",
     *   //   "shareable": false,
     *   //   "shared": false,
     *   //   "sharedWithMeDate": "my_sharedWithMeDate",
     *   //   "sharingUser": {},
     *   //   "shortcutDetails": {},
     *   //   "shortcutTargetId": "my_shortcutTargetId",
     *   //   "shortcutTargetMimeType": "my_shortcutTargetMimeType",
     *   //   "source": {},
     *   //   "sourceAppId": "my_sourceAppId",
     *   //   "sources": {},
     *   //   "spaces": [],
     *   //   "storagePolicyPending": false,
     *   //   "subscribed": false,
     *   //   "supportedRoles": [],
     *   //   "teamDriveId": "my_teamDriveId",
     *   //   "templateData": {},
     *   //   "thumbnail": {},
     *   //   "thumbnailLink": "my_thumbnailLink",
     *   //   "thumbnailVersion": "my_thumbnailVersion",
     *   //   "title": "my_title",
     *   //   "trashedDate": "my_trashedDate",
     *   //   "trashingUser": {},
     *   //   "userPermission": {},
     *   //   "version": "my_version",
     *   //   "videoMediaMetadata": {},
     *   //   "warningDetectors": [],
     *   //   "webContentLink": "my_webContentLink",
     *   //   "webViewLink": "my_webViewLink",
     *   //   "workspaceIds": [],
     *   //   "writersCanShare": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.remove
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.enforceSingleParent Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. If the item's last parent is removed, the item will be placed under its owner's root.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file to remove.
     * @param {boolean=} params.includeBadgedLabels If true, all badged Labels will be returned in the labelInfo part of the response.
     * @param {string=} params.includeLabels A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     * @param {string=} params.includeMetadataForCategories A comma-separated list of names of Categories to include in the response.
     * @param {string=} params.includePermissionsForView Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.parentId The ID of the folder from which to remove the file.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {boolean=} params.useLegacyDomainPermissionBehavior If true, Permissions with type Audience are represented with Domain type.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    remove(
      params: Params$Resource$Files$Remove,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    remove(
      params?: Params$Resource$Files$Remove,
      options?: MethodOptions
    ): GaxiosPromise<Schema$File>;
    remove(
      params: Params$Resource$Files$Remove,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    remove(
      params: Params$Resource$Files$Remove,
      options: MethodOptions | BodyResponseCallback<Schema$File>,
      callback: BodyResponseCallback<Schema$File>
    ): void;
    remove(
      params: Params$Resource$Files$Remove,
      callback: BodyResponseCallback<Schema$File>
    ): void;
    remove(callback: BodyResponseCallback<Schema$File>): void;
    remove(
      paramsOrCallback?:
        | Params$Resource$Files$Remove
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$File> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Files$Remove;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Remove;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files/{fileId}/remove').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$File>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$File>(parameters);
      }
    }

    /**
     * drive.files.requestAccess
     * @desc Deprecated - use drive.files.sendAccessRequest.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.requestAccess({
     *     // An optional plain text custom message to include in notification emails.
     *     emailMessage: 'placeholder-value',
     *     // The ID of the file the user is requesting access to.
     *     fileId: 'placeholder-value',
     *   });
     *   console.log(res.data);
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.requestAccess
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.emailMessage An optional plain text custom message to include in notification emails.
     * @param {string} params.fileId The ID of the file the user is requesting access to.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    requestAccess(
      params: Params$Resource$Files$Requestaccess,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    requestAccess(
      params?: Params$Resource$Files$Requestaccess,
      options?: MethodOptions
    ): GaxiosPromise<void>;
    requestAccess(
      params: Params$Resource$Files$Requestaccess,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    requestAccess(
      params: Params$Resource$Files$Requestaccess,
      options: MethodOptions | BodyResponseCallback<void>,
      callback: BodyResponseCallback<void>
    ): void;
    requestAccess(
      params: Params$Resource$Files$Requestaccess,
      callback: BodyResponseCallback<void>
    ): void;
    requestAccess(callback: BodyResponseCallback<void>): void;
    requestAccess(
      paramsOrCallback?:
        | Params$Resource$Files$Requestaccess
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      callback?: BodyResponseCallback<void> | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<void> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Files$Requestaccess;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Requestaccess;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/files/{fileId}/requestAccess'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<void>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<void>(parameters);
      }
    }

    /**
     * drive.files.sendAccessRequest
     * @desc Requests access to the file for the current user or a list of recipients. A notification is sent to the owner of the file requesting that they share the file with the requesting user or a list of recipients.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.sendAccessRequest({
     *     // The ID of the file the user is requesting access to.
     *     fileId: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "emailAddresses": [],
     *       //   "kind": "my_kind",
     *       //   "message": "my_message"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.sendAccessRequest
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.fileId The ID of the file the user is requesting access to.
     * @param {().SendAccessRequest} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    sendAccessRequest(
      params: Params$Resource$Files$Sendaccessrequest,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    sendAccessRequest(
      params?: Params$Resource$Files$Sendaccessrequest,
      options?: MethodOptions
    ): GaxiosPromise<void>;
    sendAccessRequest(
      params: Params$Resource$Files$Sendaccessrequest,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    sendAccessRequest(
      params: Params$Resource$Files$Sendaccessrequest,
      options: MethodOptions | BodyResponseCallback<void>,
      callback: BodyResponseCallback<void>
    ): void;
    sendAccessRequest(
      params: Params$Resource$Files$Sendaccessrequest,
      callback: BodyResponseCallback<void>
    ): void;
    sendAccessRequest(callback: BodyResponseCallback<void>): void;
    sendAccessRequest(
      paramsOrCallback?:
        | Params$Resource$Files$Sendaccessrequest
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      callback?: BodyResponseCallback<void> | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<void> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Files$Sendaccessrequest;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Sendaccessrequest;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/files/{fileId}/sendAccessRequest'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<void>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<void>(parameters);
      }
    }

    /**
     * drive.files.sendShareNotification
     * @desc Sends a sharing notification message to one or more users.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.sendShareNotification({
     *     // The ID of the file for which a sharing notification should be sent.
     *     fileId: 'placeholder-value',
     *     // A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     *     languageCode: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "emailAddresses": [],
     *       //   "includeContentAsAttachmentMimeType": "my_includeContentAsAttachmentMimeType",
     *       //   "includeContentInline": false,
     *       //   "kind": "my_kind",
     *       //   "message": "my_message",
     *       //   "messageTemplate": "my_messageTemplate",
     *       //   "notifyRequester": false,
     *       //   "subject": "my_subject"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.sendShareNotification
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.fileId The ID of the file for which a sharing notification should be sent.
     * @param {string=} params.languageCode A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     * @param {().ShareNotificationRequest} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    sendShareNotification(
      params: Params$Resource$Files$Sendsharenotification,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    sendShareNotification(
      params?: Params$Resource$Files$Sendsharenotification,
      options?: MethodOptions
    ): GaxiosPromise<void>;
    sendShareNotification(
      params: Params$Resource$Files$Sendsharenotification,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    sendShareNotification(
      params: Params$Resource$Files$Sendsharenotification,
      options: MethodOptions | BodyResponseCallback<void>,
      callback: BodyResponseCallback<void>
    ): void;
    sendShareNotification(
      params: Params$Resource$Files$Sendsharenotification,
      callback: BodyResponseCallback<void>
    ): void;
    sendShareNotification(callback: BodyResponseCallback<void>): void;
    sendShareNotification(
      paramsOrCallback?:
        | Params$Resource$Files$Sendsharenotification
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      callback?: BodyResponseCallback<void> | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<void> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Files$Sendsharenotification;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Sendsharenotification;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/files/{fileId}/sendShareNotification'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<void>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<void>(parameters);
      }
    }

    /**
     * drive.files.syncPhotoWithSha1
     * @desc Syncs a photo into Google Drive. If the photo already exists in Google Drive, returns the existing File. Otherwise, it syncs the photo and returns the newly synced file.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.syncPhotoWithSha1({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // If true, all badged Labels will be returned in the labelInfo part of the response.
     *     includeBadgedLabels: 'placeholder-value',
     *     // A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     *     includeLabels: 'placeholder-value',
     *     // A comma-separated list of names of Categories to include in the response.
     *     includeMetadataForCategories: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // If true, Permissions with type Audience are represented with Domain type.
     *     useLegacyDomainPermissionBehavior: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "kind": "my_kind",
     *       //   "sha1Checksum": "my_sha1Checksum"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "actionItems": [],
     *   //   "alternateLink": "my_alternateLink",
     *   //   "alwaysShowInPhotos": false,
     *   //   "ancestorHasAugmentedPermissions": false,
     *   //   "appDataContents": false,
     *   //   "appliedCategories": [],
     *   //   "approvalMetadata": {},
     *   //   "authorizedAppIds": [],
     *   //   "blockingDetectors": [],
     *   //   "canComment": false,
     *   //   "capabilities": {},
     *   //   "categoryMetadata": {},
     *   //   "changed": false,
     *   //   "clientEncryptionDetails": {},
     *   //   "commentsImported": false,
     *   //   "containsUnsubscribedChildren": false,
     *   //   "contentRestriction": {},
     *   //   "contentRestrictions": [],
     *   //   "copyRequiresWriterPermission": false,
     *   //   "copyable": false,
     *   //   "createdDate": "my_createdDate",
     *   //   "creator": {},
     *   //   "creatorAppId": "my_creatorAppId",
     *   //   "customerId": "my_customerId",
     *   //   "defaultOpenWithLink": "my_defaultOpenWithLink",
     *   //   "descendantOfRoot": false,
     *   //   "description": "my_description",
     *   //   "detectors": [],
     *   //   "downloadUrl": "my_downloadUrl",
     *   //   "driveId": "my_driveId",
     *   //   "driveSource": {},
     *   //   "editable": false,
     *   //   "efficiencyInfo": {},
     *   //   "embedLink": "my_embedLink",
     *   //   "embedded": false,
     *   //   "embeddingParent": "my_embeddingParent",
     *   //   "etag": "my_etag",
     *   //   "explicitlyTrashed": false,
     *   //   "exportLinks": {},
     *   //   "fileExtension": "my_fileExtension",
     *   //   "fileSize": "my_fileSize",
     *   //   "flaggedForAbuse": false,
     *   //   "folderColor": "my_folderColor",
     *   //   "folderColorRgb": "my_folderColorRgb",
     *   //   "folderFeatures": [],
     *   //   "folderProperties": {},
     *   //   "fullFileExtension": "my_fullFileExtension",
     *   //   "gplusMedia": false,
     *   //   "hasAppsScriptAddOn": false,
     *   //   "hasAugmentedPermissions": false,
     *   //   "hasChildFolders": false,
     *   //   "hasComment": false,
     *   //   "hasLegacyBlobComments": false,
     *   //   "hasPermissionsForViews": false,
     *   //   "hasPreventDownloadConsequence": false,
     *   //   "hasThumbnail": false,
     *   //   "hasVisitorPermissions": false,
     *   //   "headRevisionCreationDate": "my_headRevisionCreationDate",
     *   //   "headRevisionId": "my_headRevisionId",
     *   //   "iconLink": "my_iconLink",
     *   //   "id": "my_id",
     *   //   "imageMediaMetadata": {},
     *   //   "indexableText": {},
     *   //   "isAppAuthorized": false,
     *   //   "isCompressed": false,
     *   //   "kind": "my_kind",
     *   //   "labelInfo": {},
     *   //   "labels": {},
     *   //   "lastModifyingUser": {},
     *   //   "lastModifyingUserName": "my_lastModifyingUserName",
     *   //   "lastViewedByMeDate": "my_lastViewedByMeDate",
     *   //   "linkShareMetadata": {},
     *   //   "localId": {},
     *   //   "markedViewedByMeDate": "my_markedViewedByMeDate",
     *   //   "md5Checksum": "my_md5Checksum",
     *   //   "mimeType": "my_mimeType",
     *   //   "modifiedByMeDate": "my_modifiedByMeDate",
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "openWithLinks": {},
     *   //   "organizationDisplayName": "my_organizationDisplayName",
     *   //   "originalFileSize": "my_originalFileSize",
     *   //   "originalFilename": "my_originalFilename",
     *   //   "originalMd5Checksum": "my_originalMd5Checksum",
     *   //   "ownedByMe": false,
     *   //   "ownerNames": [],
     *   //   "owners": [],
     *   //   "packageFileSize": "my_packageFileSize",
     *   //   "packageId": "my_packageId",
     *   //   "pairedDocType": "my_pairedDocType",
     *   //   "parent": {},
     *   //   "parents": [],
     *   //   "passivelySubscribed": false,
     *   //   "permissionIds": [],
     *   //   "permissions": [],
     *   //   "permissionsSummary": {},
     *   //   "photosCompressionStatus": "my_photosCompressionStatus",
     *   //   "photosStoragePolicy": "my_photosStoragePolicy",
     *   //   "preview": {},
     *   //   "primaryDomainName": "my_primaryDomainName",
     *   //   "primarySyncParentId": "my_primarySyncParentId",
     *   //   "properties": [],
     *   //   "publishingInfo": {},
     *   //   "quotaBytesUsed": "my_quotaBytesUsed",
     *   //   "readable": false,
     *   //   "readersCanSeeComments": false,
     *   //   "recency": "my_recency",
     *   //   "recencyReason": "my_recencyReason",
     *   //   "recursiveFileCount": "my_recursiveFileCount",
     *   //   "recursiveFileSize": "my_recursiveFileSize",
     *   //   "recursiveQuotaBytesUsed": "my_recursiveQuotaBytesUsed",
     *   //   "removedParents": [],
     *   //   "resourceKey": "my_resourceKey",
     *   //   "searchResultSource": "my_searchResultSource",
     *   //   "selfLink": "my_selfLink",
     *   //   "serverCreatedDate": "my_serverCreatedDate",
     *   //   "sha1Checksums": [],
     *   //   "shareLink": "my_shareLink",
     *   //   "shareable": false,
     *   //   "shared": false,
     *   //   "sharedWithMeDate": "my_sharedWithMeDate",
     *   //   "sharingUser": {},
     *   //   "shortcutDetails": {},
     *   //   "shortcutTargetId": "my_shortcutTargetId",
     *   //   "shortcutTargetMimeType": "my_shortcutTargetMimeType",
     *   //   "source": {},
     *   //   "sourceAppId": "my_sourceAppId",
     *   //   "sources": {},
     *   //   "spaces": [],
     *   //   "storagePolicyPending": false,
     *   //   "subscribed": false,
     *   //   "supportedRoles": [],
     *   //   "teamDriveId": "my_teamDriveId",
     *   //   "templateData": {},
     *   //   "thumbnail": {},
     *   //   "thumbnailLink": "my_thumbnailLink",
     *   //   "thumbnailVersion": "my_thumbnailVersion",
     *   //   "title": "my_title",
     *   //   "trashedDate": "my_trashedDate",
     *   //   "trashingUser": {},
     *   //   "userPermission": {},
     *   //   "version": "my_version",
     *   //   "videoMediaMetadata": {},
     *   //   "warningDetectors": [],
     *   //   "webContentLink": "my_webContentLink",
     *   //   "webViewLink": "my_webViewLink",
     *   //   "workspaceIds": [],
     *   //   "writersCanShare": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.syncPhotoWithSha1
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {boolean=} params.includeBadgedLabels If true, all badged Labels will be returned in the labelInfo part of the response.
     * @param {string=} params.includeLabels A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     * @param {string=} params.includeMetadataForCategories A comma-separated list of names of Categories to include in the response.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {boolean=} params.useLegacyDomainPermissionBehavior If true, Permissions with type Audience are represented with Domain type.
     * @param {().SyncPhotoWithSha1Request} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    syncPhotoWithSha1(
      params: Params$Resource$Files$Syncphotowithsha1,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    syncPhotoWithSha1(
      params?: Params$Resource$Files$Syncphotowithsha1,
      options?: MethodOptions
    ): GaxiosPromise<Schema$File>;
    syncPhotoWithSha1(
      params: Params$Resource$Files$Syncphotowithsha1,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    syncPhotoWithSha1(
      params: Params$Resource$Files$Syncphotowithsha1,
      options: MethodOptions | BodyResponseCallback<Schema$File>,
      callback: BodyResponseCallback<Schema$File>
    ): void;
    syncPhotoWithSha1(
      params: Params$Resource$Files$Syncphotowithsha1,
      callback: BodyResponseCallback<Schema$File>
    ): void;
    syncPhotoWithSha1(callback: BodyResponseCallback<Schema$File>): void;
    syncPhotoWithSha1(
      paramsOrCallback?:
        | Params$Resource$Files$Syncphotowithsha1
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$File> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Files$Syncphotowithsha1;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Syncphotowithsha1;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files/syncPhotoWithSha1').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: [],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$File>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$File>(parameters);
      }
    }

    /**
     * drive.files.touch
     * @desc Set the file's updated time to the current server time.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.apps.readonly',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.touch({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file to update.
     *     fileId: 'placeholder-value',
     *     // If true, all badged Labels will be returned in the labelInfo part of the response.
     *     includeBadgedLabels: 'placeholder-value',
     *     // A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     *     includeLabels: 'placeholder-value',
     *     // A comma-separated list of names of Categories to include in the response.
     *     includeMetadataForCategories: 'placeholder-value',
     *     // Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     *     includePermissionsForView: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the requesting application supports both My Drives and shared drives.
     *     supportsAllDrives: 'placeholder-value',
     *     // Deprecated use supportsAllDrives instead.
     *     supportsTeamDrives: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // If true, Permissions with type Audience are represented with Domain type.
     *     useLegacyDomainPermissionBehavior: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "actionItems": [],
     *   //   "alternateLink": "my_alternateLink",
     *   //   "alwaysShowInPhotos": false,
     *   //   "ancestorHasAugmentedPermissions": false,
     *   //   "appDataContents": false,
     *   //   "appliedCategories": [],
     *   //   "approvalMetadata": {},
     *   //   "authorizedAppIds": [],
     *   //   "blockingDetectors": [],
     *   //   "canComment": false,
     *   //   "capabilities": {},
     *   //   "categoryMetadata": {},
     *   //   "changed": false,
     *   //   "clientEncryptionDetails": {},
     *   //   "commentsImported": false,
     *   //   "containsUnsubscribedChildren": false,
     *   //   "contentRestriction": {},
     *   //   "contentRestrictions": [],
     *   //   "copyRequiresWriterPermission": false,
     *   //   "copyable": false,
     *   //   "createdDate": "my_createdDate",
     *   //   "creator": {},
     *   //   "creatorAppId": "my_creatorAppId",
     *   //   "customerId": "my_customerId",
     *   //   "defaultOpenWithLink": "my_defaultOpenWithLink",
     *   //   "descendantOfRoot": false,
     *   //   "description": "my_description",
     *   //   "detectors": [],
     *   //   "downloadUrl": "my_downloadUrl",
     *   //   "driveId": "my_driveId",
     *   //   "driveSource": {},
     *   //   "editable": false,
     *   //   "efficiencyInfo": {},
     *   //   "embedLink": "my_embedLink",
     *   //   "embedded": false,
     *   //   "embeddingParent": "my_embeddingParent",
     *   //   "etag": "my_etag",
     *   //   "explicitlyTrashed": false,
     *   //   "exportLinks": {},
     *   //   "fileExtension": "my_fileExtension",
     *   //   "fileSize": "my_fileSize",
     *   //   "flaggedForAbuse": false,
     *   //   "folderColor": "my_folderColor",
     *   //   "folderColorRgb": "my_folderColorRgb",
     *   //   "folderFeatures": [],
     *   //   "folderProperties": {},
     *   //   "fullFileExtension": "my_fullFileExtension",
     *   //   "gplusMedia": false,
     *   //   "hasAppsScriptAddOn": false,
     *   //   "hasAugmentedPermissions": false,
     *   //   "hasChildFolders": false,
     *   //   "hasComment": false,
     *   //   "hasLegacyBlobComments": false,
     *   //   "hasPermissionsForViews": false,
     *   //   "hasPreventDownloadConsequence": false,
     *   //   "hasThumbnail": false,
     *   //   "hasVisitorPermissions": false,
     *   //   "headRevisionCreationDate": "my_headRevisionCreationDate",
     *   //   "headRevisionId": "my_headRevisionId",
     *   //   "iconLink": "my_iconLink",
     *   //   "id": "my_id",
     *   //   "imageMediaMetadata": {},
     *   //   "indexableText": {},
     *   //   "isAppAuthorized": false,
     *   //   "isCompressed": false,
     *   //   "kind": "my_kind",
     *   //   "labelInfo": {},
     *   //   "labels": {},
     *   //   "lastModifyingUser": {},
     *   //   "lastModifyingUserName": "my_lastModifyingUserName",
     *   //   "lastViewedByMeDate": "my_lastViewedByMeDate",
     *   //   "linkShareMetadata": {},
     *   //   "localId": {},
     *   //   "markedViewedByMeDate": "my_markedViewedByMeDate",
     *   //   "md5Checksum": "my_md5Checksum",
     *   //   "mimeType": "my_mimeType",
     *   //   "modifiedByMeDate": "my_modifiedByMeDate",
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "openWithLinks": {},
     *   //   "organizationDisplayName": "my_organizationDisplayName",
     *   //   "originalFileSize": "my_originalFileSize",
     *   //   "originalFilename": "my_originalFilename",
     *   //   "originalMd5Checksum": "my_originalMd5Checksum",
     *   //   "ownedByMe": false,
     *   //   "ownerNames": [],
     *   //   "owners": [],
     *   //   "packageFileSize": "my_packageFileSize",
     *   //   "packageId": "my_packageId",
     *   //   "pairedDocType": "my_pairedDocType",
     *   //   "parent": {},
     *   //   "parents": [],
     *   //   "passivelySubscribed": false,
     *   //   "permissionIds": [],
     *   //   "permissions": [],
     *   //   "permissionsSummary": {},
     *   //   "photosCompressionStatus": "my_photosCompressionStatus",
     *   //   "photosStoragePolicy": "my_photosStoragePolicy",
     *   //   "preview": {},
     *   //   "primaryDomainName": "my_primaryDomainName",
     *   //   "primarySyncParentId": "my_primarySyncParentId",
     *   //   "properties": [],
     *   //   "publishingInfo": {},
     *   //   "quotaBytesUsed": "my_quotaBytesUsed",
     *   //   "readable": false,
     *   //   "readersCanSeeComments": false,
     *   //   "recency": "my_recency",
     *   //   "recencyReason": "my_recencyReason",
     *   //   "recursiveFileCount": "my_recursiveFileCount",
     *   //   "recursiveFileSize": "my_recursiveFileSize",
     *   //   "recursiveQuotaBytesUsed": "my_recursiveQuotaBytesUsed",
     *   //   "removedParents": [],
     *   //   "resourceKey": "my_resourceKey",
     *   //   "searchResultSource": "my_searchResultSource",
     *   //   "selfLink": "my_selfLink",
     *   //   "serverCreatedDate": "my_serverCreatedDate",
     *   //   "sha1Checksums": [],
     *   //   "shareLink": "my_shareLink",
     *   //   "shareable": false,
     *   //   "shared": false,
     *   //   "sharedWithMeDate": "my_sharedWithMeDate",
     *   //   "sharingUser": {},
     *   //   "shortcutDetails": {},
     *   //   "shortcutTargetId": "my_shortcutTargetId",
     *   //   "shortcutTargetMimeType": "my_shortcutTargetMimeType",
     *   //   "source": {},
     *   //   "sourceAppId": "my_sourceAppId",
     *   //   "sources": {},
     *   //   "spaces": [],
     *   //   "storagePolicyPending": false,
     *   //   "subscribed": false,
     *   //   "supportedRoles": [],
     *   //   "teamDriveId": "my_teamDriveId",
     *   //   "templateData": {},
     *   //   "thumbnail": {},
     *   //   "thumbnailLink": "my_thumbnailLink",
     *   //   "thumbnailVersion": "my_thumbnailVersion",
     *   //   "title": "my_title",
     *   //   "trashedDate": "my_trashedDate",
     *   //   "trashingUser": {},
     *   //   "userPermission": {},
     *   //   "version": "my_version",
     *   //   "videoMediaMetadata": {},
     *   //   "warningDetectors": [],
     *   //   "webContentLink": "my_webContentLink",
     *   //   "webViewLink": "my_webViewLink",
     *   //   "workspaceIds": [],
     *   //   "writersCanShare": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.touch
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file to update.
     * @param {boolean=} params.includeBadgedLabels If true, all badged Labels will be returned in the labelInfo part of the response.
     * @param {string=} params.includeLabels A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     * @param {string=} params.includeMetadataForCategories A comma-separated list of names of Categories to include in the response.
     * @param {string=} params.includePermissionsForView Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {boolean=} params.supportsAllDrives Whether the requesting application supports both My Drives and shared drives.
     * @param {boolean=} params.supportsTeamDrives Deprecated use supportsAllDrives instead.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {boolean=} params.useLegacyDomainPermissionBehavior If true, Permissions with type Audience are represented with Domain type.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    touch(
      params: Params$Resource$Files$Touch,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    touch(
      params?: Params$Resource$Files$Touch,
      options?: MethodOptions
    ): GaxiosPromise<Schema$File>;
    touch(
      params: Params$Resource$Files$Touch,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    touch(
      params: Params$Resource$Files$Touch,
      options: MethodOptions | BodyResponseCallback<Schema$File>,
      callback: BodyResponseCallback<Schema$File>
    ): void;
    touch(
      params: Params$Resource$Files$Touch,
      callback: BodyResponseCallback<Schema$File>
    ): void;
    touch(callback: BodyResponseCallback<Schema$File>): void;
    touch(
      paramsOrCallback?:
        | Params$Resource$Files$Touch
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$File> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Files$Touch;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Touch;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files/{fileId}/touch').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$File>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$File>(parameters);
      }
    }

    /**
     * drive.files.trash
     * @desc Moves a file to the trash. The currently authenticated user must own the file or be at least a fileOrganizer on the parent for shared drive files.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.apps.readonly',
     *       'https://www.googleapis.com/auth/drive.file',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.trash({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file to trash.
     *     fileId: 'placeholder-value',
     *     // If true, all badged Labels will be returned in the labelInfo part of the response.
     *     includeBadgedLabels: 'placeholder-value',
     *     // A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     *     includeLabels: 'placeholder-value',
     *     // A comma-separated list of names of Categories to include in the response.
     *     includeMetadataForCategories: 'placeholder-value',
     *     // Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     *     includePermissionsForView: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the requesting application supports both My Drives and shared drives.
     *     supportsAllDrives: 'placeholder-value',
     *     // Deprecated use supportsAllDrives instead.
     *     supportsTeamDrives: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // If true, Permissions with type Audience are represented with Domain type.
     *     useLegacyDomainPermissionBehavior: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "actionItems": [],
     *   //   "alternateLink": "my_alternateLink",
     *   //   "alwaysShowInPhotos": false,
     *   //   "ancestorHasAugmentedPermissions": false,
     *   //   "appDataContents": false,
     *   //   "appliedCategories": [],
     *   //   "approvalMetadata": {},
     *   //   "authorizedAppIds": [],
     *   //   "blockingDetectors": [],
     *   //   "canComment": false,
     *   //   "capabilities": {},
     *   //   "categoryMetadata": {},
     *   //   "changed": false,
     *   //   "clientEncryptionDetails": {},
     *   //   "commentsImported": false,
     *   //   "containsUnsubscribedChildren": false,
     *   //   "contentRestriction": {},
     *   //   "contentRestrictions": [],
     *   //   "copyRequiresWriterPermission": false,
     *   //   "copyable": false,
     *   //   "createdDate": "my_createdDate",
     *   //   "creator": {},
     *   //   "creatorAppId": "my_creatorAppId",
     *   //   "customerId": "my_customerId",
     *   //   "defaultOpenWithLink": "my_defaultOpenWithLink",
     *   //   "descendantOfRoot": false,
     *   //   "description": "my_description",
     *   //   "detectors": [],
     *   //   "downloadUrl": "my_downloadUrl",
     *   //   "driveId": "my_driveId",
     *   //   "driveSource": {},
     *   //   "editable": false,
     *   //   "efficiencyInfo": {},
     *   //   "embedLink": "my_embedLink",
     *   //   "embedded": false,
     *   //   "embeddingParent": "my_embeddingParent",
     *   //   "etag": "my_etag",
     *   //   "explicitlyTrashed": false,
     *   //   "exportLinks": {},
     *   //   "fileExtension": "my_fileExtension",
     *   //   "fileSize": "my_fileSize",
     *   //   "flaggedForAbuse": false,
     *   //   "folderColor": "my_folderColor",
     *   //   "folderColorRgb": "my_folderColorRgb",
     *   //   "folderFeatures": [],
     *   //   "folderProperties": {},
     *   //   "fullFileExtension": "my_fullFileExtension",
     *   //   "gplusMedia": false,
     *   //   "hasAppsScriptAddOn": false,
     *   //   "hasAugmentedPermissions": false,
     *   //   "hasChildFolders": false,
     *   //   "hasComment": false,
     *   //   "hasLegacyBlobComments": false,
     *   //   "hasPermissionsForViews": false,
     *   //   "hasPreventDownloadConsequence": false,
     *   //   "hasThumbnail": false,
     *   //   "hasVisitorPermissions": false,
     *   //   "headRevisionCreationDate": "my_headRevisionCreationDate",
     *   //   "headRevisionId": "my_headRevisionId",
     *   //   "iconLink": "my_iconLink",
     *   //   "id": "my_id",
     *   //   "imageMediaMetadata": {},
     *   //   "indexableText": {},
     *   //   "isAppAuthorized": false,
     *   //   "isCompressed": false,
     *   //   "kind": "my_kind",
     *   //   "labelInfo": {},
     *   //   "labels": {},
     *   //   "lastModifyingUser": {},
     *   //   "lastModifyingUserName": "my_lastModifyingUserName",
     *   //   "lastViewedByMeDate": "my_lastViewedByMeDate",
     *   //   "linkShareMetadata": {},
     *   //   "localId": {},
     *   //   "markedViewedByMeDate": "my_markedViewedByMeDate",
     *   //   "md5Checksum": "my_md5Checksum",
     *   //   "mimeType": "my_mimeType",
     *   //   "modifiedByMeDate": "my_modifiedByMeDate",
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "openWithLinks": {},
     *   //   "organizationDisplayName": "my_organizationDisplayName",
     *   //   "originalFileSize": "my_originalFileSize",
     *   //   "originalFilename": "my_originalFilename",
     *   //   "originalMd5Checksum": "my_originalMd5Checksum",
     *   //   "ownedByMe": false,
     *   //   "ownerNames": [],
     *   //   "owners": [],
     *   //   "packageFileSize": "my_packageFileSize",
     *   //   "packageId": "my_packageId",
     *   //   "pairedDocType": "my_pairedDocType",
     *   //   "parent": {},
     *   //   "parents": [],
     *   //   "passivelySubscribed": false,
     *   //   "permissionIds": [],
     *   //   "permissions": [],
     *   //   "permissionsSummary": {},
     *   //   "photosCompressionStatus": "my_photosCompressionStatus",
     *   //   "photosStoragePolicy": "my_photosStoragePolicy",
     *   //   "preview": {},
     *   //   "primaryDomainName": "my_primaryDomainName",
     *   //   "primarySyncParentId": "my_primarySyncParentId",
     *   //   "properties": [],
     *   //   "publishingInfo": {},
     *   //   "quotaBytesUsed": "my_quotaBytesUsed",
     *   //   "readable": false,
     *   //   "readersCanSeeComments": false,
     *   //   "recency": "my_recency",
     *   //   "recencyReason": "my_recencyReason",
     *   //   "recursiveFileCount": "my_recursiveFileCount",
     *   //   "recursiveFileSize": "my_recursiveFileSize",
     *   //   "recursiveQuotaBytesUsed": "my_recursiveQuotaBytesUsed",
     *   //   "removedParents": [],
     *   //   "resourceKey": "my_resourceKey",
     *   //   "searchResultSource": "my_searchResultSource",
     *   //   "selfLink": "my_selfLink",
     *   //   "serverCreatedDate": "my_serverCreatedDate",
     *   //   "sha1Checksums": [],
     *   //   "shareLink": "my_shareLink",
     *   //   "shareable": false,
     *   //   "shared": false,
     *   //   "sharedWithMeDate": "my_sharedWithMeDate",
     *   //   "sharingUser": {},
     *   //   "shortcutDetails": {},
     *   //   "shortcutTargetId": "my_shortcutTargetId",
     *   //   "shortcutTargetMimeType": "my_shortcutTargetMimeType",
     *   //   "source": {},
     *   //   "sourceAppId": "my_sourceAppId",
     *   //   "sources": {},
     *   //   "spaces": [],
     *   //   "storagePolicyPending": false,
     *   //   "subscribed": false,
     *   //   "supportedRoles": [],
     *   //   "teamDriveId": "my_teamDriveId",
     *   //   "templateData": {},
     *   //   "thumbnail": {},
     *   //   "thumbnailLink": "my_thumbnailLink",
     *   //   "thumbnailVersion": "my_thumbnailVersion",
     *   //   "title": "my_title",
     *   //   "trashedDate": "my_trashedDate",
     *   //   "trashingUser": {},
     *   //   "userPermission": {},
     *   //   "version": "my_version",
     *   //   "videoMediaMetadata": {},
     *   //   "warningDetectors": [],
     *   //   "webContentLink": "my_webContentLink",
     *   //   "webViewLink": "my_webViewLink",
     *   //   "workspaceIds": [],
     *   //   "writersCanShare": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.trash
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file to trash.
     * @param {boolean=} params.includeBadgedLabels If true, all badged Labels will be returned in the labelInfo part of the response.
     * @param {string=} params.includeLabels A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     * @param {string=} params.includeMetadataForCategories A comma-separated list of names of Categories to include in the response.
     * @param {string=} params.includePermissionsForView Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {boolean=} params.supportsAllDrives Whether the requesting application supports both My Drives and shared drives.
     * @param {boolean=} params.supportsTeamDrives Deprecated use supportsAllDrives instead.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {boolean=} params.useLegacyDomainPermissionBehavior If true, Permissions with type Audience are represented with Domain type.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    trash(
      params: Params$Resource$Files$Trash,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    trash(
      params?: Params$Resource$Files$Trash,
      options?: MethodOptions
    ): GaxiosPromise<Schema$File>;
    trash(
      params: Params$Resource$Files$Trash,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    trash(
      params: Params$Resource$Files$Trash,
      options: MethodOptions | BodyResponseCallback<Schema$File>,
      callback: BodyResponseCallback<Schema$File>
    ): void;
    trash(
      params: Params$Resource$Files$Trash,
      callback: BodyResponseCallback<Schema$File>
    ): void;
    trash(callback: BodyResponseCallback<Schema$File>): void;
    trash(
      paramsOrCallback?:
        | Params$Resource$Files$Trash
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$File> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Files$Trash;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Trash;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files/{fileId}/trash').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$File>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$File>(parameters);
      }
    }

    /**
     * drive.files.untrash
     * @desc Restores a file from the trash.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.apps.readonly',
     *       'https://www.googleapis.com/auth/drive.file',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.untrash({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file to untrash.
     *     fileId: 'placeholder-value',
     *     // If true, all badged Labels will be returned in the labelInfo part of the response.
     *     includeBadgedLabels: 'placeholder-value',
     *     // A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     *     includeLabels: 'placeholder-value',
     *     // A comma-separated list of names of Categories to include in the response.
     *     includeMetadataForCategories: 'placeholder-value',
     *     // Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     *     includePermissionsForView: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the requesting application supports both My Drives and shared drives.
     *     supportsAllDrives: 'placeholder-value',
     *     // Deprecated use supportsAllDrives instead.
     *     supportsTeamDrives: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // If true, Permissions with type Audience are represented with Domain type.
     *     useLegacyDomainPermissionBehavior: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "actionItems": [],
     *   //   "alternateLink": "my_alternateLink",
     *   //   "alwaysShowInPhotos": false,
     *   //   "ancestorHasAugmentedPermissions": false,
     *   //   "appDataContents": false,
     *   //   "appliedCategories": [],
     *   //   "approvalMetadata": {},
     *   //   "authorizedAppIds": [],
     *   //   "blockingDetectors": [],
     *   //   "canComment": false,
     *   //   "capabilities": {},
     *   //   "categoryMetadata": {},
     *   //   "changed": false,
     *   //   "clientEncryptionDetails": {},
     *   //   "commentsImported": false,
     *   //   "containsUnsubscribedChildren": false,
     *   //   "contentRestriction": {},
     *   //   "contentRestrictions": [],
     *   //   "copyRequiresWriterPermission": false,
     *   //   "copyable": false,
     *   //   "createdDate": "my_createdDate",
     *   //   "creator": {},
     *   //   "creatorAppId": "my_creatorAppId",
     *   //   "customerId": "my_customerId",
     *   //   "defaultOpenWithLink": "my_defaultOpenWithLink",
     *   //   "descendantOfRoot": false,
     *   //   "description": "my_description",
     *   //   "detectors": [],
     *   //   "downloadUrl": "my_downloadUrl",
     *   //   "driveId": "my_driveId",
     *   //   "driveSource": {},
     *   //   "editable": false,
     *   //   "efficiencyInfo": {},
     *   //   "embedLink": "my_embedLink",
     *   //   "embedded": false,
     *   //   "embeddingParent": "my_embeddingParent",
     *   //   "etag": "my_etag",
     *   //   "explicitlyTrashed": false,
     *   //   "exportLinks": {},
     *   //   "fileExtension": "my_fileExtension",
     *   //   "fileSize": "my_fileSize",
     *   //   "flaggedForAbuse": false,
     *   //   "folderColor": "my_folderColor",
     *   //   "folderColorRgb": "my_folderColorRgb",
     *   //   "folderFeatures": [],
     *   //   "folderProperties": {},
     *   //   "fullFileExtension": "my_fullFileExtension",
     *   //   "gplusMedia": false,
     *   //   "hasAppsScriptAddOn": false,
     *   //   "hasAugmentedPermissions": false,
     *   //   "hasChildFolders": false,
     *   //   "hasComment": false,
     *   //   "hasLegacyBlobComments": false,
     *   //   "hasPermissionsForViews": false,
     *   //   "hasPreventDownloadConsequence": false,
     *   //   "hasThumbnail": false,
     *   //   "hasVisitorPermissions": false,
     *   //   "headRevisionCreationDate": "my_headRevisionCreationDate",
     *   //   "headRevisionId": "my_headRevisionId",
     *   //   "iconLink": "my_iconLink",
     *   //   "id": "my_id",
     *   //   "imageMediaMetadata": {},
     *   //   "indexableText": {},
     *   //   "isAppAuthorized": false,
     *   //   "isCompressed": false,
     *   //   "kind": "my_kind",
     *   //   "labelInfo": {},
     *   //   "labels": {},
     *   //   "lastModifyingUser": {},
     *   //   "lastModifyingUserName": "my_lastModifyingUserName",
     *   //   "lastViewedByMeDate": "my_lastViewedByMeDate",
     *   //   "linkShareMetadata": {},
     *   //   "localId": {},
     *   //   "markedViewedByMeDate": "my_markedViewedByMeDate",
     *   //   "md5Checksum": "my_md5Checksum",
     *   //   "mimeType": "my_mimeType",
     *   //   "modifiedByMeDate": "my_modifiedByMeDate",
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "openWithLinks": {},
     *   //   "organizationDisplayName": "my_organizationDisplayName",
     *   //   "originalFileSize": "my_originalFileSize",
     *   //   "originalFilename": "my_originalFilename",
     *   //   "originalMd5Checksum": "my_originalMd5Checksum",
     *   //   "ownedByMe": false,
     *   //   "ownerNames": [],
     *   //   "owners": [],
     *   //   "packageFileSize": "my_packageFileSize",
     *   //   "packageId": "my_packageId",
     *   //   "pairedDocType": "my_pairedDocType",
     *   //   "parent": {},
     *   //   "parents": [],
     *   //   "passivelySubscribed": false,
     *   //   "permissionIds": [],
     *   //   "permissions": [],
     *   //   "permissionsSummary": {},
     *   //   "photosCompressionStatus": "my_photosCompressionStatus",
     *   //   "photosStoragePolicy": "my_photosStoragePolicy",
     *   //   "preview": {},
     *   //   "primaryDomainName": "my_primaryDomainName",
     *   //   "primarySyncParentId": "my_primarySyncParentId",
     *   //   "properties": [],
     *   //   "publishingInfo": {},
     *   //   "quotaBytesUsed": "my_quotaBytesUsed",
     *   //   "readable": false,
     *   //   "readersCanSeeComments": false,
     *   //   "recency": "my_recency",
     *   //   "recencyReason": "my_recencyReason",
     *   //   "recursiveFileCount": "my_recursiveFileCount",
     *   //   "recursiveFileSize": "my_recursiveFileSize",
     *   //   "recursiveQuotaBytesUsed": "my_recursiveQuotaBytesUsed",
     *   //   "removedParents": [],
     *   //   "resourceKey": "my_resourceKey",
     *   //   "searchResultSource": "my_searchResultSource",
     *   //   "selfLink": "my_selfLink",
     *   //   "serverCreatedDate": "my_serverCreatedDate",
     *   //   "sha1Checksums": [],
     *   //   "shareLink": "my_shareLink",
     *   //   "shareable": false,
     *   //   "shared": false,
     *   //   "sharedWithMeDate": "my_sharedWithMeDate",
     *   //   "sharingUser": {},
     *   //   "shortcutDetails": {},
     *   //   "shortcutTargetId": "my_shortcutTargetId",
     *   //   "shortcutTargetMimeType": "my_shortcutTargetMimeType",
     *   //   "source": {},
     *   //   "sourceAppId": "my_sourceAppId",
     *   //   "sources": {},
     *   //   "spaces": [],
     *   //   "storagePolicyPending": false,
     *   //   "subscribed": false,
     *   //   "supportedRoles": [],
     *   //   "teamDriveId": "my_teamDriveId",
     *   //   "templateData": {},
     *   //   "thumbnail": {},
     *   //   "thumbnailLink": "my_thumbnailLink",
     *   //   "thumbnailVersion": "my_thumbnailVersion",
     *   //   "title": "my_title",
     *   //   "trashedDate": "my_trashedDate",
     *   //   "trashingUser": {},
     *   //   "userPermission": {},
     *   //   "version": "my_version",
     *   //   "videoMediaMetadata": {},
     *   //   "warningDetectors": [],
     *   //   "webContentLink": "my_webContentLink",
     *   //   "webViewLink": "my_webViewLink",
     *   //   "workspaceIds": [],
     *   //   "writersCanShare": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.untrash
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file to untrash.
     * @param {boolean=} params.includeBadgedLabels If true, all badged Labels will be returned in the labelInfo part of the response.
     * @param {string=} params.includeLabels A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     * @param {string=} params.includeMetadataForCategories A comma-separated list of names of Categories to include in the response.
     * @param {string=} params.includePermissionsForView Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {boolean=} params.supportsAllDrives Whether the requesting application supports both My Drives and shared drives.
     * @param {boolean=} params.supportsTeamDrives Deprecated use supportsAllDrives instead.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {boolean=} params.useLegacyDomainPermissionBehavior If true, Permissions with type Audience are represented with Domain type.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    untrash(
      params: Params$Resource$Files$Untrash,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    untrash(
      params?: Params$Resource$Files$Untrash,
      options?: MethodOptions
    ): GaxiosPromise<Schema$File>;
    untrash(
      params: Params$Resource$Files$Untrash,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    untrash(
      params: Params$Resource$Files$Untrash,
      options: MethodOptions | BodyResponseCallback<Schema$File>,
      callback: BodyResponseCallback<Schema$File>
    ): void;
    untrash(
      params: Params$Resource$Files$Untrash,
      callback: BodyResponseCallback<Schema$File>
    ): void;
    untrash(callback: BodyResponseCallback<Schema$File>): void;
    untrash(
      paramsOrCallback?:
        | Params$Resource$Files$Untrash
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$File> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Files$Untrash;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Untrash;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files/{fileId}/untrash').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$File>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$File>(parameters);
      }
    }

    /**
     * drive.files.update
     * @desc Updates file metadata and/or content.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.apps.readonly',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.scripts',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.update({
     *     // Comma-separated list of parent IDs to add.
     *     addParents: 'placeholder-value',
     *     // Comma-separated list of Workspace IDs to add; file will be added to all associated Workspaces.
     *     addWorkspaces: 'placeholder-value',
     *     // Base revision to use when uploading using partial updates.
     *     baseRevision: 'placeholder-value',
     *     // If true, checks that prevent increasing the number of an item's parents are bypassed.
     *     bypassMultiparentingCheck: 'placeholder-value',
     *     // Whether the user has confirmed any warnings for the update.
     *     confirmed: 'placeholder-value',
     *     // Whether to convert this file to the corresponding Google Docs format.
     *     convert: 'placeholder-value',
     *     // If true and combined with exactly one ID in the addParents field, all the file's current parents will be replaced.
     *     enableSingleParentingOnAddParentByOwner: 'placeholder-value',
     *     // Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. If the item's owner makes a request to add a single parent, the item will be removed from all current folders and placed in the requested folder. Other requests that increase the number of parents will fail, except when the canAddMyDriveParent file capability is true and a single parent is being added.
     *     enforceSingleParent: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // A comma-separated list of parent IDs that have already been discovered by the requesting user. Parent filtering is prevented for parents on this list.
     *     expectedParentIds: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file to update.
     *     fileId: 'placeholder-value',
     *     // If true, all badged Labels will be returned in the labelInfo part of the response.
     *     includeBadgedLabels: 'placeholder-value',
     *     // A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     *     includeLabels: 'placeholder-value',
     *     // A comma-separated list of names of Categories to include in the response.
     *     includeMetadataForCategories: 'placeholder-value',
     *     // Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     *     includePermissionsForView: 'placeholder-value',
     *     // A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     *     languageCode: 'placeholder-value',
     *     // The behavior of the last modified date. This overrides setModifiedDate.
     *     modifiedDateBehavior: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether a blob upload should create a new revision. If false, the blob data in the current head revision is replaced. If true or not set, a new blob is created as head revision, and previous unpinned revisions are preserved for a short period of time. Pinned revisions are stored indefinitely using additional storage quota, up to a maximum of 200 revisions.
     *     newRevision: 'placeholder-value',
     *     // Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads.
     *     ocr: 'placeholder-value',
     *     // If ocr is true, hints at the language to use. Valid values are ISO 639-1 codes.
     *     ocrLanguage: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // Whether to pin the new revision. A file can have a maximum of 200 pinned revisions.
     *     pinned: 'placeholder-value',
     *     // Query string for file update preconditions.
     *     precondition: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // Comma-separated list of parent IDs to remove.
     *     removeParents: 'placeholder-value',
     *     // Comma-separated list of Workspace IDs to remove; file will be removed from all associated Workspaces.
     *     removeWorkspaces: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether to set the modified date with the supplied modified date.
     *     setModifiedDate: 'placeholder-value',
     *     // For eligible files (e.g. image and video) whether to store the data at original compressed high-quality resolution. Valid values are 'original' and 'highQuality'
     *     storagePolicy: 'placeholder-value',
     *     // Whether the requesting application supports both My Drives and shared drives.
     *     supportsAllDrives: 'placeholder-value',
     *     // Deprecated use supportsAllDrives instead.
     *     supportsTeamDrives: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // The language of the timed text.
     *     timedTextLanguage: 'placeholder-value',
     *     // The timed text track name.
     *     timedTextTrackName: 'placeholder-value',
     *     // Whether to update the view date after successfully updating the file.
     *     updateViewedDate: 'placeholder-value',
     *     // Whether to use the content as indexable text.
     *     useContentAsIndexableText: 'placeholder-value',
     *     // Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the item belongs. This feature is only available to whitelisted apps.
     *     useDomainAdminAccess: 'placeholder-value',
     *     // If true, Permissions with type Audience are represented with Domain type.
     *     useLegacyDomainPermissionBehavior: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "actionItems": [],
     *       //   "alternateLink": "my_alternateLink",
     *       //   "alwaysShowInPhotos": false,
     *       //   "ancestorHasAugmentedPermissions": false,
     *       //   "appDataContents": false,
     *       //   "appliedCategories": [],
     *       //   "approvalMetadata": {},
     *       //   "authorizedAppIds": [],
     *       //   "blockingDetectors": [],
     *       //   "canComment": false,
     *       //   "capabilities": {},
     *       //   "categoryMetadata": {},
     *       //   "changed": false,
     *       //   "clientEncryptionDetails": {},
     *       //   "commentsImported": false,
     *       //   "containsUnsubscribedChildren": false,
     *       //   "contentRestriction": {},
     *       //   "contentRestrictions": [],
     *       //   "copyRequiresWriterPermission": false,
     *       //   "copyable": false,
     *       //   "createdDate": "my_createdDate",
     *       //   "creator": {},
     *       //   "creatorAppId": "my_creatorAppId",
     *       //   "customerId": "my_customerId",
     *       //   "defaultOpenWithLink": "my_defaultOpenWithLink",
     *       //   "descendantOfRoot": false,
     *       //   "description": "my_description",
     *       //   "detectors": [],
     *       //   "downloadUrl": "my_downloadUrl",
     *       //   "driveId": "my_driveId",
     *       //   "driveSource": {},
     *       //   "editable": false,
     *       //   "efficiencyInfo": {},
     *       //   "embedLink": "my_embedLink",
     *       //   "embedded": false,
     *       //   "embeddingParent": "my_embeddingParent",
     *       //   "etag": "my_etag",
     *       //   "explicitlyTrashed": false,
     *       //   "exportLinks": {},
     *       //   "fileExtension": "my_fileExtension",
     *       //   "fileSize": "my_fileSize",
     *       //   "flaggedForAbuse": false,
     *       //   "folderColor": "my_folderColor",
     *       //   "folderColorRgb": "my_folderColorRgb",
     *       //   "folderFeatures": [],
     *       //   "folderProperties": {},
     *       //   "fullFileExtension": "my_fullFileExtension",
     *       //   "gplusMedia": false,
     *       //   "hasAppsScriptAddOn": false,
     *       //   "hasAugmentedPermissions": false,
     *       //   "hasChildFolders": false,
     *       //   "hasComment": false,
     *       //   "hasLegacyBlobComments": false,
     *       //   "hasPermissionsForViews": false,
     *       //   "hasPreventDownloadConsequence": false,
     *       //   "hasThumbnail": false,
     *       //   "hasVisitorPermissions": false,
     *       //   "headRevisionCreationDate": "my_headRevisionCreationDate",
     *       //   "headRevisionId": "my_headRevisionId",
     *       //   "iconLink": "my_iconLink",
     *       //   "id": "my_id",
     *       //   "imageMediaMetadata": {},
     *       //   "indexableText": {},
     *       //   "isAppAuthorized": false,
     *       //   "isCompressed": false,
     *       //   "kind": "my_kind",
     *       //   "labelInfo": {},
     *       //   "labels": {},
     *       //   "lastModifyingUser": {},
     *       //   "lastModifyingUserName": "my_lastModifyingUserName",
     *       //   "lastViewedByMeDate": "my_lastViewedByMeDate",
     *       //   "linkShareMetadata": {},
     *       //   "localId": {},
     *       //   "markedViewedByMeDate": "my_markedViewedByMeDate",
     *       //   "md5Checksum": "my_md5Checksum",
     *       //   "mimeType": "my_mimeType",
     *       //   "modifiedByMeDate": "my_modifiedByMeDate",
     *       //   "modifiedDate": "my_modifiedDate",
     *       //   "openWithLinks": {},
     *       //   "organizationDisplayName": "my_organizationDisplayName",
     *       //   "originalFileSize": "my_originalFileSize",
     *       //   "originalFilename": "my_originalFilename",
     *       //   "originalMd5Checksum": "my_originalMd5Checksum",
     *       //   "ownedByMe": false,
     *       //   "ownerNames": [],
     *       //   "owners": [],
     *       //   "packageFileSize": "my_packageFileSize",
     *       //   "packageId": "my_packageId",
     *       //   "pairedDocType": "my_pairedDocType",
     *       //   "parent": {},
     *       //   "parents": [],
     *       //   "passivelySubscribed": false,
     *       //   "permissionIds": [],
     *       //   "permissions": [],
     *       //   "permissionsSummary": {},
     *       //   "photosCompressionStatus": "my_photosCompressionStatus",
     *       //   "photosStoragePolicy": "my_photosStoragePolicy",
     *       //   "preview": {},
     *       //   "primaryDomainName": "my_primaryDomainName",
     *       //   "primarySyncParentId": "my_primarySyncParentId",
     *       //   "properties": [],
     *       //   "publishingInfo": {},
     *       //   "quotaBytesUsed": "my_quotaBytesUsed",
     *       //   "readable": false,
     *       //   "readersCanSeeComments": false,
     *       //   "recency": "my_recency",
     *       //   "recencyReason": "my_recencyReason",
     *       //   "recursiveFileCount": "my_recursiveFileCount",
     *       //   "recursiveFileSize": "my_recursiveFileSize",
     *       //   "recursiveQuotaBytesUsed": "my_recursiveQuotaBytesUsed",
     *       //   "removedParents": [],
     *       //   "resourceKey": "my_resourceKey",
     *       //   "searchResultSource": "my_searchResultSource",
     *       //   "selfLink": "my_selfLink",
     *       //   "serverCreatedDate": "my_serverCreatedDate",
     *       //   "sha1Checksums": [],
     *       //   "shareLink": "my_shareLink",
     *       //   "shareable": false,
     *       //   "shared": false,
     *       //   "sharedWithMeDate": "my_sharedWithMeDate",
     *       //   "sharingUser": {},
     *       //   "shortcutDetails": {},
     *       //   "shortcutTargetId": "my_shortcutTargetId",
     *       //   "shortcutTargetMimeType": "my_shortcutTargetMimeType",
     *       //   "source": {},
     *       //   "sourceAppId": "my_sourceAppId",
     *       //   "sources": {},
     *       //   "spaces": [],
     *       //   "storagePolicyPending": false,
     *       //   "subscribed": false,
     *       //   "supportedRoles": [],
     *       //   "teamDriveId": "my_teamDriveId",
     *       //   "templateData": {},
     *       //   "thumbnail": {},
     *       //   "thumbnailLink": "my_thumbnailLink",
     *       //   "thumbnailVersion": "my_thumbnailVersion",
     *       //   "title": "my_title",
     *       //   "trashedDate": "my_trashedDate",
     *       //   "trashingUser": {},
     *       //   "userPermission": {},
     *       //   "version": "my_version",
     *       //   "videoMediaMetadata": {},
     *       //   "warningDetectors": [],
     *       //   "webContentLink": "my_webContentLink",
     *       //   "webViewLink": "my_webViewLink",
     *       //   "workspaceIds": [],
     *       //   "writersCanShare": false
     *       // }
     *     },
     *     media: {
     *       mimeType: 'placeholder-value',
     *       body: 'placeholder-value',
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "actionItems": [],
     *   //   "alternateLink": "my_alternateLink",
     *   //   "alwaysShowInPhotos": false,
     *   //   "ancestorHasAugmentedPermissions": false,
     *   //   "appDataContents": false,
     *   //   "appliedCategories": [],
     *   //   "approvalMetadata": {},
     *   //   "authorizedAppIds": [],
     *   //   "blockingDetectors": [],
     *   //   "canComment": false,
     *   //   "capabilities": {},
     *   //   "categoryMetadata": {},
     *   //   "changed": false,
     *   //   "clientEncryptionDetails": {},
     *   //   "commentsImported": false,
     *   //   "containsUnsubscribedChildren": false,
     *   //   "contentRestriction": {},
     *   //   "contentRestrictions": [],
     *   //   "copyRequiresWriterPermission": false,
     *   //   "copyable": false,
     *   //   "createdDate": "my_createdDate",
     *   //   "creator": {},
     *   //   "creatorAppId": "my_creatorAppId",
     *   //   "customerId": "my_customerId",
     *   //   "defaultOpenWithLink": "my_defaultOpenWithLink",
     *   //   "descendantOfRoot": false,
     *   //   "description": "my_description",
     *   //   "detectors": [],
     *   //   "downloadUrl": "my_downloadUrl",
     *   //   "driveId": "my_driveId",
     *   //   "driveSource": {},
     *   //   "editable": false,
     *   //   "efficiencyInfo": {},
     *   //   "embedLink": "my_embedLink",
     *   //   "embedded": false,
     *   //   "embeddingParent": "my_embeddingParent",
     *   //   "etag": "my_etag",
     *   //   "explicitlyTrashed": false,
     *   //   "exportLinks": {},
     *   //   "fileExtension": "my_fileExtension",
     *   //   "fileSize": "my_fileSize",
     *   //   "flaggedForAbuse": false,
     *   //   "folderColor": "my_folderColor",
     *   //   "folderColorRgb": "my_folderColorRgb",
     *   //   "folderFeatures": [],
     *   //   "folderProperties": {},
     *   //   "fullFileExtension": "my_fullFileExtension",
     *   //   "gplusMedia": false,
     *   //   "hasAppsScriptAddOn": false,
     *   //   "hasAugmentedPermissions": false,
     *   //   "hasChildFolders": false,
     *   //   "hasComment": false,
     *   //   "hasLegacyBlobComments": false,
     *   //   "hasPermissionsForViews": false,
     *   //   "hasPreventDownloadConsequence": false,
     *   //   "hasThumbnail": false,
     *   //   "hasVisitorPermissions": false,
     *   //   "headRevisionCreationDate": "my_headRevisionCreationDate",
     *   //   "headRevisionId": "my_headRevisionId",
     *   //   "iconLink": "my_iconLink",
     *   //   "id": "my_id",
     *   //   "imageMediaMetadata": {},
     *   //   "indexableText": {},
     *   //   "isAppAuthorized": false,
     *   //   "isCompressed": false,
     *   //   "kind": "my_kind",
     *   //   "labelInfo": {},
     *   //   "labels": {},
     *   //   "lastModifyingUser": {},
     *   //   "lastModifyingUserName": "my_lastModifyingUserName",
     *   //   "lastViewedByMeDate": "my_lastViewedByMeDate",
     *   //   "linkShareMetadata": {},
     *   //   "localId": {},
     *   //   "markedViewedByMeDate": "my_markedViewedByMeDate",
     *   //   "md5Checksum": "my_md5Checksum",
     *   //   "mimeType": "my_mimeType",
     *   //   "modifiedByMeDate": "my_modifiedByMeDate",
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "openWithLinks": {},
     *   //   "organizationDisplayName": "my_organizationDisplayName",
     *   //   "originalFileSize": "my_originalFileSize",
     *   //   "originalFilename": "my_originalFilename",
     *   //   "originalMd5Checksum": "my_originalMd5Checksum",
     *   //   "ownedByMe": false,
     *   //   "ownerNames": [],
     *   //   "owners": [],
     *   //   "packageFileSize": "my_packageFileSize",
     *   //   "packageId": "my_packageId",
     *   //   "pairedDocType": "my_pairedDocType",
     *   //   "parent": {},
     *   //   "parents": [],
     *   //   "passivelySubscribed": false,
     *   //   "permissionIds": [],
     *   //   "permissions": [],
     *   //   "permissionsSummary": {},
     *   //   "photosCompressionStatus": "my_photosCompressionStatus",
     *   //   "photosStoragePolicy": "my_photosStoragePolicy",
     *   //   "preview": {},
     *   //   "primaryDomainName": "my_primaryDomainName",
     *   //   "primarySyncParentId": "my_primarySyncParentId",
     *   //   "properties": [],
     *   //   "publishingInfo": {},
     *   //   "quotaBytesUsed": "my_quotaBytesUsed",
     *   //   "readable": false,
     *   //   "readersCanSeeComments": false,
     *   //   "recency": "my_recency",
     *   //   "recencyReason": "my_recencyReason",
     *   //   "recursiveFileCount": "my_recursiveFileCount",
     *   //   "recursiveFileSize": "my_recursiveFileSize",
     *   //   "recursiveQuotaBytesUsed": "my_recursiveQuotaBytesUsed",
     *   //   "removedParents": [],
     *   //   "resourceKey": "my_resourceKey",
     *   //   "searchResultSource": "my_searchResultSource",
     *   //   "selfLink": "my_selfLink",
     *   //   "serverCreatedDate": "my_serverCreatedDate",
     *   //   "sha1Checksums": [],
     *   //   "shareLink": "my_shareLink",
     *   //   "shareable": false,
     *   //   "shared": false,
     *   //   "sharedWithMeDate": "my_sharedWithMeDate",
     *   //   "sharingUser": {},
     *   //   "shortcutDetails": {},
     *   //   "shortcutTargetId": "my_shortcutTargetId",
     *   //   "shortcutTargetMimeType": "my_shortcutTargetMimeType",
     *   //   "source": {},
     *   //   "sourceAppId": "my_sourceAppId",
     *   //   "sources": {},
     *   //   "spaces": [],
     *   //   "storagePolicyPending": false,
     *   //   "subscribed": false,
     *   //   "supportedRoles": [],
     *   //   "teamDriveId": "my_teamDriveId",
     *   //   "templateData": {},
     *   //   "thumbnail": {},
     *   //   "thumbnailLink": "my_thumbnailLink",
     *   //   "thumbnailVersion": "my_thumbnailVersion",
     *   //   "title": "my_title",
     *   //   "trashedDate": "my_trashedDate",
     *   //   "trashingUser": {},
     *   //   "userPermission": {},
     *   //   "version": "my_version",
     *   //   "videoMediaMetadata": {},
     *   //   "warningDetectors": [],
     *   //   "webContentLink": "my_webContentLink",
     *   //   "webViewLink": "my_webViewLink",
     *   //   "workspaceIds": [],
     *   //   "writersCanShare": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.addParents Comma-separated list of parent IDs to add.
     * @param {string=} params.addWorkspaces Comma-separated list of Workspace IDs to add; file will be added to all associated Workspaces.
     * @param {string=} params.baseRevision Base revision to use when uploading using partial updates.
     * @param {boolean=} params.bypassMultiparentingCheck If true, checks that prevent increasing the number of an item's parents are bypassed.
     * @param {boolean=} params.confirmed Whether the user has confirmed any warnings for the update.
     * @param {boolean=} params.convert Whether to convert this file to the corresponding Google Docs format.
     * @param {boolean=} params.enableSingleParentingOnAddParentByOwner If true and combined with exactly one ID in the addParents field, all the file's current parents will be replaced.
     * @param {boolean=} params.enforceSingleParent Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. If the item's owner makes a request to add a single parent, the item will be removed from all current folders and placed in the requested folder. Other requests that increase the number of parents will fail, except when the canAddMyDriveParent file capability is true and a single parent is being added.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.expectedParentIds A comma-separated list of parent IDs that have already been discovered by the requesting user. Parent filtering is prevented for parents on this list.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file to update.
     * @param {boolean=} params.includeBadgedLabels If true, all badged Labels will be returned in the labelInfo part of the response.
     * @param {string=} params.includeLabels A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     * @param {string=} params.includeMetadataForCategories A comma-separated list of names of Categories to include in the response.
     * @param {string=} params.includePermissionsForView Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     * @param {string=} params.languageCode A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     * @param {string=} params.modifiedDateBehavior The behavior of the last modified date. This overrides setModifiedDate.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.newRevision Whether a blob upload should create a new revision. If false, the blob data in the current head revision is replaced. If true or not set, a new blob is created as head revision, and previous unpinned revisions are preserved for a short period of time. Pinned revisions are stored indefinitely using additional storage quota, up to a maximum of 200 revisions.
     * @param {boolean=} params.ocr Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads.
     * @param {string=} params.ocrLanguage If ocr is true, hints at the language to use. Valid values are ISO 639-1 codes.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {boolean=} params.pinned Whether to pin the new revision. A file can have a maximum of 200 pinned revisions.
     * @param {string=} params.precondition Query string for file update preconditions.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {string=} params.removeParents Comma-separated list of parent IDs to remove.
     * @param {string=} params.removeWorkspaces Comma-separated list of Workspace IDs to remove; file will be removed from all associated Workspaces.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {boolean=} params.setModifiedDate Whether to set the modified date with the supplied modified date.
     * @param {string=} params.storagePolicy For eligible files (e.g. image and video) whether to store the data at original compressed high-quality resolution. Valid values are 'original' and 'highQuality'
     * @param {boolean=} params.supportsAllDrives Whether the requesting application supports both My Drives and shared drives.
     * @param {boolean=} params.supportsTeamDrives Deprecated use supportsAllDrives instead.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {string=} params.timedTextLanguage The language of the timed text.
     * @param {string=} params.timedTextTrackName The timed text track name.
     * @param {boolean=} params.updateViewedDate Whether to update the view date after successfully updating the file.
     * @param {boolean=} params.useContentAsIndexableText Whether to use the content as indexable text.
     * @param {boolean=} params.useDomainAdminAccess Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the item belongs. This feature is only available to whitelisted apps.
     * @param {boolean=} params.useLegacyDomainPermissionBehavior If true, Permissions with type Audience are represented with Domain type.
     * @param  {object} params.requestBody Media resource metadata
     * @param {object} params.media Media object
     * @param {string} params.media.mimeType Media mime-type
     * @param {string|object} params.media.body Media body contents
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params: Params$Resource$Files$Update,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    update(
      params?: Params$Resource$Files$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$File>;
    update(
      params: Params$Resource$Files$Update,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    update(
      params: Params$Resource$Files$Update,
      options: MethodOptions | BodyResponseCallback<Schema$File>,
      callback: BodyResponseCallback<Schema$File>
    ): void;
    update(
      params: Params$Resource$Files$Update,
      callback: BodyResponseCallback<Schema$File>
    ): void;
    update(callback: BodyResponseCallback<Schema$File>): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Files$Update
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$File>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$File> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Files$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files/{fileId}').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'PUT',
          },
          options
        ),
        params,
        mediaUrl: (rootUrl + '/upload/drive/v2.1beta/files/{fileId}').replace(
          /([^:]\/)\/+/g,
          '$1'
        ),
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$File>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$File>(parameters);
      }
    }

    /**
     * drive.files.updateCategoryMetadata
     * @desc Updates Category Metadata applied to a file. Returns Category Metadata for the Categories that were updated by the request.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.updateCategoryMetadata({
     *     // The ID of the file to which the categories belong.
     *     fileId: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "categoryMetadata": [],
     *       //   "kind": "my_kind"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "categoryMetadata": {},
     *   //   "items": [],
     *   //   "kind": "my_kind",
     *   //   "nextPageToken": "my_nextPageToken"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.updateCategoryMetadata
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.fileId The ID of the file to which the categories belong.
     * @param {().UpdateCategoryMetadata} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    updateCategoryMetadata(
      params: Params$Resource$Files$Updatecategorymetadata,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    updateCategoryMetadata(
      params?: Params$Resource$Files$Updatecategorymetadata,
      options?: MethodOptions
    ): GaxiosPromise<Schema$CategoryMetadataList>;
    updateCategoryMetadata(
      params: Params$Resource$Files$Updatecategorymetadata,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    updateCategoryMetadata(
      params: Params$Resource$Files$Updatecategorymetadata,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$CategoryMetadataList>,
      callback: BodyResponseCallback<Schema$CategoryMetadataList>
    ): void;
    updateCategoryMetadata(
      params: Params$Resource$Files$Updatecategorymetadata,
      callback: BodyResponseCallback<Schema$CategoryMetadataList>
    ): void;
    updateCategoryMetadata(
      callback: BodyResponseCallback<Schema$CategoryMetadataList>
    ): void;
    updateCategoryMetadata(
      paramsOrCallback?:
        | Params$Resource$Files$Updatecategorymetadata
        | BodyResponseCallback<Schema$CategoryMetadataList>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$CategoryMetadataList>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$CategoryMetadataList>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$CategoryMetadataList>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Files$Updatecategorymetadata;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Updatecategorymetadata;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/files/{fileId}/updateCategoryMetadata'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$CategoryMetadataList>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$CategoryMetadataList>(parameters);
      }
    }

    /**
     * drive.files.watch
     * @desc Subscribe to changes on a file
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.photos.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.files.watch({
     *     // Whether the user is acknowledging the risk of downloading known malware or other abusive files.
     *     acknowledgeAbuse: 'placeholder-value',
     *     // Whether to retrieve all properties, not just those visible to the app.
     *     allProperties: 'placeholder-value',
     *     // The origin in which the sharing widget will be embedded. This should be supplied when requesting the shareLink field.
     *     embedOrigin: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // A comma-separated list of parent IDs that have already been discovered by the requesting user. Parent filtering is prevented for parents on this list.
     *     expectedParentIds: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID for the file in question.
     *     fileId: 'placeholder-value',
     *     // DEPRECATED; not needed. A comma separated list of app IDs. If set the result will only include a file inside the app data folder if it could be opened by any of the specified app IDs with the drive.appdata scope. Requires the ALL_APPDATA scope.
     *     fileScopeAppIds: 'placeholder-value',
     *     // If true, all badged Labels will be returned in the labelInfo part of the response.
     *     includeBadgedLabels: 'placeholder-value',
     *     // A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     *     includeLabels: 'placeholder-value',
     *     // A comma-separated list of names of Categories to include in the response.
     *     includeMetadataForCategories: 'placeholder-value',
     *     // Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     *     includePermissionsForView: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // This parameter is deprecated and has no function.
     *     projection: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // Whether the request should be rejected if it would generate an inefficient query.
     *     rejectInefficientRequests: 'placeholder-value',
     *     // Whether the request should return 403 instead 404 if the file exists but the user doesn't have read access. This option is not compatible with the deprecated updateViewedDate parameter. If set for any item in a batch, it will be set for all.
     *     reportPermissionErrors: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request should return efficiency info.
     *     returnEfficiencyInfo: 'placeholder-value',
     *     // Specifies the Revision ID that should be downloaded. Ignored unless alt=media is specified.
     *     revisionId: 'placeholder-value',
     *     // Deprecated. This parameter is no longer necessary.
     *     sources: 'placeholder-value',
     *     // Whether the requesting application supports both My Drives and shared drives.
     *     supportsAllDrives: 'placeholder-value',
     *     // Deprecated - use supportsAllDrives instead.
     *     supportsTeamDrives: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // Deprecated: Use files.update with modifiedDateBehavior=noChange, updateViewedDate=true and an empty request body.
     *     updateViewedDate: 'placeholder-value',
     *     // Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the item belongs.
     *     useDomainAdminAccess: 'placeholder-value',
     *     // If true, Permissions with type Audience are represented with Domain type.
     *     useLegacyDomainPermissionBehavior: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "address": "my_address",
     *       //   "expiration": "my_expiration",
     *       //   "id": "my_id",
     *       //   "kind": "my_kind",
     *       //   "params": {},
     *       //   "payload": false,
     *       //   "resourceId": "my_resourceId",
     *       //   "resourceUri": "my_resourceUri",
     *       //   "token": "my_token",
     *       //   "type": "my_type"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "address": "my_address",
     *   //   "expiration": "my_expiration",
     *   //   "id": "my_id",
     *   //   "kind": "my_kind",
     *   //   "params": {},
     *   //   "payload": false,
     *   //   "resourceId": "my_resourceId",
     *   //   "resourceUri": "my_resourceUri",
     *   //   "token": "my_token",
     *   //   "type": "my_type"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.files.watch
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.acknowledgeAbuse Whether the user is acknowledging the risk of downloading known malware or other abusive files.
     * @param {boolean=} params.allProperties Whether to retrieve all properties, not just those visible to the app.
     * @param {string=} params.embedOrigin The origin in which the sharing widget will be embedded. This should be supplied when requesting the shareLink field.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.expectedParentIds A comma-separated list of parent IDs that have already been discovered by the requesting user. Parent filtering is prevented for parents on this list.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID for the file in question.
     * @param {string=} params.fileScopeAppIds DEPRECATED; not needed. A comma separated list of app IDs. If set the result will only include a file inside the app data folder if it could be opened by any of the specified app IDs with the drive.appdata scope. Requires the ALL_APPDATA scope.
     * @param {boolean=} params.includeBadgedLabels If true, all badged Labels will be returned in the labelInfo part of the response.
     * @param {string=} params.includeLabels A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     * @param {string=} params.includeMetadataForCategories A comma-separated list of names of Categories to include in the response.
     * @param {string=} params.includePermissionsForView Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.projection This parameter is deprecated and has no function.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {boolean=} params.rejectInefficientRequests Whether the request should be rejected if it would generate an inefficient query.
     * @param {boolean=} params.reportPermissionErrors Whether the request should return 403 instead 404 if the file exists but the user doesn't have read access. This option is not compatible with the deprecated updateViewedDate parameter. If set for any item in a batch, it will be set for all.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {boolean=} params.returnEfficiencyInfo Whether the request should return efficiency info.
     * @param {string=} params.revisionId Specifies the Revision ID that should be downloaded. Ignored unless alt=media is specified.
     * @param {string=} params.sources Deprecated. This parameter is no longer necessary.
     * @param {boolean=} params.supportsAllDrives Whether the requesting application supports both My Drives and shared drives.
     * @param {boolean=} params.supportsTeamDrives Deprecated - use supportsAllDrives instead.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {boolean=} params.updateViewedDate Deprecated: Use files.update with modifiedDateBehavior=noChange, updateViewedDate=true and an empty request body.
     * @param {boolean=} params.useDomainAdminAccess Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the item belongs.
     * @param {boolean=} params.useLegacyDomainPermissionBehavior If true, Permissions with type Audience are represented with Domain type.
     * @param {().Channel} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    watch(
      params: Params$Resource$Files$Watch,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    watch(
      params?: Params$Resource$Files$Watch,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Channel>;
    watch(
      params: Params$Resource$Files$Watch,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    watch(
      params: Params$Resource$Files$Watch,
      options: MethodOptions | BodyResponseCallback<Schema$Channel>,
      callback: BodyResponseCallback<Schema$Channel>
    ): void;
    watch(
      params: Params$Resource$Files$Watch,
      callback: BodyResponseCallback<Schema$Channel>
    ): void;
    watch(callback: BodyResponseCallback<Schema$Channel>): void;
    watch(
      paramsOrCallback?:
        | Params$Resource$Files$Watch
        | BodyResponseCallback<Schema$Channel>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Channel>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Channel>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Channel> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Files$Watch;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Files$Watch;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files/{fileId}/watch').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Channel>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Channel>(parameters);
      }
    }
  }

  export interface Params$Resource$Files$Authorize extends StandardParameters {
    /**
     * The ID of the app to authorize.
     */
    appId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file to authorize the app to.
     */
    fileId?: string;
    /**
     * If true, all badged Labels will be returned in the labelInfo part of the response.
     */
    includeBadgedLabels?: boolean;
    /**
     * A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     */
    includeLabels?: string;
    /**
     * A comma-separated list of names of Categories to include in the response.
     */
    includeMetadataForCategories?: string;
    /**
     * Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     */
    includePermissionsForView?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the requesting application supports both My Drives and shared drives.
     */
    supportsAllDrives?: boolean;
    /**
     * Deprecated use supportsAllDrives instead.
     */
    supportsTeamDrives?: boolean;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * If true, Permissions with type Audience are represented with Domain type.
     */
    useLegacyDomainPermissionBehavior?: boolean;
  }
  export interface Params$Resource$Files$Checkpermissions
    extends StandardParameters {
    /**
     * Request body metadata
     */
    requestBody?: Schema$CheckPermissionsRequest;
  }
  export interface Params$Resource$Files$Copy extends StandardParameters {
    /**
     * Whether to convert this file to the corresponding Google Docs format.
     */
    convert?: boolean;
    /**
     * If set, requests conversion to the given format. For native Google Docs, valid values are any of the targets in the exportFormats field of the about.get response.
     */
    convertTo?: string;
    /**
     * Whether to also copy file comments. Only supported for Google Docs files.
     */
    copyComments?: boolean;
    /**
     * Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. Requests that specify more than one parent will fail.
     */
    enforceSingleParent?: boolean;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file to copy.
     */
    fileId?: string;
    /**
     * If true, all badged Labels will be returned in the labelInfo part of the response.
     */
    includeBadgedLabels?: boolean;
    /**
     * A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     */
    includeLabels?: string;
    /**
     * A comma-separated list of names of Categories to include in the response.
     */
    includeMetadataForCategories?: string;
    /**
     * Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     */
    includePermissionsForView?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads.
     */
    ocr?: boolean;
    /**
     * If ocr is true, hints at the language to use. Valid values are ISO 639-1 codes.
     */
    ocrLanguage?: string;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * Whether to pin the head revision of the new copy. A file can have a maximum of 200 pinned revisions.
     */
    pinned?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * The ID of the revision to copy. Only allowed for files with content stored in Google Drive when conversion is not requested. Two revisions of the same file cannot be copied in a single batch request.
     */
    revisionId?: string;
    /**
     * Whether the requesting application supports both My Drives and shared drives.
     */
    supportsAllDrives?: boolean;
    /**
     * Deprecated use supportsAllDrives instead.
     */
    supportsTeamDrives?: boolean;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * The language of the timed text.
     */
    timedTextLanguage?: string;
    /**
     * The timed text track name.
     */
    timedTextTrackName?: string;
    /**
     * Whether to update the view date on the copied file.
     */
    updateViewedDate?: boolean;
    /**
     * If true, Permissions with type Audience are represented with Domain type.
     */
    useLegacyDomainPermissionBehavior?: boolean;
    /**
     * The visibility of the new file. This parameter is only relevant when the source is not a native Google Doc and convert=false.
     */
    visibility?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$File;
  }
  export interface Params$Resource$Files$Deauthorize
    extends StandardParameters {
    /**
     * The ID of the app to deauthorize.
     */
    appId?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file from which to remove the app's access.
     */
    fileId?: string;
    /**
     * If true, all badged Labels will be returned in the labelInfo part of the response.
     */
    includeBadgedLabels?: boolean;
    /**
     * A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     */
    includeLabels?: string;
    /**
     * A comma-separated list of names of Categories to include in the response.
     */
    includeMetadataForCategories?: string;
    /**
     * Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     */
    includePermissionsForView?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the requesting application supports both My Drives and shared drives.
     */
    supportsAllDrives?: boolean;
    /**
     * Deprecated use supportsAllDrives instead.
     */
    supportsTeamDrives?: boolean;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * If true, Permissions with type Audience are represented with Domain type.
     */
    useLegacyDomainPermissionBehavior?: boolean;
  }
  export interface Params$Resource$Files$Delete extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file to delete.
     */
    fileId?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the requesting application supports both My Drives and shared drives.
     */
    supportsAllDrives?: boolean;
    /**
     * Deprecated use supportsAllDrives instead.
     */
    supportsTeamDrives?: boolean;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }
  export interface Params$Resource$Files$Emptytrash extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }
  export interface Params$Resource$Files$Export extends StandardParameters {
    /**
     * The ID of the file.
     */
    fileId?: string;
    /**
     * The MIME type of the format requested for this export.
     */
    mimeType?: string;
  }
  export interface Params$Resource$Files$Exportgdoc extends StandardParameters {
    /**
     * The ID of the file.
     */
    fileId?: string;
    /**
     * The MIME type of the format requested for this export. Only editor internal mime types are supported.
     */
    mimeType?: string;
  }
  export interface Params$Resource$Files$Extract extends StandardParameters {
    /**
     * The ID of the folder to extract the contents of the archive into.
     */
    destinationLocationId?: string;
    /**
     * The ID for the archive file. Consists of either a Google Drive file id or encrypted id for a gmail attachment.
     */
    fileId?: string;
    /**
     * The name of the archive file to be extracted. Required when origin is GMAIL
     */
    fileName?: string;
    /**
     * The mime type of the archive file to be extracted. Required when origin is GMAIL
     */
    mimeType?: string;
    /**
     * The origin of the file preview request.
     */
    origin?: string;
  }
  export interface Params$Resource$Files$Extractcancel
    extends StandardParameters {
    /**
     * The ID for the archive extraction job.
     */
    jobId?: string;
  }
  export interface Params$Resource$Files$Extractstatus
    extends StandardParameters {
    /**
     * The ID for the archive extraction job.
     */
    jobId?: string;
  }
  export interface Params$Resource$Files$Fixpermissions
    extends StandardParameters {
    /**
     * Request body metadata
     */
    requestBody?: Schema$FixPermissionsRequest;
  }
  export interface Params$Resource$Files$Generatecsetoken
    extends StandardParameters {
    /**
     * The ID of the file for which the JWT should be generated. If specified, the user's access will be checked on the file based on the value of the 'role' field.
     */
    fileId?: string;
    /**
     * The role for the user, which will be set in the JWT. Supported values are 'reader' and 'writer'
     */
    role?: string;
  }
  export interface Params$Resource$Files$Generateid extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;

    /**
     * Request body metadata
     */
    requestBody?: Schema$File;
  }
  export interface Params$Resource$Files$Generateids
    extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * Maximum number of IDs to return.
     */
    maxResults?: number;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * The space in which the IDs can be used to create new items. Supported values are 'drive' and 'appDataFolder'.
     */
    space?: string;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * The type of items which the IDs can be used for. Supported values are 'files' and 'shortcuts'. Note that 'shortcuts' are only supported in the drive 'space'.
     */
    type?: string;
  }
  export interface Params$Resource$Files$Get extends StandardParameters {
    /**
     * Whether the user is acknowledging the risk of downloading known malware or other abusive files.
     */
    acknowledgeAbuse?: boolean;
    /**
     * Whether to retrieve all properties, not just those visible to the app.
     */
    allProperties?: boolean;
    /**
     * The origin in which the sharing widget will be embedded. This should be supplied when requesting the shareLink field.
     */
    embedOrigin?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * A comma-separated list of parent IDs that have already been discovered by the requesting user. Parent filtering is prevented for parents on this list.
     */
    expectedParentIds?: string;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID for the file in question.
     */
    fileId?: string;
    /**
     * DEPRECATED; not needed. A comma separated list of app IDs. If set the result will only include a file inside the app data folder if it could be opened by any of the specified app IDs with the drive.appdata scope. Requires the ALL_APPDATA scope.
     */
    fileScopeAppIds?: string;
    /**
     * If true, all badged Labels will be returned in the labelInfo part of the response.
     */
    includeBadgedLabels?: boolean;
    /**
     * A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     */
    includeLabels?: string;
    /**
     * A comma-separated list of names of Categories to include in the response.
     */
    includeMetadataForCategories?: string;
    /**
     * Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     */
    includePermissionsForView?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * This parameter is deprecated and has no function.
     */
    projection?: string;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * Whether the request should be rejected if it would generate an inefficient query.
     */
    rejectInefficientRequests?: boolean;
    /**
     * Whether the request should return 403 instead 404 if the file exists but the user doesn't have read access. This option is not compatible with the deprecated updateViewedDate parameter. If set for any item in a batch, it will be set for all.
     */
    reportPermissionErrors?: boolean;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request should return efficiency info.
     */
    returnEfficiencyInfo?: boolean;
    /**
     * Specifies the Revision ID that should be downloaded. Ignored unless alt=media is specified.
     */
    revisionId?: string;
    /**
     * Deprecated. This parameter is no longer necessary.
     */
    sources?: string;
    /**
     * Whether the requesting application supports both My Drives and shared drives.
     */
    supportsAllDrives?: boolean;
    /**
     * Deprecated - use supportsAllDrives instead.
     */
    supportsTeamDrives?: boolean;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * Deprecated: Use files.update with modifiedDateBehavior=noChange, updateViewedDate=true and an empty request body.
     */
    updateViewedDate?: boolean;
    /**
     * Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the item belongs.
     */
    useDomainAdminAccess?: boolean;
    /**
     * If true, Permissions with type Audience are represented with Domain type.
     */
    useLegacyDomainPermissionBehavior?: boolean;
  }
  export interface Params$Resource$Files$Insert extends StandardParameters {
    /**
     * Whether to convert this file to the corresponding Google Docs format.
     */
    convert?: boolean;
    /**
     * Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. Requests that specify more than one parent will fail.
     */
    enforceSingleParent?: boolean;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * If true, all badged Labels will be returned in the labelInfo part of the response.
     */
    includeBadgedLabels?: boolean;
    /**
     * A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     */
    includeLabels?: string;
    /**
     * A comma-separated list of names of Categories to include in the response.
     */
    includeMetadataForCategories?: string;
    /**
     * Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     */
    includePermissionsForView?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads.
     */
    ocr?: boolean;
    /**
     * If ocr is true, hints at the language to use. Valid values are ISO 639-1 codes.
     */
    ocrLanguage?: string;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * Whether to pin the head revision of the uploaded file. A file can have a maximum of 200 pinned revisions.
     */
    pinned?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * For eligible files (e.g. image and video) whether to store the data at original compressed high-quality resolution. Valid values are 'original' and 'highQuality'.
     */
    storagePolicy?: string;
    /**
     * Whether the requesting application supports both My Drives and shared drives.
     */
    supportsAllDrives?: boolean;
    /**
     * Deprecated use supportsAllDrives instead.
     */
    supportsTeamDrives?: boolean;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * The language of the timed text.
     */
    timedTextLanguage?: string;
    /**
     * The timed text track name.
     */
    timedTextTrackName?: string;
    /**
     * Whether to update the view date when inserting the file.
     */
    updateViewedDate?: boolean;
    /**
     * Whether to use the content as indexable text.
     */
    useContentAsIndexableText?: boolean;
    /**
     * If true, Permissions with type Audience are represented with Domain type.
     */
    useLegacyDomainPermissionBehavior?: boolean;
    /**
     * The visibility of the new file. This parameter is only relevant when convert=false.
     */
    visibility?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$File;

    /**
     * Media metadata
     */
    media?: {
      /**
       * Media mime-type
       */
      mimeType?: string;

      /**
       * Media body contents
       */
      body?: any;
    };
  }
  export interface Params$Resource$Files$List extends StandardParameters {
    /**
     * Whether to retrieve all properties, not just those visible to the app.
     */
    allProperties?: boolean;
    /**
     * Deprecated: use 'spaces' instead. Specifies whether to return App Data, non-App Data, or both in query results.
     */
    appDataFilter?: string;
    /**
     * Bodies of items (files/documents) to which the query applies. Supported bodies are 'default', 'domain', 'drive' and 'allDrives'. Prefer 'default' or 'drive' to 'allDrives' for efficiency.
     */
    corpora?: string;
    /**
     * The body of items (files/documents) to which the query applies. Deprecated: use 'corpora' instead.
     */
    corpus?: string;
    /**
     * ID of shared drive to search.
     */
    driveId?: string;
    /**
     * The origin in which the sharing widget will be embedded. This should be supplied when requesting the shareLink field.
     */
    embedOrigin?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * A comma separated list of app IDs. If set, the list will also include files inside the app data folder that could be opened with any of the given apps with drive.appdata scope. Requires the ALL_APPDATA scope.
     */
    fileScopeAppIds?: string;
    /**
     * If true, all badged Labels will be returned in the labelInfo part of the response.
     */
    includeBadgedLabels?: boolean;
    /**
     * Whether to include items embedded in a package in the results.
     */
    includeEmbeds?: boolean;
    /**
     * Whether both My Drive and shared drive items should be included in results.
     */
    includeItemsFromAllDrives?: boolean;
    /**
     * A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     */
    includeLabels?: string;
    /**
     * A comma-separated list of names of Categories to include in the response.
     */
    includeMetadataForCategories?: string;
    /**
     * Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     */
    includePermissionsForView?: string;
    /**
     * Deprecated use includeItemsFromAllDrives instead.
     */
    includeTeamDriveItems?: boolean;
    /**
     * For Cello, allow fetching unsubscribed children to complete backfill.
     */
    includeUnsubscribed?: boolean;
    /**
     * The maximum number of files to return per page. Partial or empty result pages are possible even before the end of the files list has been reached.
     */
    maxResults?: number;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * A comma-separated list of sort keys. Valid keys are 'createdDate', 'folder', 'lastViewedByMeDate', 'modifiedByMeDate', 'modifiedDate', 'quotaBytesUsed', 'recursiveFileCount', 'recursiveFileSize', 'recursiveQuotaBytesUsed', 'recency', 'sharedWithMeDate', 'starred', 'title', 'title_natural', and 'trashedDate'. Each key sorts ascending by default, but may be reversed with the 'desc' modifier. Example usage: ?orderBy=folder,modifiedDate desc,title. Please note that there is a current limitation for users with approximately one million files in which the requested sort order is ignored.
     */
    orderBy?: string;
    /**
     * Page token for files.
     */
    pageToken?: string;
    /**
     * This parameter is deprecated and has no function.
     */
    projection?: string;
    /**
     * Query string for searching files.
     */
    q?: string;
    /**
     * The unmodified user-specified query string.
     */
    rawUserQuery?: string;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * Whether the request should be rejected if it would generate an inefficient query.
     */
    rejectInefficientRequests?: boolean;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request should return efficiency info.
     */
    returnEfficiencyInfo?: boolean;
    /**
     * DEPRECATED; use orderBy instead. Whether to reverse the order of the results if sortBy is set.
     */
    reverseSort?: boolean;
    /**
     * Opaque search session data from apps search quality.
     */
    searchSessionData?: string;
    /**
     * DEPRECATED; use orderBy instead. The list of sort orders to apply after sortBy.
     */
    secondarySortBy?: string;
    /**
     * DEPRECATED; use orderBy instead. The sort order for returned files.
     */
    sortBy?: string;
    /**
     * Deprecated: use 'spaces' instead. A comma-separated list of sources to query. Supported values are 'GOOGLE_PHOTOS' and 'ANDROID_BACKUP'.
     */
    sources?: string;
    /**
     * A comma-separated list of spaces to query. Supported values are 'drive', 'appContent', 'appDataFolder', 'photos' and 'androidBackup'.
     */
    spaces?: string;
    /**
     * Whether the requesting application supports both My Drives and shared drives.
     */
    supportsAllDrives?: boolean;
    /**
     * Deprecated use supportsAllDrives instead.
     */
    supportsTeamDrives?: boolean;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * Deprecated use driveId instead.
     */
    teamDriveId?: string;
    /**
     * If true, Permissions with type Audience are represented with Domain type.
     */
    useLegacyDomainPermissionBehavior?: boolean;
  }
  export interface Params$Resource$Files$Listcategorymetadata
    extends StandardParameters {
    /**
     * The ID for the file or shared drive.
     */
    fileId?: string;
    /**
     * The maximum number of categories to return per page. When not set, at most 100 results will be returned.
     */
    maxResults?: number;
    /**
     * The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response.
     */
    pageToken?: string;
  }
  export interface Params$Resource$Files$Listlabels extends StandardParameters {
    /**
     * The ID of the file.
     */
    fileId?: string;
    /**
     * The maximum number of labels to return per page. When not set, this defaults to 100.
     */
    maxResults?: number;
    /**
     * The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response.
     */
    pageToken?: string;
  }
  export interface Params$Resource$Files$Migratetodrivepreflight
    extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * Issue the request as a domain administrator; if set to true, then the move will be verified as an admin move if the requester is an administrator of the domain to which the source folder(s) belong.
     */
    useDomainAdminAccess?: boolean;

    /**
     * Request body metadata
     */
    requestBody?: Schema$MigrateToDrivePreFlightRequest;
  }
  export interface Params$Resource$Files$Migratetoteamdrivepreflight
    extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * Issue the request as a domain administrator; if set to true, then the move will be verified as an admin move if the requester is an administrator of the domain to which the source folder(s) belong.
     */
    useDomainAdminAccess?: boolean;

    /**
     * Request body metadata
     */
    requestBody?: Schema$MigrateToTeamDrivePreFlightRequest;
  }
  export interface Params$Resource$Files$Modifylabels
    extends StandardParameters {
    /**
     * The ID of the file for which the labels are modified.
     */
    fileId?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$ModifyLabelsRequest;
  }
  export interface Params$Resource$Files$Patch extends StandardParameters {
    /**
     * Comma-separated list of parent IDs to add.
     */
    addParents?: string;
    /**
     * Base revision to use when uploading using partial updates.
     */
    baseRevision?: string;
    /**
     * If true, checks that prevent increasing the number of an item's parents are bypassed.
     */
    bypassMultiparentingCheck?: boolean;
    /**
     * Whether the user has confirmed any warnings for the update.
     */
    confirmed?: boolean;
    /**
     * Whether to convert this file to the corresponding Google Docs format.
     */
    convert?: boolean;
    /**
     * If true and combined with exactly one ID in the addParents field, all the file's current parents will be replaced.
     */
    enableSingleParentingOnAddParentByOwner?: boolean;
    /**
     * Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. If the item's owner makes a request to add a single parent, the item will be removed from all current folders and placed in the requested folder. Other requests that increase the number of parents will fail, except when the canAddMyDriveParent file capability is true and a single parent is being added.
     */
    enforceSingleParent?: boolean;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * A comma-separated list of parent IDs that have already been discovered by the requesting user. Parent filtering is prevented for parents on this list.
     */
    expectedParentIds?: string;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file to update.
     */
    fileId?: string;
    /**
     * If true, all badged Labels will be returned in the labelInfo part of the response.
     */
    includeBadgedLabels?: boolean;
    /**
     * A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     */
    includeLabels?: string;
    /**
     * A comma-separated list of names of Categories to include in the response.
     */
    includeMetadataForCategories?: string;
    /**
     * Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     */
    includePermissionsForView?: string;
    /**
     * A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     */
    languageCode?: string;
    /**
     * The behavior of the last modified date. This overrides setModifiedDate.
     */
    modifiedDateBehavior?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether a blob upload should create a new revision. If false, the blob data in the current head revision is replaced. If true or not set, a new blob is created as head revision, and previous unpinned revisions are preserved for a short period of time. Pinned revisions are stored indefinitely using additional storage quota, up to a maximum of 200 revisions.
     */
    newRevision?: boolean;
    /**
     * Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads.
     */
    ocr?: boolean;
    /**
     * If ocr is true, hints at the language to use. Valid values are ISO 639-1 codes.
     */
    ocrLanguage?: string;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * Whether to pin the new revision. A file can have a maximum of 200 pinned revisions.
     */
    pinned?: boolean;
    /**
     * Query string for file update preconditions.
     */
    precondition?: string;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * Comma-separated list of parent IDs to remove.
     */
    removeParents?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether to set the modified date with the supplied modified date.
     */
    setModifiedDate?: boolean;
    /**
     * For eligible files (e.g. image and video) whether to store the data at original compressed high-quality resolution. Valid values are 'original' and 'highQuality'
     */
    storagePolicy?: string;
    /**
     * Whether the requesting application supports both My Drives and shared drives.
     */
    supportsAllDrives?: boolean;
    /**
     * Deprecated use supportsAllDrives instead.
     */
    supportsTeamDrives?: boolean;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * The language of the timed text.
     */
    timedTextLanguage?: string;
    /**
     * The timed text track name.
     */
    timedTextTrackName?: string;
    /**
     * Whether to update the view date after successfully updating the file.
     */
    updateViewedDate?: boolean;
    /**
     * Whether to use the content as indexable text.
     */
    useContentAsIndexableText?: boolean;
    /**
     * Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the item belongs. This feature is only available to whitelisted apps.
     */
    useDomainAdminAccess?: boolean;
    /**
     * If true, Permissions with type Audience are represented with Domain type.
     */
    useLegacyDomainPermissionBehavior?: boolean;

    /**
     * Request body metadata
     */
    requestBody?: Schema$File;
  }
  export interface Params$Resource$Files$Preview extends StandardParameters {
    /**
     * The ID for the archive file. Consists of either a Google Drive file id or encrypted id for a gmail attachment.
     */
    fileId?: string;
    /**
     * The name of the archive file to be previewed. Required when origin is GMAIL
     */
    fileName?: string;
    /**
     * The size of the archive file to be previewed. Required when origin is GMAIL
     */
    fileSize?: string;
    /**
     * The mime type of the archive file to be previewed. Required when origin is GMAIL
     */
    mimeType?: string;
    /**
     * The origin of the file preview request.
     */
    origin?: string;
    /**
     * The user's available quota, in bytes.
     */
    quotaBytes?: string;
  }
  export interface Params$Resource$Files$Remove extends StandardParameters {
    /**
     * Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. If the item's last parent is removed, the item will be placed under its owner's root.
     */
    enforceSingleParent?: boolean;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file to remove.
     */
    fileId?: string;
    /**
     * If true, all badged Labels will be returned in the labelInfo part of the response.
     */
    includeBadgedLabels?: boolean;
    /**
     * A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     */
    includeLabels?: string;
    /**
     * A comma-separated list of names of Categories to include in the response.
     */
    includeMetadataForCategories?: string;
    /**
     * Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     */
    includePermissionsForView?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The ID of the folder from which to remove the file.
     */
    parentId?: string;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * If true, Permissions with type Audience are represented with Domain type.
     */
    useLegacyDomainPermissionBehavior?: boolean;
  }
  export interface Params$Resource$Files$Requestaccess
    extends StandardParameters {
    /**
     * An optional plain text custom message to include in notification emails.
     */
    emailMessage?: string;
    /**
     * The ID of the file the user is requesting access to.
     */
    fileId?: string;
  }
  export interface Params$Resource$Files$Sendaccessrequest
    extends StandardParameters {
    /**
     * The ID of the file the user is requesting access to.
     */
    fileId?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$SendAccessRequest;
  }
  export interface Params$Resource$Files$Sendsharenotification
    extends StandardParameters {
    /**
     * The ID of the file for which a sharing notification should be sent.
     */
    fileId?: string;
    /**
     * A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     */
    languageCode?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$ShareNotificationRequest;
  }
  export interface Params$Resource$Files$Syncphotowithsha1
    extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * If true, all badged Labels will be returned in the labelInfo part of the response.
     */
    includeBadgedLabels?: boolean;
    /**
     * A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     */
    includeLabels?: string;
    /**
     * A comma-separated list of names of Categories to include in the response.
     */
    includeMetadataForCategories?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * If true, Permissions with type Audience are represented with Domain type.
     */
    useLegacyDomainPermissionBehavior?: boolean;

    /**
     * Request body metadata
     */
    requestBody?: Schema$SyncPhotoWithSha1Request;
  }
  export interface Params$Resource$Files$Touch extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file to update.
     */
    fileId?: string;
    /**
     * If true, all badged Labels will be returned in the labelInfo part of the response.
     */
    includeBadgedLabels?: boolean;
    /**
     * A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     */
    includeLabels?: string;
    /**
     * A comma-separated list of names of Categories to include in the response.
     */
    includeMetadataForCategories?: string;
    /**
     * Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     */
    includePermissionsForView?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the requesting application supports both My Drives and shared drives.
     */
    supportsAllDrives?: boolean;
    /**
     * Deprecated use supportsAllDrives instead.
     */
    supportsTeamDrives?: boolean;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * If true, Permissions with type Audience are represented with Domain type.
     */
    useLegacyDomainPermissionBehavior?: boolean;
  }
  export interface Params$Resource$Files$Trash extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file to trash.
     */
    fileId?: string;
    /**
     * If true, all badged Labels will be returned in the labelInfo part of the response.
     */
    includeBadgedLabels?: boolean;
    /**
     * A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     */
    includeLabels?: string;
    /**
     * A comma-separated list of names of Categories to include in the response.
     */
    includeMetadataForCategories?: string;
    /**
     * Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     */
    includePermissionsForView?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the requesting application supports both My Drives and shared drives.
     */
    supportsAllDrives?: boolean;
    /**
     * Deprecated use supportsAllDrives instead.
     */
    supportsTeamDrives?: boolean;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * If true, Permissions with type Audience are represented with Domain type.
     */
    useLegacyDomainPermissionBehavior?: boolean;
  }
  export interface Params$Resource$Files$Untrash extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file to untrash.
     */
    fileId?: string;
    /**
     * If true, all badged Labels will be returned in the labelInfo part of the response.
     */
    includeBadgedLabels?: boolean;
    /**
     * A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     */
    includeLabels?: string;
    /**
     * A comma-separated list of names of Categories to include in the response.
     */
    includeMetadataForCategories?: string;
    /**
     * Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     */
    includePermissionsForView?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the requesting application supports both My Drives and shared drives.
     */
    supportsAllDrives?: boolean;
    /**
     * Deprecated use supportsAllDrives instead.
     */
    supportsTeamDrives?: boolean;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * If true, Permissions with type Audience are represented with Domain type.
     */
    useLegacyDomainPermissionBehavior?: boolean;
  }
  export interface Params$Resource$Files$Update extends StandardParameters {
    /**
     * Comma-separated list of parent IDs to add.
     */
    addParents?: string;
    /**
     * Comma-separated list of Workspace IDs to add; file will be added to all associated Workspaces.
     */
    addWorkspaces?: string;
    /**
     * Base revision to use when uploading using partial updates.
     */
    baseRevision?: string;
    /**
     * If true, checks that prevent increasing the number of an item's parents are bypassed.
     */
    bypassMultiparentingCheck?: boolean;
    /**
     * Whether the user has confirmed any warnings for the update.
     */
    confirmed?: boolean;
    /**
     * Whether to convert this file to the corresponding Google Docs format.
     */
    convert?: boolean;
    /**
     * If true and combined with exactly one ID in the addParents field, all the file's current parents will be replaced.
     */
    enableSingleParentingOnAddParentByOwner?: boolean;
    /**
     * Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. If the item's owner makes a request to add a single parent, the item will be removed from all current folders and placed in the requested folder. Other requests that increase the number of parents will fail, except when the canAddMyDriveParent file capability is true and a single parent is being added.
     */
    enforceSingleParent?: boolean;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * A comma-separated list of parent IDs that have already been discovered by the requesting user. Parent filtering is prevented for parents on this list.
     */
    expectedParentIds?: string;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file to update.
     */
    fileId?: string;
    /**
     * If true, all badged Labels will be returned in the labelInfo part of the response.
     */
    includeBadgedLabels?: boolean;
    /**
     * A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     */
    includeLabels?: string;
    /**
     * A comma-separated list of names of Categories to include in the response.
     */
    includeMetadataForCategories?: string;
    /**
     * Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     */
    includePermissionsForView?: string;
    /**
     * A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     */
    languageCode?: string;
    /**
     * The behavior of the last modified date. This overrides setModifiedDate.
     */
    modifiedDateBehavior?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether a blob upload should create a new revision. If false, the blob data in the current head revision is replaced. If true or not set, a new blob is created as head revision, and previous unpinned revisions are preserved for a short period of time. Pinned revisions are stored indefinitely using additional storage quota, up to a maximum of 200 revisions.
     */
    newRevision?: boolean;
    /**
     * Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads.
     */
    ocr?: boolean;
    /**
     * If ocr is true, hints at the language to use. Valid values are ISO 639-1 codes.
     */
    ocrLanguage?: string;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * Whether to pin the new revision. A file can have a maximum of 200 pinned revisions.
     */
    pinned?: boolean;
    /**
     * Query string for file update preconditions.
     */
    precondition?: string;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * Comma-separated list of parent IDs to remove.
     */
    removeParents?: string;
    /**
     * Comma-separated list of Workspace IDs to remove; file will be removed from all associated Workspaces.
     */
    removeWorkspaces?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether to set the modified date with the supplied modified date.
     */
    setModifiedDate?: boolean;
    /**
     * For eligible files (e.g. image and video) whether to store the data at original compressed high-quality resolution. Valid values are 'original' and 'highQuality'
     */
    storagePolicy?: string;
    /**
     * Whether the requesting application supports both My Drives and shared drives.
     */
    supportsAllDrives?: boolean;
    /**
     * Deprecated use supportsAllDrives instead.
     */
    supportsTeamDrives?: boolean;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * The language of the timed text.
     */
    timedTextLanguage?: string;
    /**
     * The timed text track name.
     */
    timedTextTrackName?: string;
    /**
     * Whether to update the view date after successfully updating the file.
     */
    updateViewedDate?: boolean;
    /**
     * Whether to use the content as indexable text.
     */
    useContentAsIndexableText?: boolean;
    /**
     * Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the item belongs. This feature is only available to whitelisted apps.
     */
    useDomainAdminAccess?: boolean;
    /**
     * If true, Permissions with type Audience are represented with Domain type.
     */
    useLegacyDomainPermissionBehavior?: boolean;

    /**
     * Request body metadata
     */
    requestBody?: Schema$File;

    /**
     * Media metadata
     */
    media?: {
      /**
       * Media mime-type
       */
      mimeType?: string;

      /**
       * Media body contents
       */
      body?: any;
    };
  }
  export interface Params$Resource$Files$Updatecategorymetadata
    extends StandardParameters {
    /**
     * The ID of the file to which the categories belong.
     */
    fileId?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$UpdateCategoryMetadata;
  }
  export interface Params$Resource$Files$Watch extends StandardParameters {
    /**
     * Whether the user is acknowledging the risk of downloading known malware or other abusive files.
     */
    acknowledgeAbuse?: boolean;
    /**
     * Whether to retrieve all properties, not just those visible to the app.
     */
    allProperties?: boolean;
    /**
     * The origin in which the sharing widget will be embedded. This should be supplied when requesting the shareLink field.
     */
    embedOrigin?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * A comma-separated list of parent IDs that have already been discovered by the requesting user. Parent filtering is prevented for parents on this list.
     */
    expectedParentIds?: string;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID for the file in question.
     */
    fileId?: string;
    /**
     * DEPRECATED; not needed. A comma separated list of app IDs. If set the result will only include a file inside the app data folder if it could be opened by any of the specified app IDs with the drive.appdata scope. Requires the ALL_APPDATA scope.
     */
    fileScopeAppIds?: string;
    /**
     * If true, all badged Labels will be returned in the labelInfo part of the response.
     */
    includeBadgedLabels?: boolean;
    /**
     * A comma-separated list of IDs of Labels to include in the labelInfo part of the response.
     */
    includeLabels?: string;
    /**
     * A comma-separated list of names of Categories to include in the response.
     */
    includeMetadataForCategories?: string;
    /**
     * Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     */
    includePermissionsForView?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * This parameter is deprecated and has no function.
     */
    projection?: string;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * Whether the request should be rejected if it would generate an inefficient query.
     */
    rejectInefficientRequests?: boolean;
    /**
     * Whether the request should return 403 instead 404 if the file exists but the user doesn't have read access. This option is not compatible with the deprecated updateViewedDate parameter. If set for any item in a batch, it will be set for all.
     */
    reportPermissionErrors?: boolean;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request should return efficiency info.
     */
    returnEfficiencyInfo?: boolean;
    /**
     * Specifies the Revision ID that should be downloaded. Ignored unless alt=media is specified.
     */
    revisionId?: string;
    /**
     * Deprecated. This parameter is no longer necessary.
     */
    sources?: string;
    /**
     * Whether the requesting application supports both My Drives and shared drives.
     */
    supportsAllDrives?: boolean;
    /**
     * Deprecated - use supportsAllDrives instead.
     */
    supportsTeamDrives?: boolean;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * Deprecated: Use files.update with modifiedDateBehavior=noChange, updateViewedDate=true and an empty request body.
     */
    updateViewedDate?: boolean;
    /**
     * Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the item belongs.
     */
    useDomainAdminAccess?: boolean;
    /**
     * If true, Permissions with type Audience are represented with Domain type.
     */
    useLegacyDomainPermissionBehavior?: boolean;

    /**
     * Request body metadata
     */
    requestBody?: Schema$Channel;
  }

  export class Resource$Nextdocpredictions {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * drive.nextdocpredictions.list
     * @desc Lists predictions for the documents the user will open.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.nextdocpredictions.list({
     *     // Comma-separated list of corpora under which to predict documents. Supported options are 'default' and 'drive'. Currently leaving this blank implies 'default'.
     *     corpora: 'placeholder-value',
     *     // ID for a shared drive under which to predict documents.
     *     driveId: 'placeholder-value',
     *     // The locale to use for any localization.
     *     languageCode: 'placeholder-value',
     *     // Maximum number of predictions to return.
     *     maxResults: 'placeholder-value',
     *     // Deprecated use driveId instead.
     *     teamDriveId: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "experimentIds": [],
     *   //   "items": [],
     *   //   "kind": "my_kind",
     *   //   "selfLink": "my_selfLink",
     *   //   "tag": "my_tag"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.nextdocpredictions.list
     * @memberOf! ()
     *
     * @param {object=} params Parameters for request
     * @param {string=} params.corpora Comma-separated list of corpora under which to predict documents. Supported options are 'default' and 'drive'. Currently leaving this blank implies 'default'.
     * @param {string=} params.driveId ID for a shared drive under which to predict documents.
     * @param {string=} params.languageCode The locale to use for any localization.
     * @param {integer=} params.maxResults Maximum number of predictions to return.
     * @param {string=} params.teamDriveId Deprecated use driveId instead.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params: Params$Resource$Nextdocpredictions$List,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    list(
      params?: Params$Resource$Nextdocpredictions$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$NextDocPredictionList>;
    list(
      params: Params$Resource$Nextdocpredictions$List,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    list(
      params: Params$Resource$Nextdocpredictions$List,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$NextDocPredictionList>,
      callback: BodyResponseCallback<Schema$NextDocPredictionList>
    ): void;
    list(
      params: Params$Resource$Nextdocpredictions$List,
      callback: BodyResponseCallback<Schema$NextDocPredictionList>
    ): void;
    list(callback: BodyResponseCallback<Schema$NextDocPredictionList>): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Nextdocpredictions$List
        | BodyResponseCallback<Schema$NextDocPredictionList>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$NextDocPredictionList>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$NextDocPredictionList>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$NextDocPredictionList>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Nextdocpredictions$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Nextdocpredictions$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/nextdocpredictions').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: [],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$NextDocPredictionList>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$NextDocPredictionList>(parameters);
      }
    }
  }

  export interface Params$Resource$Nextdocpredictions$List
    extends StandardParameters {
    /**
     * Comma-separated list of corpora under which to predict documents. Supported options are 'default' and 'drive'. Currently leaving this blank implies 'default'.
     */
    corpora?: string;
    /**
     * ID for a shared drive under which to predict documents.
     */
    driveId?: string;
    /**
     * The locale to use for any localization.
     */
    languageCode?: string;
    /**
     * Maximum number of predictions to return.
     */
    maxResults?: number;
    /**
     * Deprecated use driveId instead.
     */
    teamDriveId?: string;
  }

  export class Resource$Notifications {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * drive.notifications.get
     * @desc Gets a notification by ID.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/activity',
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.activity',
     *       'https://www.googleapis.com/auth/drive.activity.readonly',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.notifications.get({
     *     // Locale in which to localize messages.
     *     locale: 'placeholder-value',
     *     // The ID for the notification in question.
     *     notificationId: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "accessRequestData": {},
     *   //   "commentData": {},
     *   //   "createdDate": "my_createdDate",
     *   //   "description": "my_description",
     *   //   "id": "my_id",
     *   //   "kind": "my_kind",
     *   //   "notificationType": "my_notificationType",
     *   //   "shareData": {},
     *   //   "storageData": {},
     *   //   "title": "my_title"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.notifications.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.locale Locale in which to localize messages.
     * @param {string} params.notificationId The ID for the notification in question.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params: Params$Resource$Notifications$Get,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    get(
      params?: Params$Resource$Notifications$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Notification>;
    get(
      params: Params$Resource$Notifications$Get,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    get(
      params: Params$Resource$Notifications$Get,
      options: MethodOptions | BodyResponseCallback<Schema$Notification>,
      callback: BodyResponseCallback<Schema$Notification>
    ): void;
    get(
      params: Params$Resource$Notifications$Get,
      callback: BodyResponseCallback<Schema$Notification>
    ): void;
    get(callback: BodyResponseCallback<Schema$Notification>): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Notifications$Get
        | BodyResponseCallback<Schema$Notification>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Notification>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Notification>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Notification> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Notifications$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Notifications$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/notifications/{notificationId}'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['notificationId'],
        pathParams: ['notificationId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Notification>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Notification>(parameters);
      }
    }

    /**
     * drive.notifications.watch
     * @desc Subscribe to notifications
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/activity',
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.activity',
     *       'https://www.googleapis.com/auth/drive.activity.readonly',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.notifications.watch({
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "address": "my_address",
     *       //   "expiration": "my_expiration",
     *       //   "id": "my_id",
     *       //   "kind": "my_kind",
     *       //   "params": {},
     *       //   "payload": false,
     *       //   "resourceId": "my_resourceId",
     *       //   "resourceUri": "my_resourceUri",
     *       //   "token": "my_token",
     *       //   "type": "my_type"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "address": "my_address",
     *   //   "expiration": "my_expiration",
     *   //   "id": "my_id",
     *   //   "kind": "my_kind",
     *   //   "params": {},
     *   //   "payload": false,
     *   //   "resourceId": "my_resourceId",
     *   //   "resourceUri": "my_resourceUri",
     *   //   "token": "my_token",
     *   //   "type": "my_type"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.notifications.watch
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {().Channel} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    watch(
      params: Params$Resource$Notifications$Watch,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    watch(
      params?: Params$Resource$Notifications$Watch,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Channel>;
    watch(
      params: Params$Resource$Notifications$Watch,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    watch(
      params: Params$Resource$Notifications$Watch,
      options: MethodOptions | BodyResponseCallback<Schema$Channel>,
      callback: BodyResponseCallback<Schema$Channel>
    ): void;
    watch(
      params: Params$Resource$Notifications$Watch,
      callback: BodyResponseCallback<Schema$Channel>
    ): void;
    watch(callback: BodyResponseCallback<Schema$Channel>): void;
    watch(
      paramsOrCallback?:
        | Params$Resource$Notifications$Watch
        | BodyResponseCallback<Schema$Channel>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Channel>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Channel>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Channel> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Notifications$Watch;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Notifications$Watch;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/notifications/watch').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: [],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Channel>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Channel>(parameters);
      }
    }
  }

  export interface Params$Resource$Notifications$Get
    extends StandardParameters {
    /**
     * Locale in which to localize messages.
     */
    locale?: string;
    /**
     * The ID for the notification in question.
     */
    notificationId?: string;
  }
  export interface Params$Resource$Notifications$Watch
    extends StandardParameters {
    /**
     * Request body metadata
     */
    requestBody?: Schema$Channel;
  }

  export class Resource$Parents {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * drive.parents.delete
     * @desc Removes a parent from a file.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.file',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.parents.delete({
     *     // Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. If the item's last parent is removed, the item will be placed under its owner's root.
     *     enforceSingleParent: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file.
     *     fileId: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The ID of the parent.
     *     parentId: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.parents.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.enforceSingleParent Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. If the item's last parent is removed, the item will be placed under its owner's root.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string} params.parentId The ID of the parent.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params: Params$Resource$Parents$Delete,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    delete(
      params?: Params$Resource$Parents$Delete,
      options?: MethodOptions
    ): GaxiosPromise<void>;
    delete(
      params: Params$Resource$Parents$Delete,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    delete(
      params: Params$Resource$Parents$Delete,
      options: MethodOptions | BodyResponseCallback<void>,
      callback: BodyResponseCallback<void>
    ): void;
    delete(
      params: Params$Resource$Parents$Delete,
      callback: BodyResponseCallback<void>
    ): void;
    delete(callback: BodyResponseCallback<void>): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Parents$Delete
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      callback?: BodyResponseCallback<void> | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<void> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Parents$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Parents$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/files/{fileId}/parents/{parentId}'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'parentId'],
        pathParams: ['fileId', 'parentId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<void>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<void>(parameters);
      }
    }

    /**
     * drive.parents.get
     * @desc Gets a specific parent reference.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.photos.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.parents.get({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file.
     *     fileId: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The ID of the parent.
     *     parentId: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "id": "my_id",
     *   //   "isRoot": false,
     *   //   "kind": "my_kind",
     *   //   "parentLink": "my_parentLink",
     *   //   "selfLink": "my_selfLink"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.parents.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string} params.parentId The ID of the parent.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params: Params$Resource$Parents$Get,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    get(
      params?: Params$Resource$Parents$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$ParentReference>;
    get(
      params: Params$Resource$Parents$Get,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    get(
      params: Params$Resource$Parents$Get,
      options: MethodOptions | BodyResponseCallback<Schema$ParentReference>,
      callback: BodyResponseCallback<Schema$ParentReference>
    ): void;
    get(
      params: Params$Resource$Parents$Get,
      callback: BodyResponseCallback<Schema$ParentReference>
    ): void;
    get(callback: BodyResponseCallback<Schema$ParentReference>): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Parents$Get
        | BodyResponseCallback<Schema$ParentReference>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$ParentReference>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$ParentReference>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$ParentReference> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Parents$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Parents$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/files/{fileId}/parents/{parentId}'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'parentId'],
        pathParams: ['fileId', 'parentId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$ParentReference>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$ParentReference>(parameters);
      }
    }

    /**
     * drive.parents.insert
     * @desc Adds a parent folder for a file.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.file',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.parents.insert({
     *     // Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. If the child's owner makes the request, the child will be removed from all current folders and placed in the requested folder. Any other requests that increase the number of the child's parents will fail, except when the canAddMyDriveParent file capability is true and a single parent is being added.
     *     enforceSingleParent: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file.
     *     fileId: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the requesting application supports both My Drives and shared drives.
     *     supportsAllDrives: 'placeholder-value',
     *     // Deprecated use supportsAllDrives instead.
     *     supportsTeamDrives: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "id": "my_id",
     *       //   "isRoot": false,
     *       //   "kind": "my_kind",
     *       //   "parentLink": "my_parentLink",
     *       //   "selfLink": "my_selfLink"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "id": "my_id",
     *   //   "isRoot": false,
     *   //   "kind": "my_kind",
     *   //   "parentLink": "my_parentLink",
     *   //   "selfLink": "my_selfLink"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.parents.insert
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.enforceSingleParent Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. If the child's owner makes the request, the child will be removed from all current folders and placed in the requested folder. Any other requests that increase the number of the child's parents will fail, except when the canAddMyDriveParent file capability is true and a single parent is being added.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {boolean=} params.supportsAllDrives Whether the requesting application supports both My Drives and shared drives.
     * @param {boolean=} params.supportsTeamDrives Deprecated use supportsAllDrives instead.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {().ParentReference} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    insert(
      params: Params$Resource$Parents$Insert,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    insert(
      params?: Params$Resource$Parents$Insert,
      options?: MethodOptions
    ): GaxiosPromise<Schema$ParentReference>;
    insert(
      params: Params$Resource$Parents$Insert,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    insert(
      params: Params$Resource$Parents$Insert,
      options: MethodOptions | BodyResponseCallback<Schema$ParentReference>,
      callback: BodyResponseCallback<Schema$ParentReference>
    ): void;
    insert(
      params: Params$Resource$Parents$Insert,
      callback: BodyResponseCallback<Schema$ParentReference>
    ): void;
    insert(callback: BodyResponseCallback<Schema$ParentReference>): void;
    insert(
      paramsOrCallback?:
        | Params$Resource$Parents$Insert
        | BodyResponseCallback<Schema$ParentReference>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$ParentReference>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$ParentReference>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$ParentReference> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Parents$Insert;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Parents$Insert;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files/{fileId}/parents').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$ParentReference>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$ParentReference>(parameters);
      }
    }

    /**
     * drive.parents.list
     * @desc Lists a file's parents.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.photos.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.parents.list({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file.
     *     fileId: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "etag": "my_etag",
     *   //   "items": [],
     *   //   "kind": "my_kind",
     *   //   "selfLink": "my_selfLink"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.parents.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params: Params$Resource$Parents$List,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    list(
      params?: Params$Resource$Parents$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$ParentList>;
    list(
      params: Params$Resource$Parents$List,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    list(
      params: Params$Resource$Parents$List,
      options: MethodOptions | BodyResponseCallback<Schema$ParentList>,
      callback: BodyResponseCallback<Schema$ParentList>
    ): void;
    list(
      params: Params$Resource$Parents$List,
      callback: BodyResponseCallback<Schema$ParentList>
    ): void;
    list(callback: BodyResponseCallback<Schema$ParentList>): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Parents$List
        | BodyResponseCallback<Schema$ParentList>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$ParentList>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$ParentList>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$ParentList> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Parents$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Parents$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files/{fileId}/parents').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$ParentList>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$ParentList>(parameters);
      }
    }
  }

  export interface Params$Resource$Parents$Delete extends StandardParameters {
    /**
     * Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. If the item's last parent is removed, the item will be placed under its owner's root.
     */
    enforceSingleParent?: boolean;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file.
     */
    fileId?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The ID of the parent.
     */
    parentId?: string;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }
  export interface Params$Resource$Parents$Get extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file.
     */
    fileId?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The ID of the parent.
     */
    parentId?: string;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }
  export interface Params$Resource$Parents$Insert extends StandardParameters {
    /**
     * Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. If the child's owner makes the request, the child will be removed from all current folders and placed in the requested folder. Any other requests that increase the number of the child's parents will fail, except when the canAddMyDriveParent file capability is true and a single parent is being added.
     */
    enforceSingleParent?: boolean;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file.
     */
    fileId?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the requesting application supports both My Drives and shared drives.
     */
    supportsAllDrives?: boolean;
    /**
     * Deprecated use supportsAllDrives instead.
     */
    supportsTeamDrives?: boolean;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;

    /**
     * Request body metadata
     */
    requestBody?: Schema$ParentReference;
  }
  export interface Params$Resource$Parents$List extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file.
     */
    fileId?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }

  export class Resource$Permissions {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * drive.permissions.delete
     * @desc Deletes a permission from a file or shared drive.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.file',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.permissions.delete({
     *     // An encoded string which contains information about inherited permissions, used for consistency checks.
     *     ancestorPermissionToken: 'placeholder-value',
     *     // Whether the user has confirmed the permission delete request.
     *     confirmed: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID for the file or shared drive.
     *     fileId: 'placeholder-value',
     *     // A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     *     languageCode: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The ID for the permission.
     *     permissionId: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the requesting application supports both My Drives and shared drives.
     *     supportsAllDrives: 'placeholder-value',
     *     // Deprecated use supportsAllDrives instead.
     *     supportsTeamDrives: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.
     *     useDomainAdminAccess: 'placeholder-value',
     *   });
     *   console.log(res.data);
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.permissions.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.ancestorPermissionToken An encoded string which contains information about inherited permissions, used for consistency checks.
     * @param {boolean=} params.confirmed Whether the user has confirmed the permission delete request.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID for the file or shared drive.
     * @param {string=} params.languageCode A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string} params.permissionId The ID for the permission.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {boolean=} params.supportsAllDrives Whether the requesting application supports both My Drives and shared drives.
     * @param {boolean=} params.supportsTeamDrives Deprecated use supportsAllDrives instead.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {boolean=} params.useDomainAdminAccess Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params: Params$Resource$Permissions$Delete,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    delete(
      params?: Params$Resource$Permissions$Delete,
      options?: MethodOptions
    ): GaxiosPromise<void>;
    delete(
      params: Params$Resource$Permissions$Delete,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    delete(
      params: Params$Resource$Permissions$Delete,
      options: MethodOptions | BodyResponseCallback<void>,
      callback: BodyResponseCallback<void>
    ): void;
    delete(
      params: Params$Resource$Permissions$Delete,
      callback: BodyResponseCallback<void>
    ): void;
    delete(callback: BodyResponseCallback<void>): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Permissions$Delete
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      callback?: BodyResponseCallback<void> | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<void> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Permissions$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Permissions$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl +
              '/drive/v2.1beta/files/{fileId}/permissions/{permissionId}'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'permissionId'],
        pathParams: ['fileId', 'permissionId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<void>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<void>(parameters);
      }
    }

    /**
     * drive.permissions.get
     * @desc Gets a permission by ID.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.photos.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.permissions.get({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID for the file or shared drive.
     *     fileId: 'placeholder-value',
     *     // Whether the response should contain complete permission details for all ancestors with an augmented permission.
     *     includeCompletePermissionDetails: 'placeholder-value',
     *     // A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     *     languageCode: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The ID for the permission.
     *     permissionId: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the requesting application supports both My Drives and shared drives.
     *     supportsAllDrives: 'placeholder-value',
     *     // Whether the requesting application supports ancestor downgrades. If true, downgrade selectableRoles will be returned.
     *     supportsAncestorDowngrades: 'placeholder-value',
     *     // Deprecated use supportsAllDrives instead.
     *     supportsTeamDrives: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.
     *     useDomainAdminAccess: 'placeholder-value',
     *     // If true, Permissions with type Audience are represented with Domain type.
     *     useLegacyDomainPermissionBehavior: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "additionalRoles": [],
     *   //   "audienceDescription": "my_audienceDescription",
     *   //   "audienceId": "my_audienceId",
     *   //   "authKey": "my_authKey",
     *   //   "capabilities": {},
     *   //   "customerId": "my_customerId",
     *   //   "deleted": false,
     *   //   "domain": "my_domain",
     *   //   "emailAddress": "my_emailAddress",
     *   //   "etag": "my_etag",
     *   //   "expirationDate": "my_expirationDate",
     *   //   "id": "my_id",
     *   //   "inapplicableLocalizedMessage": "my_inapplicableLocalizedMessage",
     *   //   "inapplicableReason": "my_inapplicableReason",
     *   //   "isStale": false,
     *   //   "kind": "my_kind",
     *   //   "name": "my_name",
     *   //   "nameIfNotUser": "my_nameIfNotUser",
     *   //   "permissionDetails": [],
     *   //   "photoLink": "my_photoLink",
     *   //   "role": "my_role",
     *   //   "selectableRoles": [],
     *   //   "selfLink": "my_selfLink",
     *   //   "staleReason": "my_staleReason",
     *   //   "teamDrivePermissionDetails": [],
     *   //   "type": "my_type",
     *   //   "userId": "my_userId",
     *   //   "value": "my_value",
     *   //   "view": "my_view",
     *   //   "withLink": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.permissions.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID for the file or shared drive.
     * @param {boolean=} params.includeCompletePermissionDetails Whether the response should contain complete permission details for all ancestors with an augmented permission.
     * @param {string=} params.languageCode A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string} params.permissionId The ID for the permission.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {boolean=} params.supportsAllDrives Whether the requesting application supports both My Drives and shared drives.
     * @param {boolean=} params.supportsAncestorDowngrades Whether the requesting application supports ancestor downgrades. If true, downgrade selectableRoles will be returned.
     * @param {boolean=} params.supportsTeamDrives Deprecated use supportsAllDrives instead.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {boolean=} params.useDomainAdminAccess Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.
     * @param {boolean=} params.useLegacyDomainPermissionBehavior If true, Permissions with type Audience are represented with Domain type.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params: Params$Resource$Permissions$Get,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    get(
      params?: Params$Resource$Permissions$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Permission>;
    get(
      params: Params$Resource$Permissions$Get,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    get(
      params: Params$Resource$Permissions$Get,
      options: MethodOptions | BodyResponseCallback<Schema$Permission>,
      callback: BodyResponseCallback<Schema$Permission>
    ): void;
    get(
      params: Params$Resource$Permissions$Get,
      callback: BodyResponseCallback<Schema$Permission>
    ): void;
    get(callback: BodyResponseCallback<Schema$Permission>): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Permissions$Get
        | BodyResponseCallback<Schema$Permission>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Permission>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Permission>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Permission> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Permissions$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Permissions$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl +
              '/drive/v2.1beta/files/{fileId}/permissions/{permissionId}'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'permissionId'],
        pathParams: ['fileId', 'permissionId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Permission>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Permission>(parameters);
      }
    }

    /**
     * drive.permissions.getIdForEmail
     * @desc Returns the permission ID for an email address.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.apps.readonly',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.photos.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.permissions.getIdForEmail({
     *     // The email address for which to return a permission ID
     *     email: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "id": "my_id",
     *   //   "kind": "my_kind"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.permissions.getIdForEmail
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.email The email address for which to return a permission ID
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getIdForEmail(
      params: Params$Resource$Permissions$Getidforemail,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    getIdForEmail(
      params?: Params$Resource$Permissions$Getidforemail,
      options?: MethodOptions
    ): GaxiosPromise<Schema$PermissionId>;
    getIdForEmail(
      params: Params$Resource$Permissions$Getidforemail,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    getIdForEmail(
      params: Params$Resource$Permissions$Getidforemail,
      options: MethodOptions | BodyResponseCallback<Schema$PermissionId>,
      callback: BodyResponseCallback<Schema$PermissionId>
    ): void;
    getIdForEmail(
      params: Params$Resource$Permissions$Getidforemail,
      callback: BodyResponseCallback<Schema$PermissionId>
    ): void;
    getIdForEmail(callback: BodyResponseCallback<Schema$PermissionId>): void;
    getIdForEmail(
      paramsOrCallback?:
        | Params$Resource$Permissions$Getidforemail
        | BodyResponseCallback<Schema$PermissionId>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$PermissionId>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$PermissionId>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$PermissionId> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Permissions$Getidforemail;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Permissions$Getidforemail;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/permissionIds/{email}').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['email'],
        pathParams: ['email'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$PermissionId>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$PermissionId>(parameters);
      }
    }

    /**
     * drive.permissions.insert
     * @desc Inserts a permission for a file or shared drive.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.file',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.permissions.insert({
     *     // Whether the user has confirmed the sharing request.
     *     confirmed: 'placeholder-value',
     *     // A plain text custom message to include in notification emails.
     *     emailMessage: 'placeholder-value',
     *     // Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. See moveToNewOwnersRoot for details.
     *     enforceSingleParent: 'placeholder-value',
     *     // Internal-only parameter that takes effect during ownership transfer of My Drive items when the new owner cannot discover any of the existing parents. This flag ensures that the item will have a parent discoverable by the new owner. If set to true, moveToNewOwnersRoot must be false.
     *     ensureDiscoverableParent: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID for the file or shared drive.
     *     fileId: 'placeholder-value',
     *     // A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     *     languageCode: 'placeholder-value',
     *     // This parameter will only take effect if the item is not in a shared drive and the request is attempting to transfer the ownership of the item. When set to true, the item will be moved to the new owner's My Drive root folder and all prior parents removed. If set to false, when enforceSingleParent=true, parents are not changed. If set to false, when enforceSingleParent=false, existing parents are not changed; however, the file will be added to the new owner's My Drive root folder, unless it is already in the new owner's My Drive.
     *     moveToNewOwnersRoot: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether to send notification emails when sharing to users or groups.
     *     sendNotificationEmails: 'placeholder-value',
     *     // Whether the requesting application supports both My Drives and shared drives.
     *     supportsAllDrives: 'placeholder-value',
     *     // Deprecated use supportsAllDrives instead.
     *     supportsTeamDrives: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.
     *     useDomainAdminAccess: 'placeholder-value',
     *     // If true, Permissions with type Audience are represented with Domain type.
     *     useLegacyDomainPermissionBehavior: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "additionalRoles": [],
     *       //   "audienceDescription": "my_audienceDescription",
     *       //   "audienceId": "my_audienceId",
     *       //   "authKey": "my_authKey",
     *       //   "capabilities": {},
     *       //   "customerId": "my_customerId",
     *       //   "deleted": false,
     *       //   "domain": "my_domain",
     *       //   "emailAddress": "my_emailAddress",
     *       //   "etag": "my_etag",
     *       //   "expirationDate": "my_expirationDate",
     *       //   "id": "my_id",
     *       //   "inapplicableLocalizedMessage": "my_inapplicableLocalizedMessage",
     *       //   "inapplicableReason": "my_inapplicableReason",
     *       //   "isStale": false,
     *       //   "kind": "my_kind",
     *       //   "name": "my_name",
     *       //   "nameIfNotUser": "my_nameIfNotUser",
     *       //   "permissionDetails": [],
     *       //   "photoLink": "my_photoLink",
     *       //   "role": "my_role",
     *       //   "selectableRoles": [],
     *       //   "selfLink": "my_selfLink",
     *       //   "staleReason": "my_staleReason",
     *       //   "teamDrivePermissionDetails": [],
     *       //   "type": "my_type",
     *       //   "userId": "my_userId",
     *       //   "value": "my_value",
     *       //   "view": "my_view",
     *       //   "withLink": false
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "additionalRoles": [],
     *   //   "audienceDescription": "my_audienceDescription",
     *   //   "audienceId": "my_audienceId",
     *   //   "authKey": "my_authKey",
     *   //   "capabilities": {},
     *   //   "customerId": "my_customerId",
     *   //   "deleted": false,
     *   //   "domain": "my_domain",
     *   //   "emailAddress": "my_emailAddress",
     *   //   "etag": "my_etag",
     *   //   "expirationDate": "my_expirationDate",
     *   //   "id": "my_id",
     *   //   "inapplicableLocalizedMessage": "my_inapplicableLocalizedMessage",
     *   //   "inapplicableReason": "my_inapplicableReason",
     *   //   "isStale": false,
     *   //   "kind": "my_kind",
     *   //   "name": "my_name",
     *   //   "nameIfNotUser": "my_nameIfNotUser",
     *   //   "permissionDetails": [],
     *   //   "photoLink": "my_photoLink",
     *   //   "role": "my_role",
     *   //   "selectableRoles": [],
     *   //   "selfLink": "my_selfLink",
     *   //   "staleReason": "my_staleReason",
     *   //   "teamDrivePermissionDetails": [],
     *   //   "type": "my_type",
     *   //   "userId": "my_userId",
     *   //   "value": "my_value",
     *   //   "view": "my_view",
     *   //   "withLink": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.permissions.insert
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.confirmed Whether the user has confirmed the sharing request.
     * @param {string=} params.emailMessage A plain text custom message to include in notification emails.
     * @param {boolean=} params.enforceSingleParent Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. See moveToNewOwnersRoot for details.
     * @param {boolean=} params.ensureDiscoverableParent Internal-only parameter that takes effect during ownership transfer of My Drive items when the new owner cannot discover any of the existing parents. This flag ensures that the item will have a parent discoverable by the new owner. If set to true, moveToNewOwnersRoot must be false.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID for the file or shared drive.
     * @param {string=} params.languageCode A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     * @param {boolean=} params.moveToNewOwnersRoot This parameter will only take effect if the item is not in a shared drive and the request is attempting to transfer the ownership of the item. When set to true, the item will be moved to the new owner's My Drive root folder and all prior parents removed. If set to false, when enforceSingleParent=true, parents are not changed. If set to false, when enforceSingleParent=false, existing parents are not changed; however, the file will be added to the new owner's My Drive root folder, unless it is already in the new owner's My Drive.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {boolean=} params.sendNotificationEmails Whether to send notification emails when sharing to users or groups.
     * @param {boolean=} params.supportsAllDrives Whether the requesting application supports both My Drives and shared drives.
     * @param {boolean=} params.supportsTeamDrives Deprecated use supportsAllDrives instead.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {boolean=} params.useDomainAdminAccess Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.
     * @param {boolean=} params.useLegacyDomainPermissionBehavior If true, Permissions with type Audience are represented with Domain type.
     * @param {().Permission} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    insert(
      params: Params$Resource$Permissions$Insert,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    insert(
      params?: Params$Resource$Permissions$Insert,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Permission>;
    insert(
      params: Params$Resource$Permissions$Insert,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    insert(
      params: Params$Resource$Permissions$Insert,
      options: MethodOptions | BodyResponseCallback<Schema$Permission>,
      callback: BodyResponseCallback<Schema$Permission>
    ): void;
    insert(
      params: Params$Resource$Permissions$Insert,
      callback: BodyResponseCallback<Schema$Permission>
    ): void;
    insert(callback: BodyResponseCallback<Schema$Permission>): void;
    insert(
      paramsOrCallback?:
        | Params$Resource$Permissions$Insert
        | BodyResponseCallback<Schema$Permission>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Permission>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Permission>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Permission> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Permissions$Insert;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Permissions$Insert;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/files/{fileId}/permissions'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Permission>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Permission>(parameters);
      }
    }

    /**
     * drive.permissions.list
     * @desc Lists a file's or shared drive's permissions.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.photos.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.permissions.list({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID for the file or shared drive.
     *     fileId: 'placeholder-value',
     *     // Whether the response should contain complete permission details for all ancestors with an augmented permission.
     *     includeCompletePermissionDetails: 'placeholder-value',
     *     // Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     *     includePermissionsForView: 'placeholder-value',
     *     // A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     *     languageCode: 'placeholder-value',
     *     // The maximum number of permissions to return per page. When not set for files in a shared drive, at most 100 results will be returned. When not set for files that are not in a shared drive, the entire list will be returned.
     *     maxResults: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response.
     *     pageToken: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the requesting application supports both My Drives and shared drives.
     *     supportsAllDrives: 'placeholder-value',
     *     // Whether the requesting application supports ancestor downgrades. If true, downgrade selectableRoles will be returned.
     *     supportsAncestorDowngrades: 'placeholder-value',
     *     // Deprecated use supportsAllDrives instead.
     *     supportsTeamDrives: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.
     *     useDomainAdminAccess: 'placeholder-value',
     *     // If true, Permissions with type Audience are represented with Domain type.
     *     useLegacyDomainPermissionBehavior: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "ancestorPermissionToken": "my_ancestorPermissionToken",
     *   //   "etag": "my_etag",
     *   //   "items": [],
     *   //   "kind": "my_kind",
     *   //   "nextPageToken": "my_nextPageToken",
     *   //   "selfLink": "my_selfLink"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.permissions.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID for the file or shared drive.
     * @param {boolean=} params.includeCompletePermissionDetails Whether the response should contain complete permission details for all ancestors with an augmented permission.
     * @param {string=} params.includePermissionsForView Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     * @param {string=} params.languageCode A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     * @param {integer=} params.maxResults The maximum number of permissions to return per page. When not set for files in a shared drive, at most 100 results will be returned. When not set for files that are not in a shared drive, the entire list will be returned.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.pageToken The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {boolean=} params.supportsAllDrives Whether the requesting application supports both My Drives and shared drives.
     * @param {boolean=} params.supportsAncestorDowngrades Whether the requesting application supports ancestor downgrades. If true, downgrade selectableRoles will be returned.
     * @param {boolean=} params.supportsTeamDrives Deprecated use supportsAllDrives instead.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {boolean=} params.useDomainAdminAccess Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.
     * @param {boolean=} params.useLegacyDomainPermissionBehavior If true, Permissions with type Audience are represented with Domain type.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params: Params$Resource$Permissions$List,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    list(
      params?: Params$Resource$Permissions$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$PermissionList>;
    list(
      params: Params$Resource$Permissions$List,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    list(
      params: Params$Resource$Permissions$List,
      options: MethodOptions | BodyResponseCallback<Schema$PermissionList>,
      callback: BodyResponseCallback<Schema$PermissionList>
    ): void;
    list(
      params: Params$Resource$Permissions$List,
      callback: BodyResponseCallback<Schema$PermissionList>
    ): void;
    list(callback: BodyResponseCallback<Schema$PermissionList>): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Permissions$List
        | BodyResponseCallback<Schema$PermissionList>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$PermissionList>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$PermissionList>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$PermissionList> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Permissions$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Permissions$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/files/{fileId}/permissions'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$PermissionList>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$PermissionList>(parameters);
      }
    }

    /**
     * drive.permissions.patch
     * @desc Updates a permission using patch semantics.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.file',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.permissions.patch({
     *     // An encoded string which contains information about inherited permissions, used for consistency checks.
     *     ancestorPermissionToken: 'placeholder-value',
     *     // DO NOT USE. USE removeExpiration.
     *     clearExpiration: 'placeholder-value',
     *     // Whether the user has confirmed the permission patch request.
     *     confirmed: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID for the file or shared drive.
     *     fileId: 'placeholder-value',
     *     // A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     *     languageCode: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The ID for the permission.
     *     permissionId: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // Whether to remove the expiration date.
     *     removeExpiration: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the requesting application supports both My Drives and shared drives.
     *     supportsAllDrives: 'placeholder-value',
     *     // Deprecated use supportsAllDrives instead.
     *     supportsTeamDrives: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // Whether changing a role to 'owner' downgrades the current owners to writers. Does nothing if the specified role is not 'owner'.
     *     transferOwnership: 'placeholder-value',
     *     // Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.
     *     useDomainAdminAccess: 'placeholder-value',
     *     // If true, Permissions with type Audience are represented with Domain type.
     *     useLegacyDomainPermissionBehavior: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "additionalRoles": [],
     *       //   "audienceDescription": "my_audienceDescription",
     *       //   "audienceId": "my_audienceId",
     *       //   "authKey": "my_authKey",
     *       //   "capabilities": {},
     *       //   "customerId": "my_customerId",
     *       //   "deleted": false,
     *       //   "domain": "my_domain",
     *       //   "emailAddress": "my_emailAddress",
     *       //   "etag": "my_etag",
     *       //   "expirationDate": "my_expirationDate",
     *       //   "id": "my_id",
     *       //   "inapplicableLocalizedMessage": "my_inapplicableLocalizedMessage",
     *       //   "inapplicableReason": "my_inapplicableReason",
     *       //   "isStale": false,
     *       //   "kind": "my_kind",
     *       //   "name": "my_name",
     *       //   "nameIfNotUser": "my_nameIfNotUser",
     *       //   "permissionDetails": [],
     *       //   "photoLink": "my_photoLink",
     *       //   "role": "my_role",
     *       //   "selectableRoles": [],
     *       //   "selfLink": "my_selfLink",
     *       //   "staleReason": "my_staleReason",
     *       //   "teamDrivePermissionDetails": [],
     *       //   "type": "my_type",
     *       //   "userId": "my_userId",
     *       //   "value": "my_value",
     *       //   "view": "my_view",
     *       //   "withLink": false
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "additionalRoles": [],
     *   //   "audienceDescription": "my_audienceDescription",
     *   //   "audienceId": "my_audienceId",
     *   //   "authKey": "my_authKey",
     *   //   "capabilities": {},
     *   //   "customerId": "my_customerId",
     *   //   "deleted": false,
     *   //   "domain": "my_domain",
     *   //   "emailAddress": "my_emailAddress",
     *   //   "etag": "my_etag",
     *   //   "expirationDate": "my_expirationDate",
     *   //   "id": "my_id",
     *   //   "inapplicableLocalizedMessage": "my_inapplicableLocalizedMessage",
     *   //   "inapplicableReason": "my_inapplicableReason",
     *   //   "isStale": false,
     *   //   "kind": "my_kind",
     *   //   "name": "my_name",
     *   //   "nameIfNotUser": "my_nameIfNotUser",
     *   //   "permissionDetails": [],
     *   //   "photoLink": "my_photoLink",
     *   //   "role": "my_role",
     *   //   "selectableRoles": [],
     *   //   "selfLink": "my_selfLink",
     *   //   "staleReason": "my_staleReason",
     *   //   "teamDrivePermissionDetails": [],
     *   //   "type": "my_type",
     *   //   "userId": "my_userId",
     *   //   "value": "my_value",
     *   //   "view": "my_view",
     *   //   "withLink": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.permissions.patch
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.ancestorPermissionToken An encoded string which contains information about inherited permissions, used for consistency checks.
     * @param {boolean=} params.clearExpiration DO NOT USE. USE removeExpiration.
     * @param {boolean=} params.confirmed Whether the user has confirmed the permission patch request.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID for the file or shared drive.
     * @param {string=} params.languageCode A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string} params.permissionId The ID for the permission.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {boolean=} params.removeExpiration Whether to remove the expiration date.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {boolean=} params.supportsAllDrives Whether the requesting application supports both My Drives and shared drives.
     * @param {boolean=} params.supportsTeamDrives Deprecated use supportsAllDrives instead.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {boolean=} params.transferOwnership Whether changing a role to 'owner' downgrades the current owners to writers. Does nothing if the specified role is not 'owner'.
     * @param {boolean=} params.useDomainAdminAccess Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.
     * @param {boolean=} params.useLegacyDomainPermissionBehavior If true, Permissions with type Audience are represented with Domain type.
     * @param {().Permission} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    patch(
      params: Params$Resource$Permissions$Patch,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    patch(
      params?: Params$Resource$Permissions$Patch,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Permission>;
    patch(
      params: Params$Resource$Permissions$Patch,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    patch(
      params: Params$Resource$Permissions$Patch,
      options: MethodOptions | BodyResponseCallback<Schema$Permission>,
      callback: BodyResponseCallback<Schema$Permission>
    ): void;
    patch(
      params: Params$Resource$Permissions$Patch,
      callback: BodyResponseCallback<Schema$Permission>
    ): void;
    patch(callback: BodyResponseCallback<Schema$Permission>): void;
    patch(
      paramsOrCallback?:
        | Params$Resource$Permissions$Patch
        | BodyResponseCallback<Schema$Permission>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Permission>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Permission>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Permission> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Permissions$Patch;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Permissions$Patch;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl +
              '/drive/v2.1beta/files/{fileId}/permissions/{permissionId}'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'permissionId'],
        pathParams: ['fileId', 'permissionId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Permission>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Permission>(parameters);
      }
    }

    /**
     * drive.permissions.update
     * @desc Updates a permission.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.file',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.permissions.update({
     *     // An encoded string which contains information about inherited permissions, used for consistency checks.
     *     ancestorPermissionToken: 'placeholder-value',
     *     // DO NOT USE. USE removeExpiration
     *     clearExpiration: 'placeholder-value',
     *     // Whether the user has confirmed the permission update request.
     *     confirmed: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID for the file or shared drive.
     *     fileId: 'placeholder-value',
     *     // A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     *     languageCode: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The ID for the permission.
     *     permissionId: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // Whether to remove the expiration date.
     *     removeExpiration: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the requesting application supports both My Drives and shared drives.
     *     supportsAllDrives: 'placeholder-value',
     *     // Deprecated use supportsAllDrives instead.
     *     supportsTeamDrives: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // Whether changing a role to 'owner' downgrades the current owners to writers. Does nothing if the specified role is not 'owner'.
     *     transferOwnership: 'placeholder-value',
     *     // Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.
     *     useDomainAdminAccess: 'placeholder-value',
     *     // If true, Permissions with type Audience are represented with Domain type.
     *     useLegacyDomainPermissionBehavior: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "additionalRoles": [],
     *       //   "audienceDescription": "my_audienceDescription",
     *       //   "audienceId": "my_audienceId",
     *       //   "authKey": "my_authKey",
     *       //   "capabilities": {},
     *       //   "customerId": "my_customerId",
     *       //   "deleted": false,
     *       //   "domain": "my_domain",
     *       //   "emailAddress": "my_emailAddress",
     *       //   "etag": "my_etag",
     *       //   "expirationDate": "my_expirationDate",
     *       //   "id": "my_id",
     *       //   "inapplicableLocalizedMessage": "my_inapplicableLocalizedMessage",
     *       //   "inapplicableReason": "my_inapplicableReason",
     *       //   "isStale": false,
     *       //   "kind": "my_kind",
     *       //   "name": "my_name",
     *       //   "nameIfNotUser": "my_nameIfNotUser",
     *       //   "permissionDetails": [],
     *       //   "photoLink": "my_photoLink",
     *       //   "role": "my_role",
     *       //   "selectableRoles": [],
     *       //   "selfLink": "my_selfLink",
     *       //   "staleReason": "my_staleReason",
     *       //   "teamDrivePermissionDetails": [],
     *       //   "type": "my_type",
     *       //   "userId": "my_userId",
     *       //   "value": "my_value",
     *       //   "view": "my_view",
     *       //   "withLink": false
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "additionalRoles": [],
     *   //   "audienceDescription": "my_audienceDescription",
     *   //   "audienceId": "my_audienceId",
     *   //   "authKey": "my_authKey",
     *   //   "capabilities": {},
     *   //   "customerId": "my_customerId",
     *   //   "deleted": false,
     *   //   "domain": "my_domain",
     *   //   "emailAddress": "my_emailAddress",
     *   //   "etag": "my_etag",
     *   //   "expirationDate": "my_expirationDate",
     *   //   "id": "my_id",
     *   //   "inapplicableLocalizedMessage": "my_inapplicableLocalizedMessage",
     *   //   "inapplicableReason": "my_inapplicableReason",
     *   //   "isStale": false,
     *   //   "kind": "my_kind",
     *   //   "name": "my_name",
     *   //   "nameIfNotUser": "my_nameIfNotUser",
     *   //   "permissionDetails": [],
     *   //   "photoLink": "my_photoLink",
     *   //   "role": "my_role",
     *   //   "selectableRoles": [],
     *   //   "selfLink": "my_selfLink",
     *   //   "staleReason": "my_staleReason",
     *   //   "teamDrivePermissionDetails": [],
     *   //   "type": "my_type",
     *   //   "userId": "my_userId",
     *   //   "value": "my_value",
     *   //   "view": "my_view",
     *   //   "withLink": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.permissions.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.ancestorPermissionToken An encoded string which contains information about inherited permissions, used for consistency checks.
     * @param {boolean=} params.clearExpiration DO NOT USE. USE removeExpiration
     * @param {boolean=} params.confirmed Whether the user has confirmed the permission update request.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID for the file or shared drive.
     * @param {string=} params.languageCode A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string} params.permissionId The ID for the permission.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {boolean=} params.removeExpiration Whether to remove the expiration date.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {boolean=} params.supportsAllDrives Whether the requesting application supports both My Drives and shared drives.
     * @param {boolean=} params.supportsTeamDrives Deprecated use supportsAllDrives instead.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {boolean=} params.transferOwnership Whether changing a role to 'owner' downgrades the current owners to writers. Does nothing if the specified role is not 'owner'.
     * @param {boolean=} params.useDomainAdminAccess Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.
     * @param {boolean=} params.useLegacyDomainPermissionBehavior If true, Permissions with type Audience are represented with Domain type.
     * @param {().Permission} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params: Params$Resource$Permissions$Update,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    update(
      params?: Params$Resource$Permissions$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Permission>;
    update(
      params: Params$Resource$Permissions$Update,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    update(
      params: Params$Resource$Permissions$Update,
      options: MethodOptions | BodyResponseCallback<Schema$Permission>,
      callback: BodyResponseCallback<Schema$Permission>
    ): void;
    update(
      params: Params$Resource$Permissions$Update,
      callback: BodyResponseCallback<Schema$Permission>
    ): void;
    update(callback: BodyResponseCallback<Schema$Permission>): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Permissions$Update
        | BodyResponseCallback<Schema$Permission>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Permission>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Permission>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Permission> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Permissions$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Permissions$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl +
              '/drive/v2.1beta/files/{fileId}/permissions/{permissionId}'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'permissionId'],
        pathParams: ['fileId', 'permissionId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Permission>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Permission>(parameters);
      }
    }
  }

  export interface Params$Resource$Permissions$Delete
    extends StandardParameters {
    /**
     * An encoded string which contains information about inherited permissions, used for consistency checks.
     */
    ancestorPermissionToken?: string;
    /**
     * Whether the user has confirmed the permission delete request.
     */
    confirmed?: boolean;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID for the file or shared drive.
     */
    fileId?: string;
    /**
     * A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     */
    languageCode?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The ID for the permission.
     */
    permissionId?: string;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the requesting application supports both My Drives and shared drives.
     */
    supportsAllDrives?: boolean;
    /**
     * Deprecated use supportsAllDrives instead.
     */
    supportsTeamDrives?: boolean;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.
     */
    useDomainAdminAccess?: boolean;
  }
  export interface Params$Resource$Permissions$Get extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID for the file or shared drive.
     */
    fileId?: string;
    /**
     * Whether the response should contain complete permission details for all ancestors with an augmented permission.
     */
    includeCompletePermissionDetails?: boolean;
    /**
     * A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     */
    languageCode?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The ID for the permission.
     */
    permissionId?: string;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the requesting application supports both My Drives and shared drives.
     */
    supportsAllDrives?: boolean;
    /**
     * Whether the requesting application supports ancestor downgrades. If true, downgrade selectableRoles will be returned.
     */
    supportsAncestorDowngrades?: boolean;
    /**
     * Deprecated use supportsAllDrives instead.
     */
    supportsTeamDrives?: boolean;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.
     */
    useDomainAdminAccess?: boolean;
    /**
     * If true, Permissions with type Audience are represented with Domain type.
     */
    useLegacyDomainPermissionBehavior?: boolean;
  }
  export interface Params$Resource$Permissions$Getidforemail
    extends StandardParameters {
    /**
     * The email address for which to return a permission ID
     */
    email?: string;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }
  export interface Params$Resource$Permissions$Insert
    extends StandardParameters {
    /**
     * Whether the user has confirmed the sharing request.
     */
    confirmed?: boolean;
    /**
     * A plain text custom message to include in notification emails.
     */
    emailMessage?: string;
    /**
     * Set to true to opt in to API behavior that aims for all items to have exactly one parent. This parameter will only take effect if the item is not in a shared drive. See moveToNewOwnersRoot for details.
     */
    enforceSingleParent?: boolean;
    /**
     * Internal-only parameter that takes effect during ownership transfer of My Drive items when the new owner cannot discover any of the existing parents. This flag ensures that the item will have a parent discoverable by the new owner. If set to true, moveToNewOwnersRoot must be false.
     */
    ensureDiscoverableParent?: boolean;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID for the file or shared drive.
     */
    fileId?: string;
    /**
     * A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     */
    languageCode?: string;
    /**
     * This parameter will only take effect if the item is not in a shared drive and the request is attempting to transfer the ownership of the item. When set to true, the item will be moved to the new owner's My Drive root folder and all prior parents removed. If set to false, when enforceSingleParent=true, parents are not changed. If set to false, when enforceSingleParent=false, existing parents are not changed; however, the file will be added to the new owner's My Drive root folder, unless it is already in the new owner's My Drive.
     */
    moveToNewOwnersRoot?: boolean;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether to send notification emails when sharing to users or groups.
     */
    sendNotificationEmails?: boolean;
    /**
     * Whether the requesting application supports both My Drives and shared drives.
     */
    supportsAllDrives?: boolean;
    /**
     * Deprecated use supportsAllDrives instead.
     */
    supportsTeamDrives?: boolean;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.
     */
    useDomainAdminAccess?: boolean;
    /**
     * If true, Permissions with type Audience are represented with Domain type.
     */
    useLegacyDomainPermissionBehavior?: boolean;

    /**
     * Request body metadata
     */
    requestBody?: Schema$Permission;
  }
  export interface Params$Resource$Permissions$List extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID for the file or shared drive.
     */
    fileId?: string;
    /**
     * Whether the response should contain complete permission details for all ancestors with an augmented permission.
     */
    includeCompletePermissionDetails?: boolean;
    /**
     * Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     */
    includePermissionsForView?: string;
    /**
     * A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     */
    languageCode?: string;
    /**
     * The maximum number of permissions to return per page. When not set for files in a shared drive, at most 100 results will be returned. When not set for files that are not in a shared drive, the entire list will be returned.
     */
    maxResults?: number;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response.
     */
    pageToken?: string;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the requesting application supports both My Drives and shared drives.
     */
    supportsAllDrives?: boolean;
    /**
     * Whether the requesting application supports ancestor downgrades. If true, downgrade selectableRoles will be returned.
     */
    supportsAncestorDowngrades?: boolean;
    /**
     * Deprecated use supportsAllDrives instead.
     */
    supportsTeamDrives?: boolean;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.
     */
    useDomainAdminAccess?: boolean;
    /**
     * If true, Permissions with type Audience are represented with Domain type.
     */
    useLegacyDomainPermissionBehavior?: boolean;
  }
  export interface Params$Resource$Permissions$Patch
    extends StandardParameters {
    /**
     * An encoded string which contains information about inherited permissions, used for consistency checks.
     */
    ancestorPermissionToken?: string;
    /**
     * DO NOT USE. USE removeExpiration.
     */
    clearExpiration?: boolean;
    /**
     * Whether the user has confirmed the permission patch request.
     */
    confirmed?: boolean;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID for the file or shared drive.
     */
    fileId?: string;
    /**
     * A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     */
    languageCode?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The ID for the permission.
     */
    permissionId?: string;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * Whether to remove the expiration date.
     */
    removeExpiration?: boolean;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the requesting application supports both My Drives and shared drives.
     */
    supportsAllDrives?: boolean;
    /**
     * Deprecated use supportsAllDrives instead.
     */
    supportsTeamDrives?: boolean;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * Whether changing a role to 'owner' downgrades the current owners to writers. Does nothing if the specified role is not 'owner'.
     */
    transferOwnership?: boolean;
    /**
     * Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.
     */
    useDomainAdminAccess?: boolean;
    /**
     * If true, Permissions with type Audience are represented with Domain type.
     */
    useLegacyDomainPermissionBehavior?: boolean;

    /**
     * Request body metadata
     */
    requestBody?: Schema$Permission;
  }
  export interface Params$Resource$Permissions$Update
    extends StandardParameters {
    /**
     * An encoded string which contains information about inherited permissions, used for consistency checks.
     */
    ancestorPermissionToken?: string;
    /**
     * DO NOT USE. USE removeExpiration
     */
    clearExpiration?: boolean;
    /**
     * Whether the user has confirmed the permission update request.
     */
    confirmed?: boolean;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID for the file or shared drive.
     */
    fileId?: string;
    /**
     * A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
     */
    languageCode?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The ID for the permission.
     */
    permissionId?: string;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * Whether to remove the expiration date.
     */
    removeExpiration?: boolean;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the requesting application supports both My Drives and shared drives.
     */
    supportsAllDrives?: boolean;
    /**
     * Deprecated use supportsAllDrives instead.
     */
    supportsTeamDrives?: boolean;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * Whether changing a role to 'owner' downgrades the current owners to writers. Does nothing if the specified role is not 'owner'.
     */
    transferOwnership?: boolean;
    /**
     * Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.
     */
    useDomainAdminAccess?: boolean;
    /**
     * If true, Permissions with type Audience are represented with Domain type.
     */
    useLegacyDomainPermissionBehavior?: boolean;

    /**
     * Request body metadata
     */
    requestBody?: Schema$Permission;
  }

  export class Resource$Properties {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * drive.properties.delete
     * @desc Deletes a property.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.properties.delete({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file.
     *     fileId: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The key of the property.
     *     propertyKey: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // The visibility of the property.
     *     visibility: 'placeholder-value',
     *   });
     *   console.log(res.data);
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.properties.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string} params.propertyKey The key of the property.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {string=} params.visibility The visibility of the property.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params: Params$Resource$Properties$Delete,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    delete(
      params?: Params$Resource$Properties$Delete,
      options?: MethodOptions
    ): GaxiosPromise<void>;
    delete(
      params: Params$Resource$Properties$Delete,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    delete(
      params: Params$Resource$Properties$Delete,
      options: MethodOptions | BodyResponseCallback<void>,
      callback: BodyResponseCallback<void>
    ): void;
    delete(
      params: Params$Resource$Properties$Delete,
      callback: BodyResponseCallback<void>
    ): void;
    delete(callback: BodyResponseCallback<void>): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Properties$Delete
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      callback?: BodyResponseCallback<void> | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<void> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Properties$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Properties$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl +
              '/drive/v2.1beta/files/{fileId}/properties/{propertyKey}'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'propertyKey'],
        pathParams: ['fileId', 'propertyKey'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<void>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<void>(parameters);
      }
    }

    /**
     * drive.properties.get
     * @desc Gets a property by its key.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.photos.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.properties.get({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file.
     *     fileId: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The key of the property.
     *     propertyKey: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // The visibility of the property.
     *     visibility: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "appId": "my_appId",
     *   //   "etag": "my_etag",
     *   //   "key": "my_key",
     *   //   "kind": "my_kind",
     *   //   "selfLink": "my_selfLink",
     *   //   "value": "my_value",
     *   //   "visibility": "my_visibility"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.properties.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string} params.propertyKey The key of the property.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {string=} params.visibility The visibility of the property.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params: Params$Resource$Properties$Get,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    get(
      params?: Params$Resource$Properties$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Property>;
    get(
      params: Params$Resource$Properties$Get,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    get(
      params: Params$Resource$Properties$Get,
      options: MethodOptions | BodyResponseCallback<Schema$Property>,
      callback: BodyResponseCallback<Schema$Property>
    ): void;
    get(
      params: Params$Resource$Properties$Get,
      callback: BodyResponseCallback<Schema$Property>
    ): void;
    get(callback: BodyResponseCallback<Schema$Property>): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Properties$Get
        | BodyResponseCallback<Schema$Property>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Property>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Property>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Property> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Properties$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Properties$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl +
              '/drive/v2.1beta/files/{fileId}/properties/{propertyKey}'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'propertyKey'],
        pathParams: ['fileId', 'propertyKey'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Property>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Property>(parameters);
      }
    }

    /**
     * drive.properties.insert
     * @desc Adds a property to a file.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.properties.insert({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file.
     *     fileId: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "appId": "my_appId",
     *       //   "etag": "my_etag",
     *       //   "key": "my_key",
     *       //   "kind": "my_kind",
     *       //   "selfLink": "my_selfLink",
     *       //   "value": "my_value",
     *       //   "visibility": "my_visibility"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "appId": "my_appId",
     *   //   "etag": "my_etag",
     *   //   "key": "my_key",
     *   //   "kind": "my_kind",
     *   //   "selfLink": "my_selfLink",
     *   //   "value": "my_value",
     *   //   "visibility": "my_visibility"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.properties.insert
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {().Property} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    insert(
      params: Params$Resource$Properties$Insert,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    insert(
      params?: Params$Resource$Properties$Insert,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Property>;
    insert(
      params: Params$Resource$Properties$Insert,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    insert(
      params: Params$Resource$Properties$Insert,
      options: MethodOptions | BodyResponseCallback<Schema$Property>,
      callback: BodyResponseCallback<Schema$Property>
    ): void;
    insert(
      params: Params$Resource$Properties$Insert,
      callback: BodyResponseCallback<Schema$Property>
    ): void;
    insert(callback: BodyResponseCallback<Schema$Property>): void;
    insert(
      paramsOrCallback?:
        | Params$Resource$Properties$Insert
        | BodyResponseCallback<Schema$Property>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Property>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Property>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Property> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Properties$Insert;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Properties$Insert;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/files/{fileId}/properties'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Property>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Property>(parameters);
      }
    }

    /**
     * drive.properties.list
     * @desc Lists a file's properties.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.photos.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.properties.list({
     *     // Whether to retrieve all properties, not just those visible to the app.
     *     allProperties: 'placeholder-value',
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file.
     *     fileId: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "etag": "my_etag",
     *   //   "items": [],
     *   //   "kind": "my_kind",
     *   //   "selfLink": "my_selfLink"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.properties.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.allProperties Whether to retrieve all properties, not just those visible to the app.
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params: Params$Resource$Properties$List,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    list(
      params?: Params$Resource$Properties$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$PropertyList>;
    list(
      params: Params$Resource$Properties$List,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    list(
      params: Params$Resource$Properties$List,
      options: MethodOptions | BodyResponseCallback<Schema$PropertyList>,
      callback: BodyResponseCallback<Schema$PropertyList>
    ): void;
    list(
      params: Params$Resource$Properties$List,
      callback: BodyResponseCallback<Schema$PropertyList>
    ): void;
    list(callback: BodyResponseCallback<Schema$PropertyList>): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Properties$List
        | BodyResponseCallback<Schema$PropertyList>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$PropertyList>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$PropertyList>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$PropertyList> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Properties$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Properties$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/files/{fileId}/properties'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$PropertyList>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$PropertyList>(parameters);
      }
    }

    /**
     * drive.properties.patch
     * @desc Updates a property.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.properties.patch({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file.
     *     fileId: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The key of the property.
     *     propertyKey: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // The visibility of the property. Allowed values are PRIVATE and PUBLIC. (Default: PRIVATE)
     *     visibility: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "appId": "my_appId",
     *       //   "etag": "my_etag",
     *       //   "key": "my_key",
     *       //   "kind": "my_kind",
     *       //   "selfLink": "my_selfLink",
     *       //   "value": "my_value",
     *       //   "visibility": "my_visibility"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "appId": "my_appId",
     *   //   "etag": "my_etag",
     *   //   "key": "my_key",
     *   //   "kind": "my_kind",
     *   //   "selfLink": "my_selfLink",
     *   //   "value": "my_value",
     *   //   "visibility": "my_visibility"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.properties.patch
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string} params.propertyKey The key of the property.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {string=} params.visibility The visibility of the property. Allowed values are PRIVATE and PUBLIC. (Default: PRIVATE)
     * @param {().Property} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    patch(
      params: Params$Resource$Properties$Patch,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    patch(
      params?: Params$Resource$Properties$Patch,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Property>;
    patch(
      params: Params$Resource$Properties$Patch,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    patch(
      params: Params$Resource$Properties$Patch,
      options: MethodOptions | BodyResponseCallback<Schema$Property>,
      callback: BodyResponseCallback<Schema$Property>
    ): void;
    patch(
      params: Params$Resource$Properties$Patch,
      callback: BodyResponseCallback<Schema$Property>
    ): void;
    patch(callback: BodyResponseCallback<Schema$Property>): void;
    patch(
      paramsOrCallback?:
        | Params$Resource$Properties$Patch
        | BodyResponseCallback<Schema$Property>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Property>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Property>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Property> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Properties$Patch;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Properties$Patch;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl +
              '/drive/v2.1beta/files/{fileId}/properties/{propertyKey}'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'propertyKey'],
        pathParams: ['fileId', 'propertyKey'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Property>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Property>(parameters);
      }
    }

    /**
     * drive.properties.update
     * @desc Updates a property.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.properties.update({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file.
     *     fileId: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The key of the property.
     *     propertyKey: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // The visibility of the property. Allowed values are PRIVATE and PUBLIC. (Default: PRIVATE)
     *     visibility: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "appId": "my_appId",
     *       //   "etag": "my_etag",
     *       //   "key": "my_key",
     *       //   "kind": "my_kind",
     *       //   "selfLink": "my_selfLink",
     *       //   "value": "my_value",
     *       //   "visibility": "my_visibility"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "appId": "my_appId",
     *   //   "etag": "my_etag",
     *   //   "key": "my_key",
     *   //   "kind": "my_kind",
     *   //   "selfLink": "my_selfLink",
     *   //   "value": "my_value",
     *   //   "visibility": "my_visibility"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.properties.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string} params.propertyKey The key of the property.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {string=} params.visibility The visibility of the property. Allowed values are PRIVATE and PUBLIC. (Default: PRIVATE)
     * @param {().Property} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params: Params$Resource$Properties$Update,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    update(
      params?: Params$Resource$Properties$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Property>;
    update(
      params: Params$Resource$Properties$Update,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    update(
      params: Params$Resource$Properties$Update,
      options: MethodOptions | BodyResponseCallback<Schema$Property>,
      callback: BodyResponseCallback<Schema$Property>
    ): void;
    update(
      params: Params$Resource$Properties$Update,
      callback: BodyResponseCallback<Schema$Property>
    ): void;
    update(callback: BodyResponseCallback<Schema$Property>): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Properties$Update
        | BodyResponseCallback<Schema$Property>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Property>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Property>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Property> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Properties$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Properties$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl +
              '/drive/v2.1beta/files/{fileId}/properties/{propertyKey}'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'propertyKey'],
        pathParams: ['fileId', 'propertyKey'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Property>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Property>(parameters);
      }
    }
  }

  export interface Params$Resource$Properties$Delete
    extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file.
     */
    fileId?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The key of the property.
     */
    propertyKey?: string;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * The visibility of the property.
     */
    visibility?: string;
  }
  export interface Params$Resource$Properties$Get extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file.
     */
    fileId?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The key of the property.
     */
    propertyKey?: string;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * The visibility of the property.
     */
    visibility?: string;
  }
  export interface Params$Resource$Properties$Insert
    extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file.
     */
    fileId?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;

    /**
     * Request body metadata
     */
    requestBody?: Schema$Property;
  }
  export interface Params$Resource$Properties$List extends StandardParameters {
    /**
     * Whether to retrieve all properties, not just those visible to the app.
     */
    allProperties?: boolean;
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file.
     */
    fileId?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }
  export interface Params$Resource$Properties$Patch extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file.
     */
    fileId?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The key of the property.
     */
    propertyKey?: string;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * The visibility of the property. Allowed values are PRIVATE and PUBLIC. (Default: PRIVATE)
     */
    visibility?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$Property;
  }
  export interface Params$Resource$Properties$Update
    extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file.
     */
    fileId?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The key of the property.
     */
    propertyKey?: string;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * The visibility of the property. Allowed values are PRIVATE and PUBLIC. (Default: PRIVATE)
     */
    visibility?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$Property;
  }

  export class Resource$Replies {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * drive.replies.delete
     * @desc Deletes a reply.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.file',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.replies.delete({
     *     // The ID of the comment.
     *     commentId: 'placeholder-value',
     *     // The ID of the file.
     *     fileId: 'placeholder-value',
     *     // The ID of the reply.
     *     replyId: 'placeholder-value',
     *   });
     *   console.log(res.data);
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.replies.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.commentId The ID of the comment.
     * @param {string} params.fileId The ID of the file.
     * @param {string} params.replyId The ID of the reply.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params: Params$Resource$Replies$Delete,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    delete(
      params?: Params$Resource$Replies$Delete,
      options?: MethodOptions
    ): GaxiosPromise<void>;
    delete(
      params: Params$Resource$Replies$Delete,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    delete(
      params: Params$Resource$Replies$Delete,
      options: MethodOptions | BodyResponseCallback<void>,
      callback: BodyResponseCallback<void>
    ): void;
    delete(
      params: Params$Resource$Replies$Delete,
      callback: BodyResponseCallback<void>
    ): void;
    delete(callback: BodyResponseCallback<void>): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Replies$Delete
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      callback?: BodyResponseCallback<void> | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<void> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Replies$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Replies$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl +
              '/drive/v2.1beta/files/{fileId}/comments/{commentId}/replies/{replyId}'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'commentId', 'replyId'],
        pathParams: ['commentId', 'fileId', 'replyId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<void>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<void>(parameters);
      }
    }

    /**
     * drive.replies.get
     * @desc Gets a reply.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.replies.get({
     *     // The ID of the comment.
     *     commentId: 'placeholder-value',
     *     // The ID of the file.
     *     fileId: 'placeholder-value',
     *     // If set, this will succeed when retrieving a deleted reply.
     *     includeDeleted: 'placeholder-value',
     *     // The ID of the reply.
     *     replyId: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "author": {},
     *   //   "content": "my_content",
     *   //   "createdDate": "my_createdDate",
     *   //   "deleted": false,
     *   //   "htmlContent": "my_htmlContent",
     *   //   "kind": "my_kind",
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "replyId": "my_replyId",
     *   //   "verb": "my_verb"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.replies.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.commentId The ID of the comment.
     * @param {string} params.fileId The ID of the file.
     * @param {boolean=} params.includeDeleted If set, this will succeed when retrieving a deleted reply.
     * @param {string} params.replyId The ID of the reply.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params: Params$Resource$Replies$Get,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    get(
      params?: Params$Resource$Replies$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$CommentReply>;
    get(
      params: Params$Resource$Replies$Get,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    get(
      params: Params$Resource$Replies$Get,
      options: MethodOptions | BodyResponseCallback<Schema$CommentReply>,
      callback: BodyResponseCallback<Schema$CommentReply>
    ): void;
    get(
      params: Params$Resource$Replies$Get,
      callback: BodyResponseCallback<Schema$CommentReply>
    ): void;
    get(callback: BodyResponseCallback<Schema$CommentReply>): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Replies$Get
        | BodyResponseCallback<Schema$CommentReply>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$CommentReply>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$CommentReply>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$CommentReply> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Replies$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Replies$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl +
              '/drive/v2.1beta/files/{fileId}/comments/{commentId}/replies/{replyId}'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'commentId', 'replyId'],
        pathParams: ['commentId', 'fileId', 'replyId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$CommentReply>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$CommentReply>(parameters);
      }
    }

    /**
     * drive.replies.insert
     * @desc Creates a new reply to the given comment.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.file',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.replies.insert({
     *     // The ID of the comment.
     *     commentId: 'placeholder-value',
     *     // The ID of the file.
     *     fileId: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "author": {},
     *       //   "content": "my_content",
     *       //   "createdDate": "my_createdDate",
     *       //   "deleted": false,
     *       //   "htmlContent": "my_htmlContent",
     *       //   "kind": "my_kind",
     *       //   "modifiedDate": "my_modifiedDate",
     *       //   "replyId": "my_replyId",
     *       //   "verb": "my_verb"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "author": {},
     *   //   "content": "my_content",
     *   //   "createdDate": "my_createdDate",
     *   //   "deleted": false,
     *   //   "htmlContent": "my_htmlContent",
     *   //   "kind": "my_kind",
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "replyId": "my_replyId",
     *   //   "verb": "my_verb"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.replies.insert
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.commentId The ID of the comment.
     * @param {string} params.fileId The ID of the file.
     * @param {().CommentReply} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    insert(
      params: Params$Resource$Replies$Insert,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    insert(
      params?: Params$Resource$Replies$Insert,
      options?: MethodOptions
    ): GaxiosPromise<Schema$CommentReply>;
    insert(
      params: Params$Resource$Replies$Insert,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    insert(
      params: Params$Resource$Replies$Insert,
      options: MethodOptions | BodyResponseCallback<Schema$CommentReply>,
      callback: BodyResponseCallback<Schema$CommentReply>
    ): void;
    insert(
      params: Params$Resource$Replies$Insert,
      callback: BodyResponseCallback<Schema$CommentReply>
    ): void;
    insert(callback: BodyResponseCallback<Schema$CommentReply>): void;
    insert(
      paramsOrCallback?:
        | Params$Resource$Replies$Insert
        | BodyResponseCallback<Schema$CommentReply>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$CommentReply>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$CommentReply>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$CommentReply> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Replies$Insert;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Replies$Insert;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl +
              '/drive/v2.1beta/files/{fileId}/comments/{commentId}/replies'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'commentId'],
        pathParams: ['commentId', 'fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$CommentReply>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$CommentReply>(parameters);
      }
    }

    /**
     * drive.replies.list
     * @desc Lists all of the replies to a comment.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.replies.list({
     *     // The ID of the comment.
     *     commentId: 'placeholder-value',
     *     // The ID of the file.
     *     fileId: 'placeholder-value',
     *     // If set, all replies, including deleted replies (with content stripped) will be returned.
     *     includeDeleted: 'placeholder-value',
     *     // The maximum number of replies to include in the response, used for paging.
     *     maxResults: 'placeholder-value',
     *     // The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.
     *     pageToken: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "items": [],
     *   //   "kind": "my_kind",
     *   //   "nextLink": "my_nextLink",
     *   //   "nextPageToken": "my_nextPageToken",
     *   //   "selfLink": "my_selfLink"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.replies.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.commentId The ID of the comment.
     * @param {string} params.fileId The ID of the file.
     * @param {boolean=} params.includeDeleted If set, all replies, including deleted replies (with content stripped) will be returned.
     * @param {integer=} params.maxResults The maximum number of replies to include in the response, used for paging.
     * @param {string=} params.pageToken The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params: Params$Resource$Replies$List,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    list(
      params?: Params$Resource$Replies$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$CommentReplyList>;
    list(
      params: Params$Resource$Replies$List,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    list(
      params: Params$Resource$Replies$List,
      options: MethodOptions | BodyResponseCallback<Schema$CommentReplyList>,
      callback: BodyResponseCallback<Schema$CommentReplyList>
    ): void;
    list(
      params: Params$Resource$Replies$List,
      callback: BodyResponseCallback<Schema$CommentReplyList>
    ): void;
    list(callback: BodyResponseCallback<Schema$CommentReplyList>): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Replies$List
        | BodyResponseCallback<Schema$CommentReplyList>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$CommentReplyList>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$CommentReplyList>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$CommentReplyList> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Replies$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Replies$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl +
              '/drive/v2.1beta/files/{fileId}/comments/{commentId}/replies'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'commentId'],
        pathParams: ['commentId', 'fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$CommentReplyList>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$CommentReplyList>(parameters);
      }
    }

    /**
     * drive.replies.update
     * @desc Updates an existing reply.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.file',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.replies.update({
     *     // The ID of the comment.
     *     commentId: 'placeholder-value',
     *     // The ID of the file.
     *     fileId: 'placeholder-value',
     *     // The ID of the reply.
     *     replyId: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "author": {},
     *       //   "content": "my_content",
     *       //   "createdDate": "my_createdDate",
     *       //   "deleted": false,
     *       //   "htmlContent": "my_htmlContent",
     *       //   "kind": "my_kind",
     *       //   "modifiedDate": "my_modifiedDate",
     *       //   "replyId": "my_replyId",
     *       //   "verb": "my_verb"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "author": {},
     *   //   "content": "my_content",
     *   //   "createdDate": "my_createdDate",
     *   //   "deleted": false,
     *   //   "htmlContent": "my_htmlContent",
     *   //   "kind": "my_kind",
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "replyId": "my_replyId",
     *   //   "verb": "my_verb"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.replies.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.commentId The ID of the comment.
     * @param {string} params.fileId The ID of the file.
     * @param {string} params.replyId The ID of the reply.
     * @param {().CommentReply} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params: Params$Resource$Replies$Update,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    update(
      params?: Params$Resource$Replies$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$CommentReply>;
    update(
      params: Params$Resource$Replies$Update,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    update(
      params: Params$Resource$Replies$Update,
      options: MethodOptions | BodyResponseCallback<Schema$CommentReply>,
      callback: BodyResponseCallback<Schema$CommentReply>
    ): void;
    update(
      params: Params$Resource$Replies$Update,
      callback: BodyResponseCallback<Schema$CommentReply>
    ): void;
    update(callback: BodyResponseCallback<Schema$CommentReply>): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Replies$Update
        | BodyResponseCallback<Schema$CommentReply>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$CommentReply>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$CommentReply>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$CommentReply> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Replies$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Replies$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl +
              '/drive/v2.1beta/files/{fileId}/comments/{commentId}/replies/{replyId}'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'commentId', 'replyId'],
        pathParams: ['commentId', 'fileId', 'replyId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$CommentReply>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$CommentReply>(parameters);
      }
    }
  }

  export interface Params$Resource$Replies$Delete extends StandardParameters {
    /**
     * The ID of the comment.
     */
    commentId?: string;
    /**
     * The ID of the file.
     */
    fileId?: string;
    /**
     * The ID of the reply.
     */
    replyId?: string;
  }
  export interface Params$Resource$Replies$Get extends StandardParameters {
    /**
     * The ID of the comment.
     */
    commentId?: string;
    /**
     * The ID of the file.
     */
    fileId?: string;
    /**
     * If set, this will succeed when retrieving a deleted reply.
     */
    includeDeleted?: boolean;
    /**
     * The ID of the reply.
     */
    replyId?: string;
  }
  export interface Params$Resource$Replies$Insert extends StandardParameters {
    /**
     * The ID of the comment.
     */
    commentId?: string;
    /**
     * The ID of the file.
     */
    fileId?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$CommentReply;
  }
  export interface Params$Resource$Replies$List extends StandardParameters {
    /**
     * The ID of the comment.
     */
    commentId?: string;
    /**
     * The ID of the file.
     */
    fileId?: string;
    /**
     * If set, all replies, including deleted replies (with content stripped) will be returned.
     */
    includeDeleted?: boolean;
    /**
     * The maximum number of replies to include in the response, used for paging.
     */
    maxResults?: number;
    /**
     * The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.
     */
    pageToken?: string;
  }
  export interface Params$Resource$Replies$Update extends StandardParameters {
    /**
     * The ID of the comment.
     */
    commentId?: string;
    /**
     * The ID of the file.
     */
    fileId?: string;
    /**
     * The ID of the reply.
     */
    replyId?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$CommentReply;
  }

  export class Resource$Revisions {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * drive.revisions.delete
     * @desc Removes a revision.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.file',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.revisions.delete({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file.
     *     fileId: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // The ID of the revision.
     *     revisionId: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.revisions.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {string} params.revisionId The ID of the revision.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params: Params$Resource$Revisions$Delete,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    delete(
      params?: Params$Resource$Revisions$Delete,
      options?: MethodOptions
    ): GaxiosPromise<void>;
    delete(
      params: Params$Resource$Revisions$Delete,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    delete(
      params: Params$Resource$Revisions$Delete,
      options: MethodOptions | BodyResponseCallback<void>,
      callback: BodyResponseCallback<void>
    ): void;
    delete(
      params: Params$Resource$Revisions$Delete,
      callback: BodyResponseCallback<void>
    ): void;
    delete(callback: BodyResponseCallback<void>): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Revisions$Delete
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      callback?: BodyResponseCallback<void> | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<void> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Revisions$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Revisions$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/files/{fileId}/revisions/{revisionId}'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'revisionId'],
        pathParams: ['fileId', 'revisionId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<void>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<void>(parameters);
      }
    }

    /**
     * drive.revisions.get
     * @desc Gets a specific revision.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.photos.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.revisions.get({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file.
     *     fileId: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // The ID of the revision.
     *     revisionId: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "decryptionMetadata": {},
     *   //   "downloadUrl": "my_downloadUrl",
     *   //   "etag": "my_etag",
     *   //   "exportLinks": {},
     *   //   "fileSize": "my_fileSize",
     *   //   "id": "my_id",
     *   //   "kind": "my_kind",
     *   //   "lastModifyingUser": {},
     *   //   "lastModifyingUserName": "my_lastModifyingUserName",
     *   //   "md5Checksum": "my_md5Checksum",
     *   //   "mimeType": "my_mimeType",
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "originalFilename": "my_originalFilename",
     *   //   "pinned": false,
     *   //   "preview": {},
     *   //   "publishAuto": false,
     *   //   "published": false,
     *   //   "publishedLink": "my_publishedLink",
     *   //   "publishedOutsideDomain": false,
     *   //   "selfLink": "my_selfLink",
     *   //   "serverModifiedDate": "my_serverModifiedDate"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.revisions.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {string} params.revisionId The ID of the revision.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params: Params$Resource$Revisions$Get,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    get(
      params?: Params$Resource$Revisions$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Revision>;
    get(
      params: Params$Resource$Revisions$Get,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    get(
      params: Params$Resource$Revisions$Get,
      options: MethodOptions | BodyResponseCallback<Schema$Revision>,
      callback: BodyResponseCallback<Schema$Revision>
    ): void;
    get(
      params: Params$Resource$Revisions$Get,
      callback: BodyResponseCallback<Schema$Revision>
    ): void;
    get(callback: BodyResponseCallback<Schema$Revision>): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Revisions$Get
        | BodyResponseCallback<Schema$Revision>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Revision>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Revision>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Revision> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Revisions$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Revisions$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/files/{fileId}/revisions/{revisionId}'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'revisionId'],
        pathParams: ['fileId', 'revisionId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Revision>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Revision>(parameters);
      }
    }

    /**
     * drive.revisions.list
     * @desc Lists a file's revisions.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.photos.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.revisions.list({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID of the file.
     *     fileId: 'placeholder-value',
     *     // Maximum number of revisions to return.
     *     maxResults: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // Page token for revisions. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.
     *     pageToken: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "etag": "my_etag",
     *   //   "items": [],
     *   //   "kind": "my_kind",
     *   //   "nextPageToken": "my_nextPageToken",
     *   //   "selfLink": "my_selfLink"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.revisions.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID of the file.
     * @param {integer=} params.maxResults Maximum number of revisions to return.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.pageToken Page token for revisions. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params: Params$Resource$Revisions$List,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    list(
      params?: Params$Resource$Revisions$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$RevisionList>;
    list(
      params: Params$Resource$Revisions$List,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    list(
      params: Params$Resource$Revisions$List,
      options: MethodOptions | BodyResponseCallback<Schema$RevisionList>,
      callback: BodyResponseCallback<Schema$RevisionList>
    ): void;
    list(
      params: Params$Resource$Revisions$List,
      callback: BodyResponseCallback<Schema$RevisionList>
    ): void;
    list(callback: BodyResponseCallback<Schema$RevisionList>): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Revisions$List
        | BodyResponseCallback<Schema$RevisionList>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$RevisionList>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$RevisionList>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$RevisionList> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Revisions$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Revisions$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/files/{fileId}/revisions').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['fileId'],
        pathParams: ['fileId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$RevisionList>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$RevisionList>(parameters);
      }
    }

    /**
     * drive.revisions.update
     * @desc Updates a revision.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.file',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.revisions.update({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The ID for the file.
     *     fileId: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // The ID for the revision.
     *     revisionId: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "decryptionMetadata": {},
     *       //   "downloadUrl": "my_downloadUrl",
     *       //   "etag": "my_etag",
     *       //   "exportLinks": {},
     *       //   "fileSize": "my_fileSize",
     *       //   "id": "my_id",
     *       //   "kind": "my_kind",
     *       //   "lastModifyingUser": {},
     *       //   "lastModifyingUserName": "my_lastModifyingUserName",
     *       //   "md5Checksum": "my_md5Checksum",
     *       //   "mimeType": "my_mimeType",
     *       //   "modifiedDate": "my_modifiedDate",
     *       //   "originalFilename": "my_originalFilename",
     *       //   "pinned": false,
     *       //   "preview": {},
     *       //   "publishAuto": false,
     *       //   "published": false,
     *       //   "publishedLink": "my_publishedLink",
     *       //   "publishedOutsideDomain": false,
     *       //   "selfLink": "my_selfLink",
     *       //   "serverModifiedDate": "my_serverModifiedDate"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "decryptionMetadata": {},
     *   //   "downloadUrl": "my_downloadUrl",
     *   //   "etag": "my_etag",
     *   //   "exportLinks": {},
     *   //   "fileSize": "my_fileSize",
     *   //   "id": "my_id",
     *   //   "kind": "my_kind",
     *   //   "lastModifyingUser": {},
     *   //   "lastModifyingUserName": "my_lastModifyingUserName",
     *   //   "md5Checksum": "my_md5Checksum",
     *   //   "mimeType": "my_mimeType",
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "originalFilename": "my_originalFilename",
     *   //   "pinned": false,
     *   //   "preview": {},
     *   //   "publishAuto": false,
     *   //   "published": false,
     *   //   "publishedLink": "my_publishedLink",
     *   //   "publishedOutsideDomain": false,
     *   //   "selfLink": "my_selfLink",
     *   //   "serverModifiedDate": "my_serverModifiedDate"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.revisions.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.fileId The ID for the file.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {string} params.revisionId The ID for the revision.
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {().Revision} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params: Params$Resource$Revisions$Update,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    update(
      params?: Params$Resource$Revisions$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Revision>;
    update(
      params: Params$Resource$Revisions$Update,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    update(
      params: Params$Resource$Revisions$Update,
      options: MethodOptions | BodyResponseCallback<Schema$Revision>,
      callback: BodyResponseCallback<Schema$Revision>
    ): void;
    update(
      params: Params$Resource$Revisions$Update,
      callback: BodyResponseCallback<Schema$Revision>
    ): void;
    update(callback: BodyResponseCallback<Schema$Revision>): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Revisions$Update
        | BodyResponseCallback<Schema$Revision>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Revision>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Revision>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Revision> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Revisions$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Revisions$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/files/{fileId}/revisions/{revisionId}'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['fileId', 'revisionId'],
        pathParams: ['fileId', 'revisionId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Revision>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Revision>(parameters);
      }
    }
  }

  export interface Params$Resource$Revisions$Delete extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file.
     */
    fileId?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * The ID of the revision.
     */
    revisionId?: string;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }
  export interface Params$Resource$Revisions$Get extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file.
     */
    fileId?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * The ID of the revision.
     */
    revisionId?: string;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }
  export interface Params$Resource$Revisions$List extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID of the file.
     */
    fileId?: string;
    /**
     * Maximum number of revisions to return.
     */
    maxResults?: number;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * Page token for revisions. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.
     */
    pageToken?: string;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }
  export interface Params$Resource$Revisions$Update extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The ID for the file.
     */
    fileId?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * The ID for the revision.
     */
    revisionId?: string;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;

    /**
     * Request body metadata
     */
    requestBody?: Schema$Revision;
  }

  export class Resource$Settings {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * drive.settings.delete
     * @desc Deletes a setting.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.settings.delete({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The key of the setting.
     *     keyname: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // The namespace of the setting.
     *     namespace: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.settings.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.keyname The key of the setting.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {string=} params.namespace The namespace of the setting.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params: Params$Resource$Settings$Delete,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    delete(
      params?: Params$Resource$Settings$Delete,
      options?: MethodOptions
    ): GaxiosPromise<void>;
    delete(
      params: Params$Resource$Settings$Delete,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    delete(
      params: Params$Resource$Settings$Delete,
      options: MethodOptions | BodyResponseCallback<void>,
      callback: BodyResponseCallback<void>
    ): void;
    delete(
      params: Params$Resource$Settings$Delete,
      callback: BodyResponseCallback<void>
    ): void;
    delete(callback: BodyResponseCallback<void>): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Settings$Delete
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      callback?: BodyResponseCallback<void> | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<void> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Settings$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Settings$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/settings/{keyname}').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['keyname'],
        pathParams: ['keyname'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<void>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<void>(parameters);
      }
    }

    /**
     * drive.settings.get
     * @desc Gets a setting by its key.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.settings.get({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The key of the setting.
     *     keyname: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // The namespace of the setting.
     *     namespace: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "etag": "my_etag",
     *   //   "key": "my_key",
     *   //   "kind": "my_kind",
     *   //   "namespace": "my_namespace",
     *   //   "selfLink": "my_selfLink",
     *   //   "value": "my_value"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.settings.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.keyname The key of the setting.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {string=} params.namespace The namespace of the setting.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params: Params$Resource$Settings$Get,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    get(
      params?: Params$Resource$Settings$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Setting>;
    get(
      params: Params$Resource$Settings$Get,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    get(
      params: Params$Resource$Settings$Get,
      options: MethodOptions | BodyResponseCallback<Schema$Setting>,
      callback: BodyResponseCallback<Schema$Setting>
    ): void;
    get(
      params: Params$Resource$Settings$Get,
      callback: BodyResponseCallback<Schema$Setting>
    ): void;
    get(callback: BodyResponseCallback<Schema$Setting>): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Settings$Get
        | BodyResponseCallback<Schema$Setting>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Setting>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Setting>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Setting> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Settings$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Settings$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/settings/{keyname}').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['keyname'],
        pathParams: ['keyname'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Setting>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Setting>(parameters);
      }
    }

    /**
     * drive.settings.insert
     * @desc Adds a setting for a user.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.settings.insert({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // The namespace of the created setting.
     *     namespace: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "etag": "my_etag",
     *       //   "key": "my_key",
     *       //   "kind": "my_kind",
     *       //   "namespace": "my_namespace",
     *       //   "selfLink": "my_selfLink",
     *       //   "value": "my_value"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "etag": "my_etag",
     *   //   "key": "my_key",
     *   //   "kind": "my_kind",
     *   //   "namespace": "my_namespace",
     *   //   "selfLink": "my_selfLink",
     *   //   "value": "my_value"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.settings.insert
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {string=} params.namespace The namespace of the created setting.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {().Setting} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    insert(
      params: Params$Resource$Settings$Insert,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    insert(
      params?: Params$Resource$Settings$Insert,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Setting>;
    insert(
      params: Params$Resource$Settings$Insert,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    insert(
      params: Params$Resource$Settings$Insert,
      options: MethodOptions | BodyResponseCallback<Schema$Setting>,
      callback: BodyResponseCallback<Schema$Setting>
    ): void;
    insert(
      params: Params$Resource$Settings$Insert,
      callback: BodyResponseCallback<Schema$Setting>
    ): void;
    insert(callback: BodyResponseCallback<Schema$Setting>): void;
    insert(
      paramsOrCallback?:
        | Params$Resource$Settings$Insert
        | BodyResponseCallback<Schema$Setting>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Setting>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Setting>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Setting> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Settings$Insert;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Settings$Insert;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/settings').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: [],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Setting>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Setting>(parameters);
      }
    }

    /**
     * drive.settings.list
     * @desc Lists a user's settings.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *       'https://www.googleapis.com/auth/drive.metadata.readonly',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.settings.list({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // The namespace of the settings.
     *     namespace: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "etag": "my_etag",
     *   //   "items": [],
     *   //   "kind": "my_kind",
     *   //   "selfLink": "my_selfLink"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.settings.list
     * @memberOf! ()
     *
     * @param {object=} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {string=} params.namespace The namespace of the settings.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params: Params$Resource$Settings$List,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    list(
      params?: Params$Resource$Settings$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$SettingList>;
    list(
      params: Params$Resource$Settings$List,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    list(
      params: Params$Resource$Settings$List,
      options: MethodOptions | BodyResponseCallback<Schema$SettingList>,
      callback: BodyResponseCallback<Schema$SettingList>
    ): void;
    list(
      params: Params$Resource$Settings$List,
      callback: BodyResponseCallback<Schema$SettingList>
    ): void;
    list(callback: BodyResponseCallback<Schema$SettingList>): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Settings$List
        | BodyResponseCallback<Schema$SettingList>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$SettingList>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$SettingList>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$SettingList> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Settings$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Settings$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/settings').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: [],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$SettingList>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$SettingList>(parameters);
      }
    }

    /**
     * drive.settings.update
     * @desc Updates a setting.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.appdata',
     *       'https://www.googleapis.com/auth/drive.file',
     *       'https://www.googleapis.com/auth/drive.metadata',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.settings.update({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The key of the setting.
     *     keyname: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // The namespace of the setting.
     *     namespace: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "etag": "my_etag",
     *       //   "key": "my_key",
     *       //   "kind": "my_kind",
     *       //   "namespace": "my_namespace",
     *       //   "selfLink": "my_selfLink",
     *       //   "value": "my_value"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "etag": "my_etag",
     *   //   "key": "my_key",
     *   //   "kind": "my_kind",
     *   //   "namespace": "my_namespace",
     *   //   "selfLink": "my_selfLink",
     *   //   "value": "my_value"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.settings.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {string} params.keyname The key of the setting.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {string=} params.namespace The namespace of the setting.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {().Setting} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params: Params$Resource$Settings$Update,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    update(
      params?: Params$Resource$Settings$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Setting>;
    update(
      params: Params$Resource$Settings$Update,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    update(
      params: Params$Resource$Settings$Update,
      options: MethodOptions | BodyResponseCallback<Schema$Setting>,
      callback: BodyResponseCallback<Schema$Setting>
    ): void;
    update(
      params: Params$Resource$Settings$Update,
      callback: BodyResponseCallback<Schema$Setting>
    ): void;
    update(callback: BodyResponseCallback<Schema$Setting>): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Settings$Update
        | BodyResponseCallback<Schema$Setting>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Setting>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Setting>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Setting> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Settings$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Settings$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/settings/{keyname}').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['keyname'],
        pathParams: ['keyname'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Setting>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Setting>(parameters);
      }
    }
  }

  export interface Params$Resource$Settings$Delete extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The key of the setting.
     */
    keyname?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * The namespace of the setting.
     */
    namespace?: string;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }
  export interface Params$Resource$Settings$Get extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The key of the setting.
     */
    keyname?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * The namespace of the setting.
     */
    namespace?: string;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }
  export interface Params$Resource$Settings$Insert extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * The namespace of the created setting.
     */
    namespace?: string;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;

    /**
     * Request body metadata
     */
    requestBody?: Schema$Setting;
  }
  export interface Params$Resource$Settings$List extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * The namespace of the settings.
     */
    namespace?: string[];
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }
  export interface Params$Resource$Settings$Update extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The key of the setting.
     */
    keyname?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * The namespace of the setting.
     */
    namespace?: string;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;

    /**
     * Request body metadata
     */
    requestBody?: Schema$Setting;
  }

  export class Resource$Teamdrives {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * drive.teamdrives.changeCategoryReferences
     * @desc Allows adding, removing, and updating references to Categories on a Team Drive.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.teamdrives.changeCategoryReferences({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // The ID of the Team Drive
     *     teamDriveId: 'placeholder-value',
     *     // Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the Team Drive belongs.
     *     useDomainAdminAccess: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "addCategoryReferences": [],
     *       //   "kind": "my_kind",
     *       //   "removeCategoryReferences": []
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "backgroundImageFile": {},
     *   //   "backgroundImageGridViewLink": "my_backgroundImageGridViewLink",
     *   //   "backgroundImageId": "my_backgroundImageId",
     *   //   "backgroundImageLink": "my_backgroundImageLink",
     *   //   "backgroundImageListViewLink": "my_backgroundImageListViewLink",
     *   //   "capabilities": {},
     *   //   "categoryReferences": [],
     *   //   "colorRgb": "my_colorRgb",
     *   //   "createdDate": "my_createdDate",
     *   //   "creator": {},
     *   //   "customerId": "my_customerId",
     *   //   "domainAllowsSharingOutside": false,
     *   //   "hidden": false,
     *   //   "id": "my_id",
     *   //   "kind": "my_kind",
     *   //   "name": "my_name",
     *   //   "organizationDisplayName": "my_organizationDisplayName",
     *   //   "permissionsSummary": {},
     *   //   "primaryDomainName": "my_primaryDomainName",
     *   //   "quotaInfo": {},
     *   //   "recursiveFileCount": "my_recursiveFileCount",
     *   //   "recursiveFolderCount": "my_recursiveFolderCount",
     *   //   "restrictions": {},
     *   //   "restrictionsOverride": {},
     *   //   "themeId": "my_themeId",
     *   //   "trusted": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.teamdrives.changeCategoryReferences
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {string} params.teamDriveId The ID of the Team Drive
     * @param {boolean=} params.useDomainAdminAccess Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the Team Drive belongs.
     * @param {().TeamDriveCategoryChangeRequest} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    changeCategoryReferences(
      params: Params$Resource$Teamdrives$Changecategoryreferences,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    changeCategoryReferences(
      params?: Params$Resource$Teamdrives$Changecategoryreferences,
      options?: MethodOptions
    ): GaxiosPromise<Schema$TeamDrive>;
    changeCategoryReferences(
      params: Params$Resource$Teamdrives$Changecategoryreferences,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    changeCategoryReferences(
      params: Params$Resource$Teamdrives$Changecategoryreferences,
      options: MethodOptions | BodyResponseCallback<Schema$TeamDrive>,
      callback: BodyResponseCallback<Schema$TeamDrive>
    ): void;
    changeCategoryReferences(
      params: Params$Resource$Teamdrives$Changecategoryreferences,
      callback: BodyResponseCallback<Schema$TeamDrive>
    ): void;
    changeCategoryReferences(
      callback: BodyResponseCallback<Schema$TeamDrive>
    ): void;
    changeCategoryReferences(
      paramsOrCallback?:
        | Params$Resource$Teamdrives$Changecategoryreferences
        | BodyResponseCallback<Schema$TeamDrive>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$TeamDrive>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$TeamDrive>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$TeamDrive> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Teamdrives$Changecategoryreferences;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Teamdrives$Changecategoryreferences;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl +
              '/drive/v2.1beta/teamdrives/{teamDriveId}/changeCategoryReferences'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['teamDriveId'],
        pathParams: ['teamDriveId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$TeamDrive>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$TeamDrive>(parameters);
      }
    }

    /**
     * drive.teamdrives.delete
     * @desc Permanently deletes a Team Drive for which the user is an organizer. The Team Drive cannot contain any untrashed items.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.teamdrives.delete({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // The ID of the Team Drive
     *     teamDriveId: 'placeholder-value',
     *   });
     *   console.log(res.data);
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.teamdrives.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {string} params.teamDriveId The ID of the Team Drive
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params: Params$Resource$Teamdrives$Delete,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    delete(
      params?: Params$Resource$Teamdrives$Delete,
      options?: MethodOptions
    ): GaxiosPromise<void>;
    delete(
      params: Params$Resource$Teamdrives$Delete,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    delete(
      params: Params$Resource$Teamdrives$Delete,
      options: MethodOptions | BodyResponseCallback<void>,
      callback: BodyResponseCallback<void>
    ): void;
    delete(
      params: Params$Resource$Teamdrives$Delete,
      callback: BodyResponseCallback<void>
    ): void;
    delete(callback: BodyResponseCallback<void>): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Teamdrives$Delete
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      callback?: BodyResponseCallback<void> | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<void> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Teamdrives$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Teamdrives$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/teamdrives/{teamDriveId}').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['teamDriveId'],
        pathParams: ['teamDriveId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<void>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<void>(parameters);
      }
    }

    /**
     * drive.teamdrives.get
     * @desc Gets a Team Drive's metadata by ID.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.teamdrives.get({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // The ID of the Team Drive
     *     teamDriveId: 'placeholder-value',
     *     // Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the Team Drive belongs.
     *     useDomainAdminAccess: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "backgroundImageFile": {},
     *   //   "backgroundImageGridViewLink": "my_backgroundImageGridViewLink",
     *   //   "backgroundImageId": "my_backgroundImageId",
     *   //   "backgroundImageLink": "my_backgroundImageLink",
     *   //   "backgroundImageListViewLink": "my_backgroundImageListViewLink",
     *   //   "capabilities": {},
     *   //   "categoryReferences": [],
     *   //   "colorRgb": "my_colorRgb",
     *   //   "createdDate": "my_createdDate",
     *   //   "creator": {},
     *   //   "customerId": "my_customerId",
     *   //   "domainAllowsSharingOutside": false,
     *   //   "hidden": false,
     *   //   "id": "my_id",
     *   //   "kind": "my_kind",
     *   //   "name": "my_name",
     *   //   "organizationDisplayName": "my_organizationDisplayName",
     *   //   "permissionsSummary": {},
     *   //   "primaryDomainName": "my_primaryDomainName",
     *   //   "quotaInfo": {},
     *   //   "recursiveFileCount": "my_recursiveFileCount",
     *   //   "recursiveFolderCount": "my_recursiveFolderCount",
     *   //   "restrictions": {},
     *   //   "restrictionsOverride": {},
     *   //   "themeId": "my_themeId",
     *   //   "trusted": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.teamdrives.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {string} params.teamDriveId The ID of the Team Drive
     * @param {boolean=} params.useDomainAdminAccess Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the Team Drive belongs.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params: Params$Resource$Teamdrives$Get,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    get(
      params?: Params$Resource$Teamdrives$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$TeamDrive>;
    get(
      params: Params$Resource$Teamdrives$Get,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    get(
      params: Params$Resource$Teamdrives$Get,
      options: MethodOptions | BodyResponseCallback<Schema$TeamDrive>,
      callback: BodyResponseCallback<Schema$TeamDrive>
    ): void;
    get(
      params: Params$Resource$Teamdrives$Get,
      callback: BodyResponseCallback<Schema$TeamDrive>
    ): void;
    get(callback: BodyResponseCallback<Schema$TeamDrive>): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Teamdrives$Get
        | BodyResponseCallback<Schema$TeamDrive>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$TeamDrive>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$TeamDrive>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$TeamDrive> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Teamdrives$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Teamdrives$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/teamdrives/{teamDriveId}').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['teamDriveId'],
        pathParams: ['teamDriveId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$TeamDrive>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$TeamDrive>(parameters);
      }
    }

    /**
     * drive.teamdrives.hide
     * @desc Hides a Team Drive from the default view.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.teamdrives.hide({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // The ID of the Team Drive
     *     teamDriveId: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "backgroundImageFile": {},
     *   //   "backgroundImageGridViewLink": "my_backgroundImageGridViewLink",
     *   //   "backgroundImageId": "my_backgroundImageId",
     *   //   "backgroundImageLink": "my_backgroundImageLink",
     *   //   "backgroundImageListViewLink": "my_backgroundImageListViewLink",
     *   //   "capabilities": {},
     *   //   "categoryReferences": [],
     *   //   "colorRgb": "my_colorRgb",
     *   //   "createdDate": "my_createdDate",
     *   //   "creator": {},
     *   //   "customerId": "my_customerId",
     *   //   "domainAllowsSharingOutside": false,
     *   //   "hidden": false,
     *   //   "id": "my_id",
     *   //   "kind": "my_kind",
     *   //   "name": "my_name",
     *   //   "organizationDisplayName": "my_organizationDisplayName",
     *   //   "permissionsSummary": {},
     *   //   "primaryDomainName": "my_primaryDomainName",
     *   //   "quotaInfo": {},
     *   //   "recursiveFileCount": "my_recursiveFileCount",
     *   //   "recursiveFolderCount": "my_recursiveFolderCount",
     *   //   "restrictions": {},
     *   //   "restrictionsOverride": {},
     *   //   "themeId": "my_themeId",
     *   //   "trusted": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.teamdrives.hide
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {string} params.teamDriveId The ID of the Team Drive
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    hide(
      params: Params$Resource$Teamdrives$Hide,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    hide(
      params?: Params$Resource$Teamdrives$Hide,
      options?: MethodOptions
    ): GaxiosPromise<Schema$TeamDrive>;
    hide(
      params: Params$Resource$Teamdrives$Hide,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    hide(
      params: Params$Resource$Teamdrives$Hide,
      options: MethodOptions | BodyResponseCallback<Schema$TeamDrive>,
      callback: BodyResponseCallback<Schema$TeamDrive>
    ): void;
    hide(
      params: Params$Resource$Teamdrives$Hide,
      callback: BodyResponseCallback<Schema$TeamDrive>
    ): void;
    hide(callback: BodyResponseCallback<Schema$TeamDrive>): void;
    hide(
      paramsOrCallback?:
        | Params$Resource$Teamdrives$Hide
        | BodyResponseCallback<Schema$TeamDrive>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$TeamDrive>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$TeamDrive>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$TeamDrive> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Teamdrives$Hide;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Teamdrives$Hide;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/teamdrives/{teamDriveId}/hide'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['teamDriveId'],
        pathParams: ['teamDriveId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$TeamDrive>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$TeamDrive>(parameters);
      }
    }

    /**
     * drive.teamdrives.insert
     * @desc Creates a new Team Drive.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.teamdrives.insert({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // An ID, such as a random UUID, which uniquely identifies this user's request for idempotent creation of a Team Drive. A repeated request by the same user and with the same request ID will avoid creating duplicates by attempting to create the same Team Drive. If the Team Drive already exists a 409 error will be returned.
     *     requestId: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "backgroundImageFile": {},
     *       //   "backgroundImageGridViewLink": "my_backgroundImageGridViewLink",
     *       //   "backgroundImageId": "my_backgroundImageId",
     *       //   "backgroundImageLink": "my_backgroundImageLink",
     *       //   "backgroundImageListViewLink": "my_backgroundImageListViewLink",
     *       //   "capabilities": {},
     *       //   "categoryReferences": [],
     *       //   "colorRgb": "my_colorRgb",
     *       //   "createdDate": "my_createdDate",
     *       //   "creator": {},
     *       //   "customerId": "my_customerId",
     *       //   "domainAllowsSharingOutside": false,
     *       //   "hidden": false,
     *       //   "id": "my_id",
     *       //   "kind": "my_kind",
     *       //   "name": "my_name",
     *       //   "organizationDisplayName": "my_organizationDisplayName",
     *       //   "permissionsSummary": {},
     *       //   "primaryDomainName": "my_primaryDomainName",
     *       //   "quotaInfo": {},
     *       //   "recursiveFileCount": "my_recursiveFileCount",
     *       //   "recursiveFolderCount": "my_recursiveFolderCount",
     *       //   "restrictions": {},
     *       //   "restrictionsOverride": {},
     *       //   "themeId": "my_themeId",
     *       //   "trusted": false
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "backgroundImageFile": {},
     *   //   "backgroundImageGridViewLink": "my_backgroundImageGridViewLink",
     *   //   "backgroundImageId": "my_backgroundImageId",
     *   //   "backgroundImageLink": "my_backgroundImageLink",
     *   //   "backgroundImageListViewLink": "my_backgroundImageListViewLink",
     *   //   "capabilities": {},
     *   //   "categoryReferences": [],
     *   //   "colorRgb": "my_colorRgb",
     *   //   "createdDate": "my_createdDate",
     *   //   "creator": {},
     *   //   "customerId": "my_customerId",
     *   //   "domainAllowsSharingOutside": false,
     *   //   "hidden": false,
     *   //   "id": "my_id",
     *   //   "kind": "my_kind",
     *   //   "name": "my_name",
     *   //   "organizationDisplayName": "my_organizationDisplayName",
     *   //   "permissionsSummary": {},
     *   //   "primaryDomainName": "my_primaryDomainName",
     *   //   "quotaInfo": {},
     *   //   "recursiveFileCount": "my_recursiveFileCount",
     *   //   "recursiveFolderCount": "my_recursiveFolderCount",
     *   //   "restrictions": {},
     *   //   "restrictionsOverride": {},
     *   //   "themeId": "my_themeId",
     *   //   "trusted": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.teamdrives.insert
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {string} params.requestId An ID, such as a random UUID, which uniquely identifies this user's request for idempotent creation of a Team Drive. A repeated request by the same user and with the same request ID will avoid creating duplicates by attempting to create the same Team Drive. If the Team Drive already exists a 409 error will be returned.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {().TeamDrive} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    insert(
      params: Params$Resource$Teamdrives$Insert,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    insert(
      params?: Params$Resource$Teamdrives$Insert,
      options?: MethodOptions
    ): GaxiosPromise<Schema$TeamDrive>;
    insert(
      params: Params$Resource$Teamdrives$Insert,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    insert(
      params: Params$Resource$Teamdrives$Insert,
      options: MethodOptions | BodyResponseCallback<Schema$TeamDrive>,
      callback: BodyResponseCallback<Schema$TeamDrive>
    ): void;
    insert(
      params: Params$Resource$Teamdrives$Insert,
      callback: BodyResponseCallback<Schema$TeamDrive>
    ): void;
    insert(callback: BodyResponseCallback<Schema$TeamDrive>): void;
    insert(
      paramsOrCallback?:
        | Params$Resource$Teamdrives$Insert
        | BodyResponseCallback<Schema$TeamDrive>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$TeamDrive>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$TeamDrive>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$TeamDrive> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Teamdrives$Insert;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Teamdrives$Insert;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/teamdrives/{requestId}').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['requestId'],
        pathParams: ['requestId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$TeamDrive>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$TeamDrive>(parameters);
      }
    }

    /**
     * drive.teamdrives.list
     * @desc Lists the user's Team Drives.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.teamdrives.list({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // Maximum number of Team Drives to return.
     *     maxResults: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // Page token for Team Drives.
     *     pageToken: 'placeholder-value',
     *     // Query string for searching Team Drives.
     *     q: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // Issue the request as a domain administrator; if set to true, then all Team Drives of the domain in which the requester is an administrator are returned.
     *     useDomainAdminAccess: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "items": [],
     *   //   "kind": "my_kind",
     *   //   "nextPageToken": "my_nextPageToken"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.teamdrives.list
     * @memberOf! ()
     *
     * @param {object=} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.maxResults Maximum number of Team Drives to return.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.pageToken Page token for Team Drives.
     * @param {string=} params.q Query string for searching Team Drives.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {boolean=} params.useDomainAdminAccess Issue the request as a domain administrator; if set to true, then all Team Drives of the domain in which the requester is an administrator are returned.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params: Params$Resource$Teamdrives$List,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    list(
      params?: Params$Resource$Teamdrives$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$TeamDriveList>;
    list(
      params: Params$Resource$Teamdrives$List,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    list(
      params: Params$Resource$Teamdrives$List,
      options: MethodOptions | BodyResponseCallback<Schema$TeamDriveList>,
      callback: BodyResponseCallback<Schema$TeamDriveList>
    ): void;
    list(
      params: Params$Resource$Teamdrives$List,
      callback: BodyResponseCallback<Schema$TeamDriveList>
    ): void;
    list(callback: BodyResponseCallback<Schema$TeamDriveList>): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Teamdrives$List
        | BodyResponseCallback<Schema$TeamDriveList>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$TeamDriveList>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$TeamDriveList>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$TeamDriveList> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Teamdrives$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Teamdrives$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/teamdrives').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: [],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$TeamDriveList>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$TeamDriveList>(parameters);
      }
    }

    /**
     * drive.teamdrives.unhide
     * @desc Restores a Team Drive to the default view.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.teamdrives.unhide({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // The ID of the Team Drive
     *     teamDriveId: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "backgroundImageFile": {},
     *   //   "backgroundImageGridViewLink": "my_backgroundImageGridViewLink",
     *   //   "backgroundImageId": "my_backgroundImageId",
     *   //   "backgroundImageLink": "my_backgroundImageLink",
     *   //   "backgroundImageListViewLink": "my_backgroundImageListViewLink",
     *   //   "capabilities": {},
     *   //   "categoryReferences": [],
     *   //   "colorRgb": "my_colorRgb",
     *   //   "createdDate": "my_createdDate",
     *   //   "creator": {},
     *   //   "customerId": "my_customerId",
     *   //   "domainAllowsSharingOutside": false,
     *   //   "hidden": false,
     *   //   "id": "my_id",
     *   //   "kind": "my_kind",
     *   //   "name": "my_name",
     *   //   "organizationDisplayName": "my_organizationDisplayName",
     *   //   "permissionsSummary": {},
     *   //   "primaryDomainName": "my_primaryDomainName",
     *   //   "quotaInfo": {},
     *   //   "recursiveFileCount": "my_recursiveFileCount",
     *   //   "recursiveFolderCount": "my_recursiveFolderCount",
     *   //   "restrictions": {},
     *   //   "restrictionsOverride": {},
     *   //   "themeId": "my_themeId",
     *   //   "trusted": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.teamdrives.unhide
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {string} params.teamDriveId The ID of the Team Drive
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    unhide(
      params: Params$Resource$Teamdrives$Unhide,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    unhide(
      params?: Params$Resource$Teamdrives$Unhide,
      options?: MethodOptions
    ): GaxiosPromise<Schema$TeamDrive>;
    unhide(
      params: Params$Resource$Teamdrives$Unhide,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    unhide(
      params: Params$Resource$Teamdrives$Unhide,
      options: MethodOptions | BodyResponseCallback<Schema$TeamDrive>,
      callback: BodyResponseCallback<Schema$TeamDrive>
    ): void;
    unhide(
      params: Params$Resource$Teamdrives$Unhide,
      callback: BodyResponseCallback<Schema$TeamDrive>
    ): void;
    unhide(callback: BodyResponseCallback<Schema$TeamDrive>): void;
    unhide(
      paramsOrCallback?:
        | Params$Resource$Teamdrives$Unhide
        | BodyResponseCallback<Schema$TeamDrive>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$TeamDrive>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$TeamDrive>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$TeamDrive> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Teamdrives$Unhide;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Teamdrives$Unhide;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/drive/v2.1beta/teamdrives/{teamDriveId}/unhide'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['teamDriveId'],
        pathParams: ['teamDriveId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$TeamDrive>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$TeamDrive>(parameters);
      }
    }

    /**
     * drive.teamdrives.update
     * @desc Updates a Team Drive's metadata
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.teamdrives.update({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // The ID of the Team Drive
     *     teamDriveId: 'placeholder-value',
     *     // Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the Team Drive belongs.
     *     useDomainAdminAccess: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "backgroundImageFile": {},
     *       //   "backgroundImageGridViewLink": "my_backgroundImageGridViewLink",
     *       //   "backgroundImageId": "my_backgroundImageId",
     *       //   "backgroundImageLink": "my_backgroundImageLink",
     *       //   "backgroundImageListViewLink": "my_backgroundImageListViewLink",
     *       //   "capabilities": {},
     *       //   "categoryReferences": [],
     *       //   "colorRgb": "my_colorRgb",
     *       //   "createdDate": "my_createdDate",
     *       //   "creator": {},
     *       //   "customerId": "my_customerId",
     *       //   "domainAllowsSharingOutside": false,
     *       //   "hidden": false,
     *       //   "id": "my_id",
     *       //   "kind": "my_kind",
     *       //   "name": "my_name",
     *       //   "organizationDisplayName": "my_organizationDisplayName",
     *       //   "permissionsSummary": {},
     *       //   "primaryDomainName": "my_primaryDomainName",
     *       //   "quotaInfo": {},
     *       //   "recursiveFileCount": "my_recursiveFileCount",
     *       //   "recursiveFolderCount": "my_recursiveFolderCount",
     *       //   "restrictions": {},
     *       //   "restrictionsOverride": {},
     *       //   "themeId": "my_themeId",
     *       //   "trusted": false
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "backgroundImageFile": {},
     *   //   "backgroundImageGridViewLink": "my_backgroundImageGridViewLink",
     *   //   "backgroundImageId": "my_backgroundImageId",
     *   //   "backgroundImageLink": "my_backgroundImageLink",
     *   //   "backgroundImageListViewLink": "my_backgroundImageListViewLink",
     *   //   "capabilities": {},
     *   //   "categoryReferences": [],
     *   //   "colorRgb": "my_colorRgb",
     *   //   "createdDate": "my_createdDate",
     *   //   "creator": {},
     *   //   "customerId": "my_customerId",
     *   //   "domainAllowsSharingOutside": false,
     *   //   "hidden": false,
     *   //   "id": "my_id",
     *   //   "kind": "my_kind",
     *   //   "name": "my_name",
     *   //   "organizationDisplayName": "my_organizationDisplayName",
     *   //   "permissionsSummary": {},
     *   //   "primaryDomainName": "my_primaryDomainName",
     *   //   "quotaInfo": {},
     *   //   "recursiveFileCount": "my_recursiveFileCount",
     *   //   "recursiveFolderCount": "my_recursiveFolderCount",
     *   //   "restrictions": {},
     *   //   "restrictionsOverride": {},
     *   //   "themeId": "my_themeId",
     *   //   "trusted": false
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.teamdrives.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {string} params.teamDriveId The ID of the Team Drive
     * @param {boolean=} params.useDomainAdminAccess Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the Team Drive belongs.
     * @param {().TeamDrive} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params: Params$Resource$Teamdrives$Update,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    update(
      params?: Params$Resource$Teamdrives$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$TeamDrive>;
    update(
      params: Params$Resource$Teamdrives$Update,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    update(
      params: Params$Resource$Teamdrives$Update,
      options: MethodOptions | BodyResponseCallback<Schema$TeamDrive>,
      callback: BodyResponseCallback<Schema$TeamDrive>
    ): void;
    update(
      params: Params$Resource$Teamdrives$Update,
      callback: BodyResponseCallback<Schema$TeamDrive>
    ): void;
    update(callback: BodyResponseCallback<Schema$TeamDrive>): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Teamdrives$Update
        | BodyResponseCallback<Schema$TeamDrive>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$TeamDrive>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$TeamDrive>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$TeamDrive> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Teamdrives$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Teamdrives$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/teamdrives/{teamDriveId}').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['teamDriveId'],
        pathParams: ['teamDriveId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$TeamDrive>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$TeamDrive>(parameters);
      }
    }
  }

  export interface Params$Resource$Teamdrives$Changecategoryreferences
    extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * The ID of the Team Drive
     */
    teamDriveId?: string;
    /**
     * Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the Team Drive belongs.
     */
    useDomainAdminAccess?: boolean;

    /**
     * Request body metadata
     */
    requestBody?: Schema$TeamDriveCategoryChangeRequest;
  }
  export interface Params$Resource$Teamdrives$Delete
    extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * The ID of the Team Drive
     */
    teamDriveId?: string;
  }
  export interface Params$Resource$Teamdrives$Get extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * The ID of the Team Drive
     */
    teamDriveId?: string;
    /**
     * Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the Team Drive belongs.
     */
    useDomainAdminAccess?: boolean;
  }
  export interface Params$Resource$Teamdrives$Hide extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * The ID of the Team Drive
     */
    teamDriveId?: string;
  }
  export interface Params$Resource$Teamdrives$Insert
    extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * An ID, such as a random UUID, which uniquely identifies this user's request for idempotent creation of a Team Drive. A repeated request by the same user and with the same request ID will avoid creating duplicates by attempting to create the same Team Drive. If the Team Drive already exists a 409 error will be returned.
     */
    requestId?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;

    /**
     * Request body metadata
     */
    requestBody?: Schema$TeamDrive;
  }
  export interface Params$Resource$Teamdrives$List extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * Maximum number of Team Drives to return.
     */
    maxResults?: number;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * Page token for Team Drives.
     */
    pageToken?: string;
    /**
     * Query string for searching Team Drives.
     */
    q?: string;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * Issue the request as a domain administrator; if set to true, then all Team Drives of the domain in which the requester is an administrator are returned.
     */
    useDomainAdminAccess?: boolean;
  }
  export interface Params$Resource$Teamdrives$Unhide
    extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * The ID of the Team Drive
     */
    teamDriveId?: string;
  }
  export interface Params$Resource$Teamdrives$Update
    extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * The ID of the Team Drive
     */
    teamDriveId?: string;
    /**
     * Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the Team Drive belongs.
     */
    useDomainAdminAccess?: boolean;

    /**
     * Request body metadata
     */
    requestBody?: Schema$TeamDrive;
  }

  export class Resource$Workspaces {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * drive.workspaces.delete
     * @desc Delete the Workspace with the given ID.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.workspaces.delete({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // The ID of the Workspace to delete.
     *     workspaceId: 'placeholder-value',
     *   });
     *   console.log(res.data);
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.workspaces.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {string} params.workspaceId The ID of the Workspace to delete.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params: Params$Resource$Workspaces$Delete,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    delete(
      params?: Params$Resource$Workspaces$Delete,
      options?: MethodOptions
    ): GaxiosPromise<void>;
    delete(
      params: Params$Resource$Workspaces$Delete,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    delete(
      params: Params$Resource$Workspaces$Delete,
      options: MethodOptions | BodyResponseCallback<void>,
      callback: BodyResponseCallback<void>
    ): void;
    delete(
      params: Params$Resource$Workspaces$Delete,
      callback: BodyResponseCallback<void>
    ): void;
    delete(callback: BodyResponseCallback<void>): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Workspaces$Delete
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<void>
        | BodyResponseCallback<Readable>,
      callback?: BodyResponseCallback<void> | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<void> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Workspaces$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Workspaces$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/workspaces/{workspaceId}').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['workspaceId'],
        pathParams: ['workspaceId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<void>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<void>(parameters);
      }
    }

    /**
     * drive.workspaces.get
     * @desc Retrieve the metadata of the Workspace with the given ID.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.workspaces.get({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // The ID of the Workspace.
     *     workspaceId: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "createdDate": "my_createdDate",
     *   //   "id": "my_id",
     *   //   "kind": "my_kind",
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "state": "my_state",
     *   //   "title": "my_title",
     *   //   "workspaceToken": "my_workspaceToken"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.workspaces.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {string} params.workspaceId The ID of the Workspace.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params: Params$Resource$Workspaces$Get,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    get(
      params?: Params$Resource$Workspaces$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Workspace>;
    get(
      params: Params$Resource$Workspaces$Get,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    get(
      params: Params$Resource$Workspaces$Get,
      options: MethodOptions | BodyResponseCallback<Schema$Workspace>,
      callback: BodyResponseCallback<Schema$Workspace>
    ): void;
    get(
      params: Params$Resource$Workspaces$Get,
      callback: BodyResponseCallback<Schema$Workspace>
    ): void;
    get(callback: BodyResponseCallback<Schema$Workspace>): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Workspaces$Get
        | BodyResponseCallback<Schema$Workspace>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Workspace>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Workspace>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Workspace> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Workspaces$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Workspaces$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/workspaces/{workspaceId}').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['workspaceId'],
        pathParams: ['workspaceId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Workspace>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Workspace>(parameters);
      }
    }

    /**
     * drive.workspaces.insert
     * @desc Inserts a new Workspace.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.workspaces.insert({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "createdDate": "my_createdDate",
     *       //   "id": "my_id",
     *       //   "kind": "my_kind",
     *       //   "modifiedDate": "my_modifiedDate",
     *       //   "state": "my_state",
     *       //   "title": "my_title",
     *       //   "workspaceToken": "my_workspaceToken"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "createdDate": "my_createdDate",
     *   //   "id": "my_id",
     *   //   "kind": "my_kind",
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "state": "my_state",
     *   //   "title": "my_title",
     *   //   "workspaceToken": "my_workspaceToken"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.workspaces.insert
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {().Workspace} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    insert(
      params: Params$Resource$Workspaces$Insert,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    insert(
      params?: Params$Resource$Workspaces$Insert,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Workspace>;
    insert(
      params: Params$Resource$Workspaces$Insert,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    insert(
      params: Params$Resource$Workspaces$Insert,
      options: MethodOptions | BodyResponseCallback<Schema$Workspace>,
      callback: BodyResponseCallback<Schema$Workspace>
    ): void;
    insert(
      params: Params$Resource$Workspaces$Insert,
      callback: BodyResponseCallback<Schema$Workspace>
    ): void;
    insert(callback: BodyResponseCallback<Schema$Workspace>): void;
    insert(
      paramsOrCallback?:
        | Params$Resource$Workspaces$Insert
        | BodyResponseCallback<Schema$Workspace>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Workspace>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Workspace>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Workspace> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Workspaces$Insert;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Workspaces$Insert;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/workspaces').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: [],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Workspace>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Workspace>(parameters);
      }
    }

    /**
     * drive.workspaces.list
     * @desc List the user's Workspaces.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: [
     *       'https://www.googleapis.com/auth/drive',
     *       'https://www.googleapis.com/auth/drive.readonly',
     *     ],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.workspaces.list({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // The maximum number of Workspaces to return per page. Partial or empty result pages are possible even before the end of the Workspaces list has been reached.
     *     maxResults: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // Valid sort keys are 'modifiedDate' and 'title'. Each key sorts ascending by default, but may be reversed with the 'desc' modifier. Example usage: ?orderBy=modifiedDate desc. Multiple sort keys are not currenly supported.
     *     orderBy: 'placeholder-value',
     *     // Page token for continuation of a paged result of Workspaces.
     *     pageToken: 'placeholder-value',
     *     // Query string for searching Workspaces.
     *     q: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "items": [],
     *   //   "kind": "my_kind",
     *   //   "nextPageToken": "my_nextPageToken"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.workspaces.list
     * @memberOf! ()
     *
     * @param {object=} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.maxResults The maximum number of Workspaces to return per page. Partial or empty result pages are possible even before the end of the Workspaces list has been reached.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.orderBy Valid sort keys are 'modifiedDate' and 'title'. Each key sorts ascending by default, but may be reversed with the 'desc' modifier. Example usage: ?orderBy=modifiedDate desc. Multiple sort keys are not currenly supported.
     * @param {string=} params.pageToken Page token for continuation of a paged result of Workspaces.
     * @param {string=} params.q Query string for searching Workspaces.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params: Params$Resource$Workspaces$List,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    list(
      params?: Params$Resource$Workspaces$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$WorkspaceList>;
    list(
      params: Params$Resource$Workspaces$List,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    list(
      params: Params$Resource$Workspaces$List,
      options: MethodOptions | BodyResponseCallback<Schema$WorkspaceList>,
      callback: BodyResponseCallback<Schema$WorkspaceList>
    ): void;
    list(
      params: Params$Resource$Workspaces$List,
      callback: BodyResponseCallback<Schema$WorkspaceList>
    ): void;
    list(callback: BodyResponseCallback<Schema$WorkspaceList>): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Workspaces$List
        | BodyResponseCallback<Schema$WorkspaceList>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$WorkspaceList>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$WorkspaceList>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$WorkspaceList> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Workspaces$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Workspaces$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/workspaces').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: [],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$WorkspaceList>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$WorkspaceList>(parameters);
      }
    }

    /**
     * drive.workspaces.update
     * @desc Update the metadata of the Workspace with the given ID.
     * @example
     * // Before running the sample:
     * // - Enable the API at:
     * //   https://console.developers.google.com/apis/api/drive.googleapis.com
     * // - Login into gcloud by running:
     * //   `$ gcloud auth application-default login`
     * // - Install the npm module by running:
     * //   `$ npm install googleapis`
     *
     * const {google} = require('googleapis');
     * const drive = google.drive('v2.1beta');
     *
     * async function main() {
     *   const auth = new google.auth.GoogleAuth({
     *     // Scopes can be specified either as an array or as a single, space-delimited string.
     *     scopes: ['https://www.googleapis.com/auth/drive'],
     *   });
     *
     *   // Acquire an auth client, and bind it to all future calls
     *   const authClient = await auth.getClient();
     *   google.options({auth: authClient});
     *
     *   // Do the magic
     *   const res = await drive.workspaces.update({
     *     // Whether the request is done as a corrective measure after an earlier failed request.
     *     errorRecovery: 'placeholder-value',
     *     // The label associated with a tracked feature rollout.
     *     featureLabel: 'placeholder-value',
     *     // For retries only: how much time has elapsed since the last attempt
     *     msSinceLastAttempt: 'placeholder-value',
     *     // Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     *     mutationPrecondition: 'placeholder-value',
     *     // Whether the request is a part of initializing the app/website data when the user begins a session.
     *     openDrive: 'placeholder-value',
     *     // The user action or internal event that triggered the request.
     *     reason: 'placeholder-value',
     *     // How many times this request has been retried - the first attempt has retryCount 0
     *     retryCount: 'placeholder-value',
     *     // Whether the request is blocking a user action or not.
     *     syncType: 'placeholder-value',
     *     // The ID of the Workspace to update.
     *     workspaceId: 'placeholder-value',
     *
     *     // Request body metadata
     *     requestBody: {
     *       // request body parameters
     *       // {
     *       //   "createdDate": "my_createdDate",
     *       //   "id": "my_id",
     *       //   "kind": "my_kind",
     *       //   "modifiedDate": "my_modifiedDate",
     *       //   "state": "my_state",
     *       //   "title": "my_title",
     *       //   "workspaceToken": "my_workspaceToken"
     *       // }
     *     },
     *   });
     *   console.log(res.data);
     *
     *   // Example response
     *   // {
     *   //   "createdDate": "my_createdDate",
     *   //   "id": "my_id",
     *   //   "kind": "my_kind",
     *   //   "modifiedDate": "my_modifiedDate",
     *   //   "state": "my_state",
     *   //   "title": "my_title",
     *   //   "workspaceToken": "my_workspaceToken"
     *   // }
     * }
     *
     * main().catch(e => {
     *   console.error(e);
     *   throw e;
     * });
     *
     * @alias drive.workspaces.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.errorRecovery Whether the request is done as a corrective measure after an earlier failed request.
     * @param {string=} params.featureLabel The label associated with a tracked feature rollout.
     * @param {integer=} params.msSinceLastAttempt For retries only: how much time has elapsed since the last attempt
     * @param {boolean=} params.mutationPrecondition Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     * @param {boolean=} params.openDrive Whether the request is a part of initializing the app/website data when the user begins a session.
     * @param {string=} params.reason The user action or internal event that triggered the request.
     * @param {integer=} params.retryCount How many times this request has been retried - the first attempt has retryCount 0
     * @param {integer=} params.syncType Whether the request is blocking a user action or not.
     * @param {string} params.workspaceId The ID of the Workspace to update.
     * @param {().Workspace} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params: Params$Resource$Workspaces$Update,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    update(
      params?: Params$Resource$Workspaces$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$Workspace>;
    update(
      params: Params$Resource$Workspaces$Update,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    update(
      params: Params$Resource$Workspaces$Update,
      options: MethodOptions | BodyResponseCallback<Schema$Workspace>,
      callback: BodyResponseCallback<Schema$Workspace>
    ): void;
    update(
      params: Params$Resource$Workspaces$Update,
      callback: BodyResponseCallback<Schema$Workspace>
    ): void;
    update(callback: BodyResponseCallback<Schema$Workspace>): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Workspaces$Update
        | BodyResponseCallback<Schema$Workspace>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$Workspace>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$Workspace>
        | BodyResponseCallback<Readable>
    ): void | GaxiosPromise<Schema$Workspace> | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Workspaces$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Workspaces$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/drive/v2.1beta/workspaces/{workspaceId}').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['workspaceId'],
        pathParams: ['workspaceId'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$Workspace>(
          parameters,
          callback as BodyResponseCallback<{} | void>
        );
      } else {
        return createAPIRequest<Schema$Workspace>(parameters);
      }
    }
  }

  export interface Params$Resource$Workspaces$Delete
    extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * The ID of the Workspace to delete.
     */
    workspaceId?: string;
  }
  export interface Params$Resource$Workspaces$Get extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * The ID of the Workspace.
     */
    workspaceId?: string;
  }
  export interface Params$Resource$Workspaces$Insert
    extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;

    /**
     * Request body metadata
     */
    requestBody?: Schema$Workspace;
  }
  export interface Params$Resource$Workspaces$List extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * The maximum number of Workspaces to return per page. Partial or empty result pages are possible even before the end of the Workspaces list has been reached.
     */
    maxResults?: number;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * Valid sort keys are 'modifiedDate' and 'title'. Each key sorts ascending by default, but may be reversed with the 'desc' modifier. Example usage: ?orderBy=modifiedDate desc. Multiple sort keys are not currenly supported.
     */
    orderBy?: string;
    /**
     * Page token for continuation of a paged result of Workspaces.
     */
    pageToken?: string;
    /**
     * Query string for searching Workspaces.
     */
    q?: string;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
  }
  export interface Params$Resource$Workspaces$Update
    extends StandardParameters {
    /**
     * Whether the request is done as a corrective measure after an earlier failed request.
     */
    errorRecovery?: boolean;
    /**
     * The label associated with a tracked feature rollout.
     */
    featureLabel?: string;
    /**
     * For retries only: how much time has elapsed since the last attempt
     */
    msSinceLastAttempt?: number;
    /**
     * Whether the request is done prior to a mutation to verify that data is in an expected/desired/supported state.
     */
    mutationPrecondition?: boolean;
    /**
     * Whether the request is a part of initializing the app/website data when the user begins a session.
     */
    openDrive?: boolean;
    /**
     * The user action or internal event that triggered the request.
     */
    reason?: string;
    /**
     * How many times this request has been retried - the first attempt has retryCount 0
     */
    retryCount?: number;
    /**
     * Whether the request is blocking a user action or not.
     */
    syncType?: number;
    /**
     * The ID of the Workspace to update.
     */
    workspaceId?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$Workspace;
  }
}
